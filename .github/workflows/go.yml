name: Go

on: [push, pull_request]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - uses: Logerfo/newline-action@0.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29

  build:
    name: Build
    runs-on: ubuntu-latest
    container: golang:1.14-stretch
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      run: go build -v -race ./cmd/arrai

  test:
    name: Test
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Set up Go 1.14
      if: success()
      uses: actions/setup-go@v1
      with:
        go-version: 1.14

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Run tests
      run: make test

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    container: golang:1.14-stretch
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Calculate coverage
      run: go test -v -covermode=atomic -coverprofile=coverage.out -race ./...

    - name: Convert coverage to lcov
      uses: jandelgado/gcov2lcov-action@v1.0.2
      with:
          infile: coverage.out
          outfile: coverage.lcov

    - name: Coveralls
      uses: coverallsapp/github-action@v1.1.2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: coverage.lcov

  downstream:
    name: Test downstream repos
    runs-on: ubuntu-latest
    container: golang:1.14-stretch
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Run downstream tests
        env:
          DOWNSTREAM_TEST: ${{ secrets.DOWNSTREAM_TEST }}
          ORG_GITHUB_TOKEN: ${{ secrets.ORG_GITHUB_TOKEN }}
        run: eval "${DOWNSTREAM_TEST:-echo 'no downstream repos to test'}"
