// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib-safe.arraiz (3.451kB)
// syntax/stdlib.arraiz (1.385kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibSafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x3c\xd4\x7b\xbf\xff\x09\x63\xad\xc8\x92\x2c\x15\x27\xfb\x32\xa2\xc4\xc8\x9a\x46\x67\xc6\x7e\x18\xbb\xb2\x8c\x31\x0c\x23\x63\xaf\x41\x18\x43\x59\x1f\x3b\x0d\x93\x10\x8e\x53\x79\x88\x13\xd3\xc8\xbe\x0c\x43\x34\x89\x94\x7d\xa7\xe1\xd8\xb2\xdf\xd7\xf3\x9c\xdb\xeb\x56\xf7\x75\x9f\x7b\xef\xb9\xf7\xfb\xcf\xf7\xf5\xfd\xe3\xb3\xbf\x3f\xef\xef\xdb\x02\xce\xca\x26\x08\x70\x02\x9c\xc0\x8f\x87\x17\x00\x00\x77\xac\x9f\x27\x1a\xa5\xe2\x1a\x10\xe0\x8a\x1e\xe8\x34\xed\xe9\x79\x00\xee\xee\x03\x57\x59\x59\xc0\xfa\x94\xba\xe4\x4c\x07\xe0\xf4\x3e\x86\xb9\x92\xc2\x80\x69\x0f\x9b\x65\x42\x2e\x0c\xc2\x7d\xcb\x06\x9d\xab\x55\x8e\xe0\x86\xed\xbe\xdc\x91\x2f\xd1\x2a\xdf\xd5\xb4\x5e\x3a\x6d\x3b\x9b\x79\x01\x31\x7f\x3a\xbb\x78\xda\x43\xc6\x40\xfe\xe3\x64\x6b\x8d\xb5\x4e\x3c\x3a\x2f\x0a\x00\x80\xa3\x23\x0b\x38\x07\x27\x7e\x30\x9d\x68\x0b\x00\x40\x20\x00\x00\xff\x75\x42\xd2\x00\x00\xf8\x62\x3d\x82\x30\x48\x30\x0a\x1d\xe8\x15\xe4\xa6\xe2\x8e\xf5\x05\xbb\x06\x04\x28\xbb\xa2\xc1\xff\x4c\x11\x8c\xc2\xaa\xf8\x62\x3d\xee\x66\xf4\xd6\x3f\xd6\xe0\x8d\x1b\xea\xb5\x79\x8e\x39\xfd\xc5\xb8\x7d\x5f\x69\xc4\xb9\xd0\xe5\xb5\xd3\x3d\x0c\x9b\xab\xa1\x6a\xa6\xe9\xec\x05\xdb\x31\xa2\xaa\xba\xac\x7f\x29\x6a\x86\xa0\x8b\x0f\x57\xee\xa2\xc6\x05\x9f\x91\x5f\x22\x06\xba\x3c\x5c\x9d\x50\x48\xd3\xea\x70\xd5\xf1\xd7\x24\xed\xa6\xa2\x1f\xf5\x2e\xb4\x5e\x4a\x99\x0f\xe9\xd6\x0c\x19\xb9\xb1\x1c\x7f\x2d\x78\xb0\x99\x33\xff\x60\x67\x88\xee\x1d\x3e\x7d\xe2\x09\xad\x01\x64\x54\xe5\x70\xd0\xc0\x6b\x32\xcc\x7c\x32\xe6\xd2\x5a\x6a\x1d\x69\xbe\xc0\xb3\x13\xa9\xa9\x84\x3b\x9c\x09\x38\x97\x26\xfd\x2a\x4c\x94\xc8\xd1\x25\xe6\x71\x85\x0f\x5a\xe6\x7c\x2a\x79\x7a\x50\xcb\xe9\x22\xac\x34\xb7\x3a\xff\x14\xac\x4c\x5c\x50\x0e\xf9\xba\xa2\x08\x28\xfb\xc3\x70\x88\x00\x62\x64\xda\x4c\xa8\xcb\x57\xbb\x7a\x73\xc8\x14\x6e\x21\xf4\x6e\xcd\xc1\x1b\x77\x80\x65\x76\x47\x77\xc8\x89\x93\x79\x08\x82\x5f\xf2\xa5\xfc\xc9\xc4\x35\x4a\xfb\xd2\x4d\x22\xea\x84\x3c\x25\x7d\xd1\x41\x08\xa8\x50\x50\xf0\xc1\xcd\x43\x8c\x95\xb5\xa4\xf6\x68\xa3\x58\xbf\xc5\x77\xd6\xac\x1c\xd8\xc8\x88\xd1\x04\x69\x81\xda\x29\xd5\x37\x74\xaa\x35\x54\x4c\xce\x76\xaf\xf4\x98\xb1\x45\xcd\x75\xd3\x86\x0d\xdd\xe9\x56\x71\xcd\xee\x15\x3b\x54\x09\x41\xd7\x2b\x54\xc4\x38\x63\xac\xb3\x6d\x1c\x9c\x81\xb0\x94\xdc\x32\x15\xf5\xff\xc3\xb5\x58\xd1\x4c\x4d\x66\x4b\xa4\x50\xce\x21\x87\xb4\x78\x5f\xde\xd4\xe7\x8d\xa4\x1b\x6c\x3b\x09\xc1\x24\xcd\xc2\x8f\x04\xa0\x09\xb3\x40\xcb\xcd\x2e\x3d\x7f\x71\x95\x00\x6e\xf4\xfc\xe7\x7c\x4f\xe6\x6b\x78\xa2\xb8\x5b\x86\x9f\x51\xe4\x42\xa8\xd7\xda\x21\x3e\xa5\xc6\xe2\xa8\x81\x33\x6d\x60\x27\x6e\x94\x28\x94\x2a\xbf\x86\x6f\x68\xa6\x4e\xdc\x1e\x47\x26\x5f\xea\xba\xb8\x41\xb9\x2a\x86\x38\x27\xa2\x47\x4d\xc1\x6b\x5e\x94\x8e\xf4\x3c\x33\x3a\x54\x37\x67\xa1\x17\xb3\x2b\x69\x26\x58\xb7\xe7\x6d\x29\x91\x2a\xfc\x79\x15\x3a\x90\xd2\xb2\xed\xe8\x07\x3f\x05\x7d\x18\xce\xff\x7b\x36\x76\x60\x1d\x1f\xe1\xac\x6b\x51\x01\x62\x77\xb0\xed\x9e\x7d\x67\x1b\x15\xe4\x9b\x07\x9b\x62\x99\x66\xb8\x3b\xc8\x1e\x0d\xea\x2b\xf2\x20\x32\x41\x98\xdc\xc7\xeb\x84\xcb\x64\xb1\x80\x2d\x81\x98\x28\x38\xa4\xe5\x44\x91\x25\x30\x22\x68\x31\x57\xcb\xfe\xa1\xa8\xbd\x5e\xb9\x47\xf6\xec\xda\xd9\x10\xbe\x92\x8a\xcc\xcb\xed\xfa\xc9\x5e\x8a\x44\x7a\xd0\xc8\xa5\x42\x91\x0b\xe1\x70\xc7\x41\xda\xe5\x53\xbb\x69\xad\x0f\xc8\x4f\x16\x56\xcd\xea\xa4\xc8\x95\x36\x36\x9f\xbb\x85\x21\x4b\x10\x06\x62\xa5\xaa\x93\x43\xb1\xe0\x00\x77\xf8\x21\x72\x55\xf2\xb0\x72\x2a\xeb\xf3\x8e\x5e\x56\xbe\x27\x75\xc3\x2d\x67\x5a\xe2\xd9\xe3\xd0\x83\x9d\x2d\x96\xf4\x8f\x3d\xda\x24\x44\xa6\x1f\x99\xa5\xf3\x41\x69\x0d\xa1\x6d\xa0\xac\x7b\x65\xfe\x50\xf3\xe0\xf4\x57\x58\x0f\x18\xa6\xf8\xc5\x1e\x03\x80\x55\xf6\x7f\x05\xeb\x2b\xff\x3d\xac\x71\x61\x7e\x81\xae\xa1\x60\x5c\xa0\x07\x06\xed\x06\xf6\xc4\xb8\xfe\xfb\x4a\x56\xda\xf5\xe2\x8a\x6e\x08\x36\xf6\xdd\x5c\x2b\x8d\xe3\xee\xbd\x4f\xba\x83\x7a\x6b\xed\x1b\x9c\x9c\x4e\x7b\xe7\xe2\x86\x70\x40\x67\x2a\xb0\xfd\xca\xa2\x2e\x1f\x77\x84\x5f\xda\xe4\x20\x47\xe5\xfc\x46\x89\x91\xa2\x44\xdc\x6c\xdc\x26\xd0\x94\x4e\x4e\x79\x1d\xb0\x03\xe7\x85\xb5\xf8\x64\x08\x27\x4d\x6e\xe4\xc2\xf6\x75\xd7\xde\x73\xc0\xca\x39\xd4\xfb\x2b\x4f\x5e\xc6\x76\x56\xbf\xea\xbc\x05\xb2\xea\x37\x0d\xd7\x84\x56\x9d\x6f\x6a\x1c\x5c\x90\x5a\x15\x2d\x75\x82\x12\x65\x69\x65\xe6\xfd\x95\x76\x02\x43\x97\x4d\xc6\xf4\xef\x93\xbe\xb0\x3b\xe6\x9e\x8d\x82\x77\xfd\xb4\x5b\x6b\x56\xfb\x22\x4a\x6e\xcf\x5e\xfc\x9d\xa1\xcb\xa2\xbd\xd9\x69\x8f\xa6\xac\x09\x36\xbd\x05\xb5\xfd\x16\xc7\xfd\x76\x66\x82\xb1\xf0\xf2\x0c\x78\x6d\x57\x8d\x44\x51\x59\xdd\x6e\xe6\xba\x1a\x3e\xbe\xe3\x39\xa6\xb6\x74\x50\xa6\xa4\xf0\x51\x29\xdb\xf2\xef\x38\xbc\xff\x10\x5a\x74\x2a\xa4\x68\xe3\x65\xe6\xac\xcc\xa2\x00\x1a\x3c\xf9\x53\xcc\x8c\x8c\x69\xed\x9b\xa7\x54\x1f\xae\x92\x45\x63\xd5\xea\xd3\xe5\xbc\x04\xa7\x46\x56\x7c\xec\x8e\x78\xd6\x74\x5a\x93\xc6\x6c\x43\xe1\xfe\xf9\xbb\xa1\x57\xd7\x7e\xe7\xdb\xa5\x17\xde\x1f\x5b\xe2\xbc\x3e\x52\xfc\xf3\x7b\xb7\xe8\xbf\x67\xf3\x24\xa8\x06\xd2\x88\xec\x8a\x6a\x54\x81\x9e\xa0\xb5\xbc\x0e\xfe\xbe\x9e\x20\xb9\x5a\x4a\x3c\x6e\x93\xc7\x12\xa9\x6f\xe7\x9e\xa6\x3b\x1b\xa3\x3b\x19\xc3\x8f\x32\x0f\x3b\x24\x7b\x7a\x50\x52\x4b\xfa\xbc\x67\xa2\x76\x6b\x4c\x17\x07\xf2\x58\x9e\x6a\x9f\xaf\x59\x1c\xc5\xcf\x8f\xde\x8e\xfe\xf4\xb8\xaf\xe3\x2a\x2c\x3d\xf1\xb8\xe8\x52\x06\xa8\x60\xe7\xee\x8d\xb8\x92\x85\xb7\xf2\xe5\x41\x15\x01\xb0\x8a\xfd\x7b\x0d\xda\xfe\xc7\xce\x95\x6e\x41\x85\xc6\xd5\x37\x44\xa8\x74\x13\x29\xc9\x74\x1e\x15\x13\x19\x72\x81\x35\x5d\xd5\x3f\xab\x8c\xcb\x64\xa9\x52\x20\x15\xe2\x60\x86\x3e\xa3\xc0\xac\xff\xf8\x71\x75\x33\xed\x17\x2b\xf6\xee\xa0\xcf\x51\x55\xc8\xb7\x48\x2e\xd1\xf1\x64\x27\x4f\xc3\xad\x6c\x50\x56\x1b\xcc\xd6\xc8\x8b\x56\xa4\x24\x5f\x92\x69\x46\x10\x62\x65\x60\xe2\x05\x72\x9e\x10\xa5\x68\xae\xca\x51\xd7\x44\x7c\xf9\x60\x2a\x63\xf8\x1b\x03\x14\xd0\x53\x6e\xca\xe2\xa3\xc7\xc8\xfc\xd7\xbc\x59\xb2\x67\x5b\x02\xc0\xa1\xef\x1d\xc9\x2f\xa4\x3b\x59\xa4\x85\xa7\x2b\xca\x5b\x33\xb7\x73\x35\xec\x49\x10\x24\x7d\x63\xab\x5d\x2c\xe9\x67\x3a\x84\xb5\x8a\x10\x5f\xb2\x78\x5c\xb6\xc6\xbb\xbd\xed\x62\xdc\x99\x87\xa1\x95\xbf\xfc\xad\xcc\x1c\xdb\x54\x7b\x95\x6e\x34\xa4\x06\xef\xae\x58\xca\x4d\x28\xca\x8f\xf7\x0a\x71\x7a\xf2\x36\x97\xe9\x7d\x64\x04\x22\x4a\xd1\x1f\xbb\x2b\x59\x3f\x6b\xce\x0b\x81\x5d\x4d\x10\xff\x39\xbe\xb1\xff\x65\xf7\xf1\xa7\x35\xfc\xc5\x42\x31\x03\x81\xc7\x83\x6e\xe5\x34\xe8\xf9\xee\xed\x58\x7a\xa7\x94\xb1\x74\xe6\xf9\xed\x45\xde\x53\x0f\x72\xd8\x36\x48\x3a\x5f\x26\xf2\xbc\xde\xf2\x0a\xe6\x4e\x81\xce\xb0\x5a\x1f\x52\x92\xc2\xd2\xb8\x17\x48\x42\x7b\xcd\x1b\xda\x3a\xc6\x74\x27\x7c\xb0\x21\x03\x29\x49\x25\xdc\x96\x07\xcc\x06\xcf\xbe\x7a\xfa\x27\x0c\xe0\x45\xc1\x34\xcb\x57\xd5\x02\x83\x46\xfa\xf5\xec\x4f\xde\xb2\x52\xce\x3e\xcf\xfc\x0d\xca\xf0\x26\x06\x60\xf4\x5d\xe1\x67\xa4\xb0\x1f\xac\x33\x1e\x86\x8a\x13\xde\x87\xf0\x1f\xb8\x94\x33\x5a\xb2\xe9\x3a\x6e\x03\x75\x4f\xaf\xe7\xf4\x34\x59\x07\x28\x56\x5f\xba\xa6\xcd\x90\x59\xdf\x5a\x5f\xf7\x25\x7f\x60\x2e\x22\xa7\x0e\xa9\xc5\xdb\xd7\xcf\xb6\x09\x65\x4a\x29\x69\x44\x07\x9a\x8c\xc8\x44\xf8\x22\xec\x9d\x73\x2c\x11\x05\x63\xc3\x76\x74\xe7\x4d\x95\xd1\x7d\x50\xa4\x9e\x9e\x8e\xfa\x8b\x53\x4d\x06\x1e\x9a\xd7\x21\xa0\x8a\xaa\x28\x9d\x5c\x9a\xb3\x86\x15\xaa\xd3\x73\x0e\x03\x86\xfe\xd4\x85\xd2\x80\xbf\x98\xe1\x57\x9c\x87\xd1\x62\xdf\x85\x87\xf3\x49\xf6\x38\x3c\xf0\xc6\x45\xfc\xee\x3b\xb2\x9e\x33\xb9\x49\x45\x41\x9e\xa5\x2d\x28\xe7\xbc\xac\x57\x29\x45\xa0\x68\x66\xe0\x5f\xa0\x1e\x3c\xf2\xd1\x29\xaf\x08\x23\x32\x39\x4b\x5b\xd8\x07\xaa\xef\x8f\x19\xa0\xc2\xe1\x12\x74\xc8\x6f\xcb\xd7\xee\xd8\x81\x33\xac\x30\x97\xc6\xf5\x9e\x47\xf3\xce\x7b\x8b\x9f\x6c\x29\xb7\x8b\xbb\x88\x37\x80\xdb\xb8\xd3\xc2\x04\x1b\x93\x63\x86\x87\xf5\xd6\x7e\x2b\xe1\x22\xff\xb1\x0f\x32\x19\x2b\xba\x9b\xe2\xb2\x1f\xf3\xb1\x6f\x59\x90\xf0\xda\xbb\x8d\x5b\xda\x93\x32\x3c\x69\x83\x74\xd4\x30\xb0\xe9\x61\xc4\x8b\xce\x50\xbd\x31\x53\xf0\x47\x2e\xb2\xf6\x02\xce\xd1\x13\xab\x7d\xbd\x17\xbc\xbd\x12\x13\x11\xd2\xbd\x14\xa6\x53\x4a\xa9\xb4\xaf\x6c\xca\xa4\xd8\x72\xcd\x46\x91\x14\xd9\x3f\x5d\x8a\x66\xec\xdf\x50\xdc\x0e\xbf\x7a\x77\xa1\xe4\xd4\xca\x71\xd4\xa1\x74\x52\x47\x8b\x95\x0f\x68\x9e\xb3\xbc\xf5\x9e\xaa\x50\x6e\x9e\xd2\x9d\x88\xe6\xcd\x3e\x13\xa3\xa1\x72\xfe\x73\x63\x5e\x4a\xce\x67\x42\xb2\x96\x1b\x64\xf7\xfc\xa7\xb5\x2d\xcf\x2d\xe5\x64\x7b\x8c\x55\x9b\x26\x7e\xd8\x09\xae\xe6\x2d\xd6\x7d\xcf\x26\x4c\x2b\x4f\x1a\x0f\x95\x53\xc2\x47\xbd\x20\x3c\x52\x19\xbe\xe1\xde\x61\x40\xb4\x99\x28\x5d\x5a\x57\x37\x88\xc1\x31\x1c\x86\xe6\x4a\xfb\x8e\x23\x2a\xeb\x25\x9a\x83\x95\x96\xab\x3d\x25\x9a\x92\xb5\x73\xe7\xdf\xed\x42\x40\x2d\xab\x77\x26\x18\x5c\xea\x6f\xd7\xb1\x61\x4f\x9e\x6d\x83\xc4\xbb\x92\xf4\xbc\xea\xb0\x12\x61\x61\x9b\x2b\xda\x50\xfb\x30\x1d\x52\xad\x9e\x6b\x6e\xd6\xaf\x6e\xfd\xd8\x46\x7e\xef\x2f\x81\xb8\x23\x9d\xf9\x85\x2b\xe3\xae\x9c\x3b\x9f\x28\xab\x65\x19\x75\x47\x98\xc0\x21\x09\xf8\x3c\xf9\x8b\x10\x32\x2c\x63\x39\xa2\x0c\x57\x8d\x23\x54\x6b\xf5\x77\x4c\x2c\x18\xd4\xdf\x61\xa1\xac\x10\x04\xf5\x37\xeb\xcd\xf2\x75\xc4\x3e\x7f\x8e\xd2\x6d\x1e\x62\x2e\x3b\x95\x70\xac\x87\x1d\xdc\xbc\x66\x3c\x38\xf3\x29\x6c\x2b\x7d\x5e\xce\xfb\x2c\x93\x16\xc9\xf2\x95\x84\x5b\xa2\x48\x0a\xe7\xd9\x01\x40\x4f\xf0\x5f\x91\xb0\xee\xff\x96\x84\xff\xbc\x94\x71\xae\x9e\xc8\x3f\xb9\x38\x36\xd5\xbc\x2f\x5f\x95\xb7\x9d\x79\xf7\xbe\x71\x38\x98\x8c\x58\x20\xa1\x19\x4f\x1b\x98\x9d\x6d\x7c\xac\x6f\x06\xd8\xa4\x4b\x23\x6b\xfc\x0a\xf1\xdc\x81\x82\x0e\xe8\x67\x27\xd3\xa6\xe6\x76\xda\x82\x75\x57\x1f\x5f\xe1\xaf\xe2\xf2\xe4\xe3\x6d\x2a\x4c\x9a\xe5\x6c\x26\xf8\x79\xe1\xf5\x37\x64\xa1\xda\xf5\xd0\xc4\x10\xfe\x76\x83\x70\xa8\x60\x40\x5e\x74\xdc\xe5\x20\xb2\x7f\x4c\xe8\xdb\x44\xb8\xaa\xd4\xf2\xdf\x1e\x18\x5a\x78\x08\x52\x79\x62\x23\x02\x46\x6f\x0d\x77\x1c\x7b\x9a\x4a\x77\x0c\x90\x90\x7b\x91\x7d\xfb\x39\x6f\x80\xe8\x3d\x24\xaf\x4a\xf4\xc3\xec\x82\x96\x6b\x2f\x45\x16\x0c\x1c\xf2\x2f\x09\x0f\x33\x62\x99\xea\x1e\x36\x82\xbe\xa6\x24\x96\x28\xa4\xc1\x61\xaf\xe6\xc4\x78\x67\xd6\x97\xec\x95\x47\x19\x0a\xab\x42\xd5\xdb\x34\x8f\x02\xdc\xe6\x1c\x15\x08\x59\x4e\xee\x94\xbd\x78\xdd\xa7\x5c\xf1\xb6\xe6\xbe\x15\x31\xe3\x90\x8e\x2a\x7a\x0f\x3e\x11\x9c\x34\xd4\x1e\xd4\xe0\xfe\x72\xd2\xca\xc9\x7c\xeb\x45\x86\x21\x6e\xea\x32\xf1\x94\xcd\x94\xb3\x0f\x64\x1a\x57\x62\x64\x33\x16\x9b\x7d\x8f\xb1\xe9\xc1\x50\x9a\xa9\xc6\xa5\x78\xc8\x21\x7a\xeb\xb0\x87\x4c\x02\x25\xb4\x9f\xb9\x5a\x63\x10\x9d\x24\x06\x1d\x1e\xa8\xce\x32\x87\x55\x49\x16\xd6\x6d\xa2\x1e\x76\x51\x23\x8d\x2a\x92\x2f\x44\xbc\xc2\x55\x64\x96\x7d\x81\xc4\xa2\x3a\xac\x1f\x26\x23\x27\x8a\x1b\x55\xf6\xb9\xf2\x34\x48\xcf\xe7\xa2\x86\x03\xf7\x8f\x7f\x1d\x5b\xdd\xb6\xa1\x25\x9c\x05\x00\x78\x58\xff\x5f\xff\xce\xa0\x40\x34\xe6\xcf\x79\x61\x92\x9b\xee\xc7\xaa\xf2\x19\x31\x0f\x84\xd8\xef\x58\xa6\x2e\x3b\x0f\x83\xed\x75\x6a\x48\x6c\xc7\xde\xe8\xcb\xda\xc7\x22\x0f\xf1\xf1\x6a\xea\xbc\x26\xce\xf5\x61\x9b\x27\x36\x09\xca\x07\x5a\x3c\xcf\xd0\x31\xc5\xaf\xbc\xec\x1a\x7d\xb8\xde\x3c\x57\xe0\xc8\x88\xcd\x93\xb8\x6b\x35\xed\xe6\x6e\xd7\x2b\xfb\xab\x67\xf6\x39\x9d\xeb\xb6\x64\x3a\xe2\xf6\x97\xa6\x65\x2e\x40\x45\xa6\x3f\xce\x8e\x4d\xfd\xd7\x02\xd3\x07\xc5\x1f\xa3\x6d\xd6\x8e\x8c\x94\x1b\x69\x9c\xc2\x67\x3e\x4d\x5c\x7c\x2d\xf2\x8b\x66\x2b\x32\x36\x98\xea\xc3\x9d\x1c\xa1\xef\x7e\x40\xa3\x92\xc6\x8c\xe6\x2c\xf3\xe2\xeb\xd7\x46\x18\x83\x3a\x5f\xab\x27\xca\x40\x0a\x72\x01\x00\xd8\xfe\xa7\x20\x66\x39\x26\x08\xfc\x47\xfd\xdf\x8a\x65\xde\xff\xd4\x91\x6f\x15\xfb\x8f\x96\xdf\xea\x11\xe9\xef\xac\xd2\xfe\xa7\xd2\xfa\x47\x97\xdf\x6e\xd7\x95\xef\x5c\x7a\xb1\xfe\x65\x59\xf3\x63\x90\x6f\xb1\xa0\xfb\x5d\x90\x15\xce\xff\xeb\xda\xfe\x18\xeb\xdb\xce\x7f\x5f\x50\x31\xf7\x5f\xc6\x9a\x05\x9c\x1d\xf4\x0f\x17\xec\x00\x3b\xd0\xc2\x02\x00\x45\x3c\xff\x78\xfd\x5b\x00\x00\x00\xff\xff\x71\xd5\x37\x29\x7b\x0d\x00\x00")

func syntaxStdlibSafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibSafeArraiz,
		"syntax/stdlib-safe.arraiz",
	)
}

func syntaxStdlibSafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibSafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-safe.arraiz", size: 3451, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xf4, 0x1b, 0x37, 0x7e, 0x5, 0x1b, 0x0, 0xd4, 0x63, 0xc5, 0x87, 0xaa, 0xb0, 0xf0, 0x1a, 0x63, 0x9a, 0x5a, 0xac, 0x6f, 0x6d, 0x2, 0x48, 0xba, 0xf9, 0xaf, 0x25, 0x29, 0x12, 0x1e, 0x7}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\xe0\x60\xe0\x60\x40\x07\x3c\x0c\x0c\x0c\xc9\xf9\x79\x69\x99\xe9\x7a\x89\x45\x45\x89\x99\x97\x4e\xf8\x9e\x39\xd3\xad\x7f\xea\xbc\xfe\xc6\xa0\x00\xaf\xf3\x3a\x27\x35\x7c\x2f\x79\x9f\x3b\x7f\xd5\x5f\x47\xeb\x92\xef\x19\x96\xc0\xce\x99\x5e\x56\x5c\x09\xa1\x99\x33\x2d\x57\x86\x71\x79\xfd\xda\xf9\x53\x73\xa9\xe5\xca\x5f\x16\x21\xaf\xc5\xc3\x9f\x4d\x55\x09\x7b\x21\x3e\x7d\xc9\x93\x14\x35\x47\x4d\xdb\x0e\xc7\x59\x0d\x0c\x0c\x0c\xff\xff\x07\x78\xb3\x73\x68\x86\x79\xbc\x08\x62\x60\x60\xc8\x67\x60\x60\xc0\xed\x16\x55\x06\x06\x86\xdc\xfc\x94\xd2\x9c\x54\xfd\xf4\xcc\x92\x8c\xd2\x24\xbd\xe4\xfc\x5c\xfd\xc4\xa2\x22\xdd\xc4\x4c\x7d\xb0\xeb\xf4\xd3\xf3\xf5\x72\xf3\x53\x6a\xa6\x9c\xdd\xb5\xd8\x8c\xa7\xed\xfa\xd9\xd0\x0d\x39\xe2\x3f\xdc\x8f\xfd\xd1\xb9\x15\x3b\x3f\xee\x40\x4c\x63\x0e\x4b\xa2\x93\xc1\x54\xdf\x67\x2a\xe1\xf7\xdb\x0d\x8c\xd5\x0b\x96\xa5\x3f\x6d\xb5\xab\xad\xd2\x3d\xb9\xaf\xad\x4c\x52\xf3\x75\x7b\x49\xdc\x9c\x0f\x0f\xb5\x26\x5a\x1e\x4f\xb4\x2d\xb0\x98\xfb\x6b\x42\xe6\xc2\xb3\x2f\x8f\x98\xf4\xbf\x28\x3f\x65\x51\x7e\xcb\xe3\x4d\x87\x73\xd9\xe5\x43\x1c\xb3\xff\xfe\xbc\x7e\x2e\xab\xea\x09\xdf\xf2\xd3\xbb\xd9\x5c\x36\x46\xfd\xdd\xcd\xe3\x73\xf3\xfd\xf2\xfb\x71\x47\x96\x85\xd4\xfb\xbf\xe4\xfe\x59\x6f\xa1\x53\xfc\xef\x69\x91\xfc\x44\xd5\xbd\x95\x52\xed\xec\x27\xa5\x53\xcc\x05\xdc\x56\xc4\x0a\xf5\x3d\xb9\x6c\x19\x63\xe8\xb5\x6c\xe6\xe6\xd9\x42\x5e\x2b\x64\x44\x34\x52\x0f\xac\x5a\xc4\xb0\xe2\x93\xd3\xf5\x56\xb6\xab\x53\x43\x1f\x1a\x6b\x6e\x4e\xcc\x62\x57\x9b\xff\x2d\xcc\x3e\xe1\xb9\xf7\xfe\x9f\x0c\x6f\x58\xa3\x93\xad\xf8\xf8\x67\x85\xb5\xe6\xf5\x99\xcc\x7e\xd4\xf3\x71\xcf\xb1\xd7\xf1\xed\xe9\x7c\x9a\x7b\x26\xbf\x8a\x12\x65\x58\xa5\xa5\x95\x5d\xfc\xc2\xca\x5d\xd7\x52\xe9\xf7\xe9\x3b\xf9\x79\xaf\xae\x85\x30\xb3\xe7\xd7\xd7\xdd\xe9\x54\x15\xde\xf6\xd8\xe0\xe2\xb9\x7d\x21\x6e\xd2\x1a\xe1\xbf\x97\x31\xb9\x07\x6c\x71\xf5\xdd\xfd\xc5\xee\xc9\x11\x19\x8b\x53\x6f\x23\xd2\x97\xb6\xda\x65\x54\x48\xb8\x4f\xb9\x7f\xe2\xe8\x03\xfd\x29\x61\x81\x8a\xdf\x7c\xa5\x0a\x3e\x25\x2e\xd1\xf6\x33\x52\xfb\x26\x31\x5f\x23\x6a\xc6\xdc\x57\x5d\x9a\xbe\xd9\x17\x15\x93\xbc\xbe\xf7\x86\xbd\x9f\xfb\xcc\xfb\xbf\xb0\x5b\xe7\x33\x86\xc3\xf1\x27\xed\x0b\x64\xf4\x8a\xb8\x32\x5f\xbc\x9b\x9d\xf6\xfe\x80\x77\x8f\x4c\xd2\x94\x3c\x97\xfa\x97\x15\x19\x1f\xff\xd5\xf6\x6f\x09\xf8\xbf\x9b\x63\xe2\xa5\x9f\x6d\x77\xda\x45\x27\x68\x7e\xac\xdd\x7d\x68\xdf\xc3\xc2\x07\xa9\x7d\x26\x27\x0d\xbf\xec\xb1\x91\x0e\x93\x97\xb0\xdf\xd7\x5f\x6b\x61\xa8\x5a\x9f\x26\x79\xe7\xfa\xf6\xe7\x01\xf6\xcd\xbf\x14\xfd\x44\xb6\xff\xce\x0a\x94\x9d\x20\xf6\xee\x83\xdb\xa5\xfe\xc3\xdf\xa3\xf3\xbc\x85\xdc\xe6\x54\x09\xee\x98\x9e\x7f\xe9\x73\x6d\x5d\xac\x5d\xc0\x2a\x36\xd6\xa8\xf0\x53\xcf\xae\x85\x37\x94\xe6\xce\xf2\x7a\xcc\xf8\xe4\x6a\x72\x94\xfa\xff\xcb\x0e\xda\xdc\x61\x53\xd9\x72\x66\x2e\xfe\xdc\x6a\xba\x40\xba\xe8\x9b\x70\x73\x83\xb7\xd5\x61\xbe\x45\x81\x0c\xb7\x44\x02\x9e\x6f\x63\xbd\xbd\xe8\xd8\x2e\xdd\x33\xea\x72\x1f\xe5\xca\x05\x96\xae\x9a\x6a\x7a\xcc\xa1\x2f\x43\xbb\xfd\x5c\xe9\x2d\x93\xf9\x12\x2a\x55\xde\xd1\x97\x4f\x9b\x0a\xfd\x9a\x78\xa4\x7b\xc1\xf2\x97\x1f\xfc\xb6\x2b\x2d\x58\x13\x1a\xfa\xee\x94\x98\xd5\x6b\xab\xab\x61\x6f\x37\x9e\x60\xd7\x9e\xf7\xb7\xf8\xdf\xed\xfa\x0f\x8a\xff\xd6\x3c\x9e\xf6\xee\xa7\xfd\xb4\xd9\x69\xfb\xbe\x24\xcd\x78\x22\xbb\x7e\x71\xc5\xdf\x9f\xdf\x18\x27\xdf\x3d\x63\x3d\x37\x6c\x6a\xde\x02\xc6\x13\xdd\xcb\xb6\xb4\x1e\xbd\xb4\xe2\xd4\xdb\x17\xff\x2c\xfe\x8a\xc3\x92\xf5\x25\xa7\xfe\xbc\x16\x26\x06\x86\x0f\xac\xf8\x92\xb5\x25\xe1\x64\x5d\x5c\x99\x57\x92\x58\xa1\x5f\x5c\x92\x92\x93\x99\x04\xa5\x20\xf9\x31\xa5\xcf\xb1\xab\x25\x80\xc7\xe5\xfb\xbc\x45\x07\xf6\x7e\x9f\xf1\x57\x27\x5d\xf8\xef\x45\xf9\x67\xe5\x4a\x9e\x39\x1f\xbf\xf5\x2a\xf4\xfa\xbe\xe7\x5a\x25\xf7\xb5\xea\x4f\x18\xe7\x91\x27\x9b\xd4\xc2\xb6\x2f\x17\xe1\x13\x28\xb3\x32\x98\xad\xfc\xe6\xe0\x0c\xf3\xb9\x41\x3e\xcc\x8b\x4e\x9c\xea\x50\xd1\x7d\xc2\xea\xeb\xa6\x6e\x3f\xa1\x6d\xe2\xc6\xdd\x29\x9b\xe6\x69\x17\xc9\x7b\xb0\xfd\x51\x99\xf4\xcf\xd2\x6e\xc3\xba\xfa\x66\xf3\x94\x8d\x6e\xbb\x1a\xce\xfd\xbe\x73\xed\x98\x82\x6e\xc1\xb9\xb3\xa6\x0e\x59\x91\x37\xd7\xa7\x4d\x5f\xb3\x20\xe8\xc9\x95\x45\x65\xc6\x7f\xca\x5e\xfc\x53\xf2\x9e\xbc\x91\xb9\x41\x7b\x1f\x13\xcc\xef\x93\xe7\xae\xd8\x38\x95\x81\x81\xe1\x07\x38\x4b\x33\x32\x89\x30\x20\x7c\x8f\x9c\xdd\x79\x30\xc2\x03\xb9\xb8\x41\xd7\x89\x1c\xa2\xaa\x28\xba\x7a\x88\x2d\x1c\xd0\x8d\x44\x76\xa8\x25\xaa\x43\x98\x29\x88\x98\x00\x6f\x56\x36\x90\x21\xcc\x0c\xcc\x0c\x5f\x18\x18\x18\xe2\x59\x40\x3c\x40\x00\x00\x00\xff\xff\xe8\xdc\xb3\x07\x69\x05\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 1385, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x75, 0x6e, 0x32, 0xba, 0x2c, 0x60, 0x89, 0x4d, 0xab, 0x85, 0xa5, 0x8e, 0xdf, 0x95, 0xa7, 0xc4, 0xb6, 0x89, 0x45, 0xdd, 0xf8, 0xce, 0x80, 0xe5, 0x77, 0xe4, 0xc3, 0x66, 0xc6, 0xf8, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib-safe.arraiz":    syntaxStdlibSafeArraiz,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib-safe.arraiz":    {syntaxStdlibSafeArraiz, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
