// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.359kB)


package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x67\x54\xd3\x59\x1e\xfd\xd3\x3b\xca\x50\x54\x90\x3e\xf4\x12\x8a\x52\xa5\x29\xcd\x84\xde\x3b\xd2\x09\x06\x41\x20\x42\xe8\x02\x21\x48\x55\xa9\xc1\x01\x91\x1e\x04\x15\x29\x6a\x88\x60\x40\x44\x49\x48\x90\x22\xc5\xc1\x00\xd2\x8b\x80\x10\xa5\xca\x9e\x99\xd9\x99\x55\xf7\xec\xec\xee\xec\xbe\x2f\xef\xbc\x0f\xbf\x7e\x7f\xf7\x5d\x2b\x08\x1d\x3d\x0f\xc0\x0c\x30\x03\xdf\x1f\x76\x00\x00\x7c\x42\x2e\xf9\x43\x03\x14\xbd\xc2\xc2\xbc\xa0\x03\x2f\xcd\x89\xc4\x0c\x50\x2f\x19\xd4\x68\x63\x05\x26\xcb\xbf\x92\x36\x1f\x80\x90\xc8\xc3\x96\xf2\xb2\x03\xe6\x44\x7a\xeb\x6b\x68\xb0\x16\xeb\x05\x7b\x28\x5a\x13\xe3\xc0\x0a\xde\x7d\xb2\x23\x53\xa5\x89\xd9\xd5\xb0\x5b\x3e\xe6\x38\x97\xff\xa3\xc3\xc2\xb1\xc2\xca\x19\x5f\x49\x03\x19\x9d\x34\x83\xe2\x44\x00\x00\x0e\x0f\xad\x20\x4c\xcc\x32\x0e\xa6\x0b\x36\x00\x00\x84\x00\x00\xf0\xaf\x73\x91\x00\x00\x20\x38\xc4\x17\x0e\xf3\x03\x05\x40\x23\x02\xe1\xde\x8a\x3e\x21\xc1\x20\xaf\xb0\x30\x05\x2f\x28\xe8\xd7\xec\x40\x01\x21\x8a\xc1\x21\xbe\x29\x79\x84\xe8\x66\x35\xf6\xd4\x91\x92\xbb\x17\xc6\x14\xd7\xd1\x5d\xf2\xe3\xee\xb7\x3d\x9e\x25\x30\x74\x32\x87\xa6\x36\x62\x94\x72\x95\x1c\x29\xa8\x3b\xe6\x2f\x2a\x5f\x75\x7c\x3c\x7b\xdb\x23\xae\xc0\xd7\xf3\x5c\x5b\x66\x11\x55\x91\x13\xd2\x05\x7b\x1c\x26\xd2\x8b\x0f\x66\x7a\x3c\x88\x39\x82\xf6\xb5\xb9\x6d\x91\x32\xc8\xac\x66\x4d\xb2\x95\x3a\x8d\xe2\x94\xf1\x55\x7f\x75\x4a\xee\x21\xe5\xd0\xd4\xea\x4b\xa9\xfa\x24\x48\x98\xbf\x9b\x98\xba\x1b\x73\x39\x65\xec\x7e\x8d\x67\xe9\x73\x2c\x4f\xc2\xee\x36\xdd\xaa\x27\x4f\x81\xcc\xe1\x65\x67\x13\x91\xec\x10\x3e\x93\x48\x93\x78\xdb\x31\x73\xe5\x3e\xc3\x9b\xf4\xe2\xe3\x1a\x29\x72\xc4\x9f\x42\xcb\x57\x24\x8b\x2e\x88\x39\x9e\x65\xb9\x63\x2f\x9a\x69\x5d\xd7\x9b\x55\x9f\x65\x57\x2e\x27\xe7\xa3\x4a\x52\x9d\x77\x35\x09\xf4\x49\xdf\x25\xaf\x44\x2c\x46\x66\xdb\x60\x2e\x84\x98\x99\x4c\x65\xc7\xdb\xbe\x9c\x5e\xf0\x77\x64\x57\x3a\xe2\xba\x9f\xb1\x6e\x28\x9a\x7a\xa4\xe6\x21\x9f\xb1\x8c\x35\xba\x4e\x3a\x6c\x18\xce\xd1\x3a\x2a\xc2\x77\x78\x6b\x6f\x7c\xfb\x12\xc4\x9e\x7a\x35\x18\xb5\x97\xfe\x9c\xe5\x8e\x60\x49\x0f\xbd\x27\xab\x42\x8b\xac\xfa\xfe\x13\x1b\x0e\xd9\xc1\x62\xfe\xdc\x2d\xdd\x19\x53\x9e\xc0\xb9\xbd\xc6\x3e\xb0\x0a\xa2\xff\xba\x80\xc9\xe4\xfd\x51\x22\xde\x43\xe9\x92\x58\xd7\x80\xa4\xe6\xba\x5a\x66\x14\x03\x79\xde\x94\x6f\x0e\x95\x2f\xbe\xc4\xaa\xbc\xdb\x50\x7b\x4b\xf4\x05\x3c\x52\xce\x76\x20\x62\x91\xd2\xc7\x7c\x45\xf7\xe8\x02\xc3\xaa\xa0\x71\xe4\x94\xae\xe1\x48\x43\x9b\xa4\x04\xf1\x38\x4a\xc0\x4a\xb8\x15\x9c\x72\xe3\xcd\x04\x64\xfc\xc9\xd8\x6b\x95\xbe\x85\x9d\xe3\xd1\x2e\x42\xea\xa0\x9c\x9b\x96\x19\xa5\xa9\xe2\x5e\xcd\x74\x1b\xfd\x38\x5c\xb0\xc4\x29\x6e\xcf\x7b\x63\x6d\x1a\xd3\x38\x01\xca\x52\x55\xa1\x6b\x6d\xb2\x40\x98\x36\x36\x61\xc4\x43\x87\x1d\xc9\x15\x4b\xa6\xa5\xee\x67\xb9\xba\xd4\xcc\x2b\xd8\x9c\x1d\x02\x4b\xcb\xc8\x59\xcf\x20\x1b\x78\x86\x5a\x74\x1d\x7f\xe0\x34\x2e\x3d\x11\x2f\x30\xc5\x3d\x29\x9f\x79\xe6\xd6\xf8\x10\x02\x53\xb6\xac\x7f\x71\xd0\x6e\x57\x40\x3f\x51\x82\x73\xe9\x99\x15\x38\xa8\x62\x09\x17\x68\xff\x3a\x29\x05\x7b\x9a\xa2\x3c\x07\xd7\x05\x58\x45\xcd\x9c\x8b\x70\x06\x63\x41\x15\xbc\xfa\x13\x82\x34\x77\x84\x6f\xe8\x5c\x8e\xde\x42\x05\xb4\x50\x4c\x98\x2b\xb2\x88\x46\x83\xac\x1a\xc7\x4e\x27\xc2\x12\xd2\xcb\x5f\xe9\x56\xe3\x40\xab\x35\xdb\x15\x16\x4d\x11\x39\x6b\xb0\x84\x69\x2f\xec\x16\x11\xd1\xde\x09\xf7\x25\x0b\xdb\xf3\xf7\x8f\x99\x27\x3c\x96\xf3\x13\xad\x52\xb3\x99\x4f\x0b\xc4\x0f\x09\x3a\xd8\xa3\x1f\xef\xad\x6e\x59\xfe\x81\xd8\x47\x74\x17\x3f\x79\xd2\x02\xc0\x6d\x86\x3f\x43\xac\xfa\xbf\x47\x6c\x38\xe2\x52\x84\x57\x14\x28\x3c\xc2\x17\x06\xf5\x06\xf9\xc3\xbc\xfe\xbe\x68\xf5\x4e\x7d\xe1\xe5\xa6\x3c\x1d\x64\xcf\x8d\xea\x54\xd6\xbe\xf4\x92\x98\x80\x21\xbb\xe0\x2b\xd9\xb9\x84\x37\x1e\xde\x0e\x2e\xd0\x7c\x59\xfa\xbb\x34\xaa\x32\xa9\x87\x71\xcb\x54\xa6\xb2\xc4\xa2\x06\x5c\xb2\x18\x2e\xde\xb3\xe3\x33\x92\x20\x7f\xe4\x7d\xe0\x01\x03\x20\xc2\xa7\x79\x54\x12\x79\xc4\xcc\x14\x0d\xde\xd7\xdd\x18\x65\x02\x63\x98\x54\xfb\xeb\x8f\x9c\x0e\x79\xd9\xf4\xf4\xe5\x05\x46\x9b\x7e\xf3\x68\x0d\xe3\x46\x11\x7c\xc7\xe0\xa2\xd8\x3a\x7f\xb5\x9b\x31\x4a\x8a\x50\x6b\xd9\x5f\xef\xc4\x3d\x72\xda\x8c\xa2\x9f\x5e\xb2\xcd\xe0\x8a\x16\x4a\x84\xbc\x12\xdf\x6d\xb5\x68\x6d\x49\x94\xde\x73\x3e\xf9\xe6\xac\xc7\x92\xb3\xc5\x31\x5f\x7c\xc1\x14\xbd\xde\xa2\xca\x7e\x97\xeb\xfe\x8b\xb5\x6b\x26\x7c\x2b\xb3\xa0\x8d\x5d\x95\x12\x9c\xe2\xfa\xe7\x4e\x96\x33\xd1\x93\x3b\xfe\x14\x95\xe5\x83\x5a\x79\xd9\x09\xf9\x42\xeb\x87\xe1\x71\xa1\x23\x50\xfe\xf7\x91\xe5\x5b\x4f\xf2\xe7\x24\x97\xb8\xa1\xa0\x69\xf1\xe4\x59\x49\xf3\xd6\xd7\xf7\xda\x2f\xb2\x54\x2d\x99\x28\x35\x1d\xc3\xb0\x23\xdd\x3a\xe8\xe2\x52\x76\x4e\x16\xcc\xdc\xc0\xab\xcd\xb5\xdd\xde\x17\x89\x8d\x3a\xb3\xf1\xf8\xe8\x2e\xe9\x76\x3a\x65\x99\xd9\x68\xbc\xf2\xfc\xa8\x77\xd2\xc3\x42\xb6\x6b\x4a\x11\x04\x14\x83\x9c\x4a\x3b\x37\x11\xbe\x51\xdc\xc3\x45\x26\xc2\xa5\x5b\x71\x69\xe1\x54\x36\x6b\x3f\x7d\x27\x9f\x1b\xba\x73\xc9\xba\xd3\xc9\x5c\x01\x96\x88\x2f\x65\xfe\xbe\xb8\xeb\x55\xe4\xa0\xd9\xc4\xdd\x66\xf3\xa5\x81\x62\x9a\x7b\xda\x22\xcd\x4b\x3f\xc7\x2d\xfc\x7c\x39\xe9\x5d\x05\xb9\xe7\x0c\x38\x37\x93\x83\x7f\x39\x8f\xb1\x74\x27\xd6\x34\xb5\x6a\x71\x48\x06\x03\xaf\x0b\x03\xd7\xed\x5f\x6d\xd3\x0e\xa5\x15\xae\xfe\x64\xcc\x3b\xa9\xba\x75\xbc\x9d\x64\x26\x26\x9a\xcb\xa6\x68\x26\x59\x56\x6a\x47\x52\x0a\x2d\xa8\x65\x31\x5b\xae\xe7\xbe\xae\xe5\x62\x01\x3d\x21\xbb\x86\x9d\x98\x58\xa7\xde\xb0\xb5\x61\xe8\x85\x7f\x48\x6c\xf4\x1b\xf2\x63\xe1\x9f\xcc\x76\xf3\x3f\xfb\xa9\x90\xb1\xa0\x1b\xec\x68\x18\x48\x28\x97\x97\xa9\xca\xb7\x40\xf2\xd2\x0d\xc3\xd2\xb8\x8b\x6a\x50\x62\x04\x2f\x85\xc4\x73\xc7\x83\x8f\x82\x15\x29\x71\xa6\x03\x38\xc6\x7b\xac\xb8\xa5\x3b\x15\x7e\xb7\x9e\xb1\x17\x48\x09\x75\x85\x81\xa2\x46\x5d\xcb\x5a\x24\x5e\xd2\x48\xf0\xcd\xd4\x61\x9e\xe7\x7f\x46\xab\x39\x97\x68\xf9\x91\xb6\x3e\xbd\x10\xc8\x3a\x4f\xd2\xa2\x6b\x44\xa6\x55\x2d\x71\x48\x35\x07\xbd\xe8\x56\x4e\x3d\xf1\x53\x54\xbd\xed\xcd\x5a\xcb\x10\x7c\xeb\x19\x92\xe1\x88\x0a\xa4\xb7\x6e\x19\x7d\xad\xfc\x56\x5a\x60\xa4\x5b\xcd\x10\x7a\x2d\xe8\xd0\x90\x11\x25\x46\xaa\xf0\x91\xb7\xbb\xdf\x59\x1c\x09\x3e\x73\xed\xe4\xf9\xb4\x8e\xfe\x27\xbd\x1c\xf7\x9a\xb9\x2a\x79\x93\x07\x22\x38\xe0\x17\x8a\xda\xf4\x82\xf7\x76\xac\x83\x72\x6a\x69\x5e\x16\x5f\xda\x4b\xb8\xaa\x0a\x77\xf9\x6c\x90\x25\x52\x7b\xfc\x01\xd6\x5a\x1d\x16\x53\xaa\x33\xa6\x42\xf6\x13\xc5\xd1\x74\xec\x45\x94\x40\x03\x17\xce\x3a\xba\x26\xf7\x5e\x7b\x6b\x5f\x06\xe4\x64\x55\xb1\x5a\x1f\xac\xb5\xf9\x93\xb1\xa4\x77\x30\x20\x10\x07\xeb\x94\x69\x6c\x05\x06\x0d\xf5\xb1\x0c\x35\x43\x74\x38\xa1\x07\xf9\x0d\xc6\xc3\x41\xa8\x30\x98\xbe\x17\xe4\x84\x58\xc8\x5b\xbb\xbc\x9f\xa2\x4e\x22\x47\x23\xb9\x0e\x3c\x30\xc3\x5d\x85\x24\x1d\xef\x81\x47\xf7\x8c\x8a\x88\x78\xbb\x30\xb9\xa6\x53\xe7\xb4\x87\x25\x37\x3f\x6d\x6e\x06\x97\xbd\x5d\x5b\xf2\x7b\xff\xa5\xbd\xf2\xb3\x91\x50\x37\x6f\xbe\x98\xbc\x5a\x52\x84\xd9\xb8\x64\x7c\xb0\x83\xb3\x7b\x91\xb5\x43\x29\x65\xcc\x89\xe4\x4e\x55\xfc\x79\x9f\x31\x41\x4f\x4f\x47\xb5\xe5\x07\xbc\x81\xaf\x86\x91\x16\x63\x5d\x63\xa2\x0e\x9a\xe0\xae\x66\x13\xf0\xd2\x7f\x1e\x06\x32\x16\x7f\x15\xa0\x06\x69\x99\xe5\x92\x5b\x00\x13\x52\xde\x44\x47\x1f\x15\x25\xba\x64\x04\x85\xc7\x3f\x0e\x1e\xdf\x2c\x9a\xa6\xb6\x07\x68\xdd\xbf\xb1\xa8\x50\xf4\x04\xab\x58\xed\x10\x40\xb0\x00\xd9\x1a\xfb\xb2\xc9\x24\xe5\x3c\x45\x8e\x4b\x16\x2d\x7f\x0a\xc9\x50\x1a\xa5\x35\x08\x88\x86\x08\x92\xb4\x1a\x56\xce\xc5\x38\x81\xf2\x6c\x60\xa7\x26\xf5\x1e\x24\xb1\x2f\x04\x9d\x3c\xd2\x85\x71\x4a\x55\x8e\x33\x80\xd8\xfb\x10\x10\x3c\x1d\xd9\xc9\x63\x63\x7a\x1b\x0d\x55\x2c\x65\x1f\xf7\x19\xcd\x28\xe5\xb1\x39\x1e\xfb\xc9\x13\xe4\x15\x1e\xe4\xb3\xa0\x6e\x56\x09\x7f\xdc\xd8\xb4\xbd\x9f\xab\x9a\x81\x3d\x71\x38\x8d\x7f\xb6\x3d\x08\xf6\x1e\x72\xc7\x43\xca\x99\xdb\x3d\x69\x6a\x9d\xdc\xf7\x63\x50\x60\x66\xa6\x83\x44\x1f\x6e\xcd\x2d\xa7\x5a\x22\x58\x2a\x67\x5a\x60\xa5\x79\xab\x5c\xac\x2c\x34\x57\x8c\x60\x12\xda\x56\xf9\x02\x72\x26\x76\xb1\xea\x87\x55\x8e\x80\x2f\x12\x59\x3d\x5d\x36\x17\x19\x17\x98\x31\xcf\xaf\x2a\xf1\xa2\x8b\xe5\x63\xe2\x3b\xa9\x64\x33\xc3\x11\x0c\x97\x30\x25\x50\xde\xfd\x44\x64\xc1\x4a\x9b\xd4\x5e\xe8\x8c\xb6\xb5\xf0\x72\x51\xa1\x2f\xa5\xc9\x3c\xf3\xed\xce\x95\x26\xf6\x4a\xdd\x51\x7a\x3e\x02\x26\x6b\x32\x4a\x5a\x3e\x2e\xb1\x05\x79\x47\x71\xcc\xd4\xa7\xc7\x00\x65\x3f\x55\xbd\xbc\xa9\x6a\x90\x1c\x3e\xec\x32\x32\x5f\x4d\xe6\x70\xa8\xc7\x0a\x76\x5e\x91\x5f\x69\xf2\x17\xc4\x67\x6b\xa3\x17\xde\xec\x6a\x31\x76\xad\xc7\x4c\x0d\xb3\xa8\x0e\x6d\x86\x20\x6a\xee\x7f\x66\x3c\xf9\x2a\x4b\x2f\xf0\x51\x88\x20\x02\x41\x5d\xd5\x36\x76\x46\xe8\x94\xb4\xea\x79\xa1\x0b\xee\x7a\xf7\x87\x74\x70\x05\x6d\x47\x84\x1f\xea\x2c\x2c\xaa\x4f\x7a\x31\xef\xbc\xc3\xad\xd7\xe6\x3d\x3a\x84\x45\x8c\x08\x42\x16\xca\xb6\x79\xfd\x10\x79\x2b\xf1\xb5\xe1\x4d\xe1\xc8\x26\xcd\xfe\x9e\xa9\x45\x03\x6c\x0c\x0d\x6e\x15\xc9\xa3\x4f\xc5\x5a\xdc\xd2\x11\xf8\xf0\x21\x51\xb7\x73\x64\x6d\xc5\xad\x8a\x69\x13\x71\xe0\x79\xce\x64\x70\xf6\x1d\xe2\x53\xee\x82\x74\x90\xd0\x1a\x21\x81\xe6\x77\x12\xee\x4a\x2c\x91\x15\x61\x00\x00\x3d\x9e\x3f\x23\x61\xcd\xff\x96\x84\x7f\xbb\x7e\xa3\xe1\xd8\x1c\x3c\xe9\x96\xd2\xd1\x94\x35\x44\xfa\x8d\x30\x1a\x89\xb0\x0f\x76\x59\xd1\xab\x4f\x7b\xdc\xf8\x60\x17\xec\x03\xb2\x56\xaa\xce\x0f\x35\x93\x3d\x4e\xd8\xb0\x66\x6d\xad\x41\xd7\x89\x8f\xb4\x57\x36\x1a\xe6\x53\x86\x0c\x85\x78\xce\xb1\xeb\x8d\x62\xe9\x3b\xb3\x84\x02\xcf\x19\xb2\x3a\xa2\xae\xe4\x19\x6b\x9a\xd2\xb2\x35\x47\x9a\x82\xbd\x65\x5c\xa2\xee\x89\x77\x33\x9d\x2a\xbb\xf2\xd8\xc8\x01\x7e\xd3\x96\xa7\x42\x54\x6d\xbb\xce\x6a\xf7\xc3\x00\xe3\xdb\xd5\x63\xa1\xc8\x08\x7c\x6e\x44\x59\xac\x47\x0f\x5e\xfb\xba\x93\x61\x8d\x4f\x1e\xfd\xcd\xb2\xa7\x19\xa0\xf9\x17\xe3\xc9\xf5\xb3\x6e\x19\xfb\x75\x53\x31\xa8\x09\x09\x0c\xd5\x6d\x0d\x78\xa6\x6d\xb4\x81\x34\x72\xe7\xf9\xc8\xfb\xa5\x4e\x3c\x53\x59\x42\xd7\x87\x14\x5f\xdc\xd9\xa4\xd6\x71\x9b\x6d\xfd\xf9\x54\xa6\xb7\xca\x66\x73\x29\x96\xb5\x66\xd0\x32\xbc\xf7\xa3\xa3\x32\xf7\xec\xe5\xf3\x1a\xd0\x24\xbf\x45\xce\xf9\xa0\xee\xd9\x27\x9e\x07\x87\x96\x88\xfa\x8b\x49\xf0\xc6\xce\x2a\x96\x81\x30\x94\x77\x3c\x26\x14\x23\xbc\x54\xd0\x39\x17\x4f\xf5\x6f\x4d\xd7\x44\x18\x72\xe6\xdd\x7d\xff\xb6\x44\x38\x58\xba\xf7\xd8\x01\xa7\x65\xc2\x75\xaf\x02\xaf\x21\x05\x9d\x98\xee\x99\x3c\x81\x8f\x94\x91\xca\x5e\xbd\x3f\x26\xf1\x16\x1b\xf3\x46\x9c\x06\x00\xa0\xb4\xff\xd7\xef\x10\x1e\x01\x85\xfd\x36\x07\x58\x36\x3e\x3d\x45\xe9\xa8\xe1\xda\x01\x2f\x43\x8c\xf5\xf5\x15\xf7\x31\x90\xb3\x4e\x73\x09\x3d\xed\x6b\x7d\x29\xe7\x14\xbf\x2f\x71\x69\x2a\xaa\xec\x66\xee\x58\x04\x95\x93\x8a\x54\x38\xd0\x64\xbb\x0f\x4d\xae\x7c\x1a\xe8\xd4\x71\x91\xe5\xf5\x03\x59\xa6\xbc\x94\x62\xc1\x58\x9b\x19\x6f\x1f\xa7\x3e\xa9\xbb\xfe\x85\xc2\x3a\x46\x8e\x65\x24\x87\xcb\xdb\xf8\x15\x16\x40\x51\xb2\x3f\xd5\x89\x5e\xf5\x6e\xa9\x79\x46\xe5\x44\x92\xfd\xc6\xa1\xa1\x42\x07\x81\x99\xef\xc4\xbb\x29\xe5\x67\xc7\x6d\x35\x9e\xfb\xa5\x5c\x69\xbf\xc8\x9a\x1d\xaf\xef\x73\x40\x68\x2f\xa1\x18\xce\x5b\x17\xa7\x61\x37\xc6\x87\x07\x75\x7e\xaf\x1e\x25\xa9\x55\x8a\x06\x00\xe0\xf3\xaf\xf2\x95\x86\x96\x07\xf8\x47\xfd\x5f\x4b\x5b\xf6\x7f\xea\xc8\xd7\xd2\xfa\x7b\xcb\xaf\x25\x86\xc4\x37\x56\x99\xff\xa9\x10\xfe\xde\xe5\xd7\x0b\xa3\xfe\x8d\x4b\x5d\xba\xbf\xac\x54\xbe\x0f\xf2\x35\x16\x34\xbf\x09\xd2\xc5\xfc\x3f\x6c\xe2\xf7\x61\xbe\x6e\xfa\xb7\xb5\x98\xb3\xfe\x65\x98\x59\x41\x18\x18\x7f\x71\xc1\x00\x30\x00\xed\x34\x00\x00\x61\xfb\xe5\xf5\xb7\x00\x00\x00\xff\xff\xc9\x4b\x8c\xf9\x1f\x0d\x00\x00")


func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3359, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x25, 0x2d, 0xce, 0x40, 0xca, 0x2c, 0x27, 0xb0, 0xf1, 0x81, 0x4a, 0xf6, 0x27, 0x1b, 0x38, 0x28, 0xff, 0x27, 0x59, 0xc9, 0xcb, 0xe, 0x43, 0x8a, 0x34, 0x2c, 0x3d, 0xa8, 0x54, 0x4d, 0x67, 0x30}}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
