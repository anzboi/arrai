// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.371kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x3c\xd4\xeb\xbf\xff\xda\xc6\x5e\x29\x4b\x89\x62\x64\x19\x4d\xc6\xd2\x11\x83\xc6\x14\x62\x06\x45\xf6\xa5\x12\xc3\xd0\x8c\x91\x35\x59\x12\xc6\x56\x91\xca\x32\x44\xc2\xd8\x92\xa5\x41\x07\x93\xc9\x92\x30\xcc\xd8\xb7\x12\x8a\x2c\xa3\x90\x2d\xfb\x7d\x9d\xdf\xb9\xe7\xde\xea\xbe\xee\xef\xde\x7b\xee\xef\xf9\xe7\x79\x3d\x7f\x7c\xd6\xe7\xfd\x79\x7f\xde\x17\xd0\x1c\x9c\xc2\x00\x0f\xc0\x03\xfc\x7a\x04\x00\x00\x70\x26\x78\xba\xba\xbb\x29\x39\x79\x7b\x3b\xb9\x77\xb7\x98\xb4\xb7\xdf\x81\xb5\x31\x61\xe5\xe6\x17\x50\x4c\x68\xab\x82\x49\x37\x9a\xc1\xec\x3b\x0f\x55\xec\x36\x69\xe7\x34\x8b\x25\xa1\xe0\x7c\x57\x2c\xdd\x49\x9a\x85\x56\x7c\xa8\x8d\xea\x75\x08\x59\xb3\x70\x43\xc3\x82\x25\x66\xfd\x39\xe9\x98\xd5\xb4\x58\x4a\xee\x84\x8b\x1c\x12\xa2\x13\x83\x4c\x0b\x03\x00\x60\x77\xf7\x02\x9a\x9b\x07\x62\x65\x38\x6d\x0e\x00\x00\x01\x00\x80\xff\x3e\x17\x59\x00\x00\xf0\x04\x17\x3f\x1c\x06\xe6\xe6\xee\x8b\xf5\xbb\xaa\xe4\x4c\xc0\xc3\x9c\xbc\xbd\x4f\x38\xb9\xc3\xfe\x91\x1d\xcc\x8d\xa0\x84\x27\xb8\x04\x3f\xa2\xa7\x51\xd4\x05\xa2\x06\x3a\x2c\xcb\x70\x62\xdf\xdb\xa5\xef\xf8\x0f\xe4\x8b\x2d\x5c\xbe\xad\xcc\xbe\x15\x3d\x68\x91\x6a\xdc\xd2\xb7\x26\x5d\xa1\xa6\xa2\x96\x91\x24\xb6\xb1\x3c\x4b\x39\xb6\x29\x3e\x8c\x69\x2a\x0e\xb8\x6e\x23\xee\xda\x98\xc4\x61\xb6\xc7\x53\xeb\x75\x86\x69\x48\xcb\xb1\x87\x1b\xbe\xe0\xc7\x06\x65\xb1\xde\x99\xf0\x42\x4d\x5f\x43\xe9\x5a\xa3\x3c\xdb\xc4\xed\x9d\x73\xe1\xdf\x12\xa8\x6c\xb7\xd6\x3b\x15\x5c\xd5\x7b\x47\xef\xc8\xb4\x87\xea\x6c\x7f\x03\xf7\x93\xbf\xf7\xbc\x3d\x8a\xdd\xcd\x2e\x33\x5e\x4f\xa0\xc3\xd9\xaf\x53\xed\x25\x46\x38\xd6\x4d\x30\xa7\xde\x9c\x3c\x60\xb4\xff\x2e\xf6\xd3\xbe\x12\x65\x9f\x86\xd8\x17\xe9\x57\xc2\x63\x1d\x78\x65\x23\xad\x88\xca\x06\x85\x8a\xa7\x5e\xa8\x9b\xc7\x96\x14\xdf\xed\xd0\x60\x3e\x26\x48\x3e\xbd\x07\x99\x45\x50\x7a\xc8\xa3\x9a\x28\x72\xf8\x2b\x15\x49\x22\xf7\x86\x89\xf4\xb3\x9c\x74\x47\x95\xd7\xda\xb8\xc5\x0d\xd6\x82\x9e\x74\xd4\xde\xfc\x17\xa2\x06\x10\x33\x52\x91\x82\x77\x9f\x9f\x60\xd5\xa0\x94\xe8\xe5\xcf\x75\xbf\xd5\xbd\x33\xaf\xd4\x28\xfb\xb2\x60\x93\xa8\x21\x5d\x91\xb3\x94\x3a\x86\x7e\x4a\xb6\x9a\x8c\x42\x58\x17\x21\x31\x76\x17\x9d\x1f\x7c\x88\x96\x88\x65\xef\x08\x46\x54\xd9\x1a\xc9\xed\x15\xf7\xfe\xc4\xb3\x25\x98\xae\x39\xc8\xdf\x6c\xe2\x62\x33\x7c\x8c\xfb\x43\x94\x50\xe9\xd8\xba\x44\x6b\xc3\x56\x05\x98\x64\x6a\x61\x1d\xd3\x45\xd0\x1f\x11\x50\x29\xa9\xb5\x27\x3d\xc8\x43\xef\x7a\x1a\x94\x2d\xd5\x0b\x6c\xeb\x6d\x86\x75\x39\xfe\xbe\xb7\xcb\x8f\x55\x62\xc4\xab\xd6\x3c\x0e\xea\x8d\x7e\xbe\xdf\x29\xd7\x6f\xed\x81\xbf\xa7\x7f\x85\xb1\xda\xcd\xd3\x51\x99\xc9\x53\x1d\xf4\x9c\x89\x9e\xec\xfc\x71\xc3\x83\x5f\x74\xb5\x4f\x22\xe6\x99\x33\xca\x8b\xb4\x6b\xab\x4a\xf1\x1a\xf3\xcd\x2f\x6f\xce\x4c\x8a\xce\x8e\x45\xbd\x8f\xff\x3a\x5a\x69\x7d\xfe\xac\x13\xe7\x28\x45\x57\x87\xe6\x83\x66\x2d\xd7\xe8\xa3\x62\xec\x78\x65\x31\xb2\x71\xd4\xb2\xa4\xf0\x9a\xfe\x29\x54\x43\x7d\xcb\xf1\x46\x82\x4c\x30\xdb\x63\x62\xa2\xdb\xc5\x74\x38\x4c\xc4\x57\x12\x8b\x4f\x43\xdd\xe2\xe0\x29\x6b\x42\x4a\x1e\x44\x19\xe1\x2d\x32\xc4\x9e\x2b\xda\xdd\xbf\xf0\xf2\xb3\x56\x33\x95\xc1\xad\x2b\x1d\x09\xe1\x7f\x78\x4a\xc1\x1e\x5f\xc1\x5e\x50\x4b\x00\x84\xe6\xaf\x13\x36\xaa\x9c\xa5\x97\x65\x5e\x88\x21\x13\x76\x16\xc6\x56\xd3\xf9\x9c\x2a\x12\xab\xb1\x76\x6c\x53\xd9\xa0\xfb\x5f\xca\x5b\xe4\x85\x4d\x56\x35\x77\xb7\x31\xc1\x71\x08\xd6\x49\xf4\xda\xd6\x74\x5c\x88\x4b\x0f\xd9\x8d\xb1\x24\x52\x22\x13\xb4\xdd\xd0\x1d\xc6\xf0\xdc\x68\x74\x84\xf0\x43\x2a\x13\xe1\xe7\xf4\xf8\xf3\xbe\x96\x15\xb5\x35\x8d\x10\xf2\x6f\xb1\xff\x05\xde\xb3\x01\x58\x8a\x07\x3b\x00\x54\x73\xfd\x33\xf0\x9e\xfa\x9f\xc1\xeb\x13\xe8\xe9\xeb\x74\x03\xe6\xe3\xeb\x82\x73\xbf\x0a\x73\xc5\x39\xfd\xfb\xcc\x15\xdb\x74\xf8\x64\x1b\x0a\xd3\x98\x97\x17\xf3\xa2\xf8\x3a\xe2\x32\x82\xdc\x7a\x2d\xf0\xfe\xf1\x0f\xe9\xfd\x97\xae\x5a\xd9\xb9\x27\x29\x72\x3e\x63\x53\x83\x44\xed\x86\xb0\x56\xb8\xb3\xc2\x52\x9f\x53\x23\xc0\xd4\xd0\xcb\xb4\x35\x22\x1d\xba\xf7\x13\x76\x9b\x0b\x90\x12\xd5\xdc\x27\x47\xdc\x6b\x6c\x48\x42\x6d\x9d\x5e\x1c\xe4\x46\x15\x72\xab\x75\x16\xef\xfd\x8d\xd0\x42\x79\xd5\x72\x05\x64\xde\x69\x72\x53\xc3\xa0\x5c\xaa\x9e\xd6\x33\x03\x5e\x10\xcf\x73\x30\x88\x96\xa7\x17\x9c\xef\x2c\xb6\x39\x30\xf0\x9b\xf1\xa8\x6e\x5c\xc6\x77\x2e\x7b\xd2\x91\x30\x74\xab\xcc\x46\x95\x69\x55\x65\x98\xc2\xa6\xad\x44\xff\x99\x4b\xb3\xb6\xa6\x62\x2e\xf5\xc9\xe3\x9c\x88\x19\xd5\xad\x46\xfb\xad\xe6\xf9\xd8\x73\xa2\x73\x93\xb0\xc5\x0d\xd5\x0c\xaa\xd2\xc2\x5a\x03\xaf\xf6\xcd\xb1\x75\xd7\x51\x55\xd6\x76\x01\x54\x71\x04\x9a\x62\xf6\xc2\x27\xc4\x6b\xc0\x5d\xfc\x53\x40\xf6\x72\x75\xd2\x67\xb9\xd9\x03\xee\xb0\x8f\x32\x11\x93\x72\x26\x55\x5d\x25\x75\xd7\x78\xc9\xb3\xe7\x94\x29\x62\x85\x02\x44\x07\x1a\x47\x48\xe4\xba\x44\xf2\x44\x62\xbd\xfa\xe7\xda\x27\x5b\x52\xc1\x37\xb4\x17\x7f\xdf\xb7\xc1\x78\x12\x37\xca\xe2\xd1\x1f\xce\x35\x1a\xbc\x1a\xfe\x22\x85\x3f\x56\xd9\x97\x1e\xcd\x75\x5c\xb5\xee\x40\xbb\xdf\x62\xda\x5b\x21\x66\xbb\x9f\x42\x15\x35\xc6\x67\x85\xdf\x0c\xa3\x6b\xe3\x9c\x78\xfa\x73\xc4\xe9\x8f\x11\x42\x6e\xe7\x03\x77\xb2\x5c\x5d\xa8\xf7\xc9\x4c\x8f\xc9\xb0\x8d\x0a\x93\xd9\xee\x34\xb6\x12\x2d\xa9\x8a\xd9\xf7\x21\xd3\xef\xaf\x87\x7f\xc8\x61\xbe\xd5\x46\x3d\xbc\x2b\x28\xce\x7a\x04\xca\x5c\x0f\x36\x8c\x22\xcf\xf4\x42\x0a\xfd\x8a\xbc\x51\x45\x5b\xb7\x6b\xb5\xbc\xd8\x8f\xe6\xad\x1a\x88\x8c\xa9\x2d\x1f\xac\x63\x18\x83\xa5\x1f\xf2\x2b\x19\xcb\x65\x65\x5a\x30\x94\xbd\x92\x0b\x78\x8d\x59\xc5\x07\xee\xc3\xed\x4c\xdd\x0f\x29\xce\xd7\x8c\x8c\x2c\xac\x24\x5e\x34\xe7\x6a\xf3\xfb\x1a\x56\x8e\xe9\xc5\xf0\x8a\x8f\xc5\x3b\xb8\x9e\x59\x4d\x01\x25\xbf\x41\x59\xeb\x61\xe9\xd9\x50\x08\x39\xc9\x94\x28\xc2\xd1\x87\x8b\x39\x90\x9a\x1f\x0d\xa6\x3b\x9d\x08\x3b\x7b\x10\xbf\x0f\xa5\x34\x1a\x62\xd8\x4d\x05\x95\xf0\x51\x67\x9f\xe6\x60\xd2\x5f\x0b\x24\xcb\x1f\x69\xf4\x86\xdd\x18\xb4\xcf\xaa\x94\x6d\x61\x93\x15\x9d\x28\x2a\x6c\x4a\x5a\x23\xa9\xdb\x66\xc0\x31\x8c\xe5\xd5\xe6\xc3\xf7\x8c\x18\x70\x8e\x72\x62\x0c\x79\x56\x50\xbe\xc2\xa3\xf9\x8d\x4a\xd4\xa1\xc7\x37\x8a\x2f\x3e\x28\x38\x4f\xa8\xaf\xd2\x66\xe8\x0d\xa8\xa2\xdb\x8a\x58\xa4\xd8\xec\xf4\x18\x6c\x80\x43\x7e\x2f\x69\xde\x63\x57\x0f\x14\x0d\x66\xe4\x38\x43\x2d\x4a\x1b\xd2\x02\x50\xda\xb1\x12\x46\x31\xb4\xce\xea\x36\xc1\x92\x0a\xa1\x5c\x91\x88\x6e\x5f\x41\xbf\x2b\xa9\xb5\x08\xfc\xe6\xba\x99\x47\x42\x01\x5b\x4b\x9a\xe7\xe6\xad\xdb\x6a\x7e\x76\x6b\xc8\x7b\x52\x05\x07\xcb\x6a\xcc\x4e\xe1\x82\x32\x75\x86\x54\x99\x18\x69\x2a\x1b\x6d\xd3\x37\xc3\x1d\x3b\x7d\xc6\xda\x3e\xa2\x2d\xf6\x9d\x65\x16\x90\x70\x8f\xcc\x67\xb6\x3d\x5f\xeb\xca\xac\x61\x7c\xc0\x01\x58\x2a\xae\x01\x52\x5e\x05\xf4\xe8\xe9\xd6\x70\xe5\xf7\x72\x50\x8f\x94\x25\x3d\x37\xe8\xf3\x88\xf6\xc6\xe9\x3a\xa1\x0f\x81\x09\xef\x2c\x1e\x3d\xbe\x21\x41\x1c\x0c\x10\xda\xbe\x54\xd8\xd7\x98\xc2\xd0\xb9\xda\xfd\xb2\x44\x3f\xb5\xbd\xde\xc2\xfb\x38\xe5\xe4\x59\xad\x3e\xb9\xa5\xd5\xa5\x25\x7c\xd6\xbb\xf9\x59\xcc\xa7\x9d\xba\xdc\x35\xfd\x23\x6f\x44\x92\xc0\x50\xf5\x70\x5f\xe3\x61\xb9\x50\xbc\x95\xad\x63\xaa\x99\x55\xe6\xe8\x90\x0d\xc3\x71\x45\xe9\xfd\x16\xe8\x16\x02\xa1\xa3\x56\xb9\xbf\x1e\xe9\xa2\xa1\x0f\x07\x15\x95\x87\xe9\x90\xe8\x8e\xea\xe6\x6e\x2d\xae\x53\x38\x98\x81\x4c\xab\x9b\x3a\xba\x72\x52\xe8\xf8\x34\x8a\x1e\xd9\x7f\xf3\xe6\x3e\xe9\x76\xbb\x3b\x1e\x3e\xa1\xbf\xe3\x87\x97\x52\x3f\xae\xd4\xb9\xc1\x4b\x13\x67\x4e\xa4\x56\xd7\x28\xe5\x59\xb9\xd1\x4d\x61\x17\x0d\x5c\xf8\x21\xe1\x09\xaf\x88\xc3\x72\xa9\xac\x55\xc2\x1d\xe5\x41\x76\xa4\xdb\x4d\xb4\x24\x03\xfe\x7c\xee\x6c\x90\x0d\xec\x91\x39\xee\xe4\x18\xa2\x2c\x5c\x60\xda\x43\x62\x6f\x63\xa1\x4d\x94\x4a\x08\x12\x6d\xe9\x4c\x0f\x14\xa6\xc5\x47\x0c\x0d\x21\x16\x9f\x93\x79\xb3\xbe\x6d\x81\x8c\x47\xb3\x83\x13\x2e\x6d\x45\x8c\x30\xe7\x84\x89\xaf\x3d\xde\xf0\xc9\xba\x52\x87\x3e\x5a\x62\xec\xd5\x91\x96\xed\x7d\x31\xe2\x93\x75\x1e\xb8\x4f\xe8\xa7\x97\xe4\x6d\x0f\x38\x86\x8f\x2f\x30\x3b\x8e\x79\x60\xef\xde\xb5\x92\xed\xa0\xce\x3b\x24\xe4\xc9\xe2\xe5\x13\x3e\x1e\x9e\xab\x58\xce\x06\x67\x79\x3d\x04\xd3\xcf\x79\xd5\xe6\x36\xa3\xb5\x83\x67\xc8\xfb\xbf\x08\xba\xed\xc8\xde\x7b\xdb\x68\x7e\x0d\x34\xcd\x53\xd8\x74\x5b\x59\x84\x94\x06\x0d\x0a\x6d\x58\x61\x1a\xeb\x0d\x14\x0a\x1d\x1d\xc5\x42\x1d\x0f\x05\x24\xcf\xd5\xca\x6f\x7a\x4d\x68\x99\x1d\x65\xa5\xa6\xb8\x8c\x52\x4c\xee\xbe\x5b\xf7\xa7\x08\xe4\x9e\x1e\xe4\x14\xa5\x17\xde\x1b\xbb\xa1\x00\x0d\x09\xab\x24\x3e\x55\x1a\x32\x74\x7e\x8b\x8c\xb6\x1c\xcf\x63\x2d\xa9\x21\x23\x7c\xfa\xec\x06\xa6\xf2\x98\x82\x56\xc5\x35\x92\x0d\xfe\xd0\x39\x8a\xab\x64\x7d\xbc\x16\x69\xba\x7f\x03\x0e\x6a\x5c\x08\x1a\xef\xe3\x55\xeb\x5d\x22\x04\xe6\x97\xae\x81\x24\x5a\xef\x21\xb0\x2f\x09\x92\x81\x81\x2b\x5f\xb4\x0c\x6c\x03\x75\x32\xaa\x10\x4e\xa4\xe4\x67\x57\x3b\x09\x34\x21\x8f\xef\xbe\x3e\xbb\x3a\xd3\x33\xa7\xc6\x9c\x78\xd6\x3f\x50\x17\x0a\x1e\xbd\xdc\xc5\xf9\x0e\x48\xa2\xa7\xb3\xbe\x8b\x60\x02\x1f\xcd\x85\x16\xf8\x50\x7c\x88\x14\xcd\xce\xb7\xe3\x33\xc8\x9a\x20\x36\xea\x17\xa2\xb0\xee\x4a\x8d\x69\xba\xce\xe1\xaf\x5f\xc3\x4e\x37\x0c\xcc\xcf\x39\x90\xb9\x97\x02\xb7\x2f\x9f\x3d\xd7\x33\xf9\x21\x70\xf5\xe1\xb4\x82\xc7\x91\x79\xfa\x2d\xb6\xbf\x48\xb8\x31\x2c\x43\x51\x8a\x0b\x00\x10\xc2\xff\x8c\x84\x35\xff\xaf\x24\xfc\xe7\xf5\x27\x0d\x07\x27\xd4\x7b\x52\x94\xf7\x45\xce\x6b\xbf\x31\xac\x0e\xdb\xaf\x19\x10\xba\x6d\x56\xfa\x6a\x2d\x95\x1e\x2e\x68\xe3\xd7\xdf\x72\x29\x4d\xcf\x64\x73\x2e\x49\x9a\xdc\x69\x38\xd2\x33\x46\x22\x04\x0c\x8e\x91\x29\x42\xe5\x7b\xaa\xc4\x96\xeb\x69\xb6\x78\x30\x8f\x5b\x4d\xf6\x22\x5b\xd7\x13\x81\xb4\xdb\xd7\xca\x33\x65\xa0\x67\xe1\x11\x0a\x4d\x69\xe1\x51\x14\xcb\x2c\x2f\xe2\x0d\x0b\xd0\xd4\x15\x7d\x81\x7c\x61\x62\x56\x8b\xa2\x36\x7f\xe4\x25\x13\x07\xa7\x21\x57\x90\x98\x21\x4b\xf2\x3a\x3f\x6a\x0a\x33\x9d\xc1\x56\x6e\xa0\xac\xca\x19\x2f\xb5\xda\x4d\xf2\x0a\x60\x58\xc1\xef\xf7\xab\xf7\x81\x5f\x62\xbf\x0f\x4a\x6b\x19\x74\x31\xac\x0e\x01\x1a\x32\x2d\x4f\xa0\x77\x78\x8d\x4b\x9a\x5e\x0e\x23\x21\x96\x63\x88\xbc\x39\x9a\x8a\xb6\xfb\x4a\x60\xfa\xed\xc3\x55\xdc\x13\x39\xa4\xbc\xeb\xbd\xc9\x83\xf3\xa3\x7d\xa7\x5b\x13\x82\xc1\x71\x23\x8f\x95\x1d\x82\xf0\xd5\x23\x47\xda\xb8\x52\x3e\x7b\x7b\xd3\x9e\x74\x63\x2f\x06\xe1\xcf\xc4\x3a\x7f\xa9\x2e\x3f\xf1\x6d\x86\xdc\x54\x5e\x13\x47\xe2\x7f\x46\x6f\x2d\x6c\x6d\xcb\x9f\xd8\x03\xb9\x00\x8d\x2f\x0d\xd8\xa9\x94\x86\x7d\x5d\x96\xd1\xde\x41\x86\x9f\x58\x8b\x28\x9e\x69\xa5\x9f\xcb\xb7\x49\x44\x5c\xce\x51\x7c\x51\xfa\x1f\x62\xce\xcf\x1f\x90\x39\xc6\x06\x00\x7f\xec\xc4\x7f\xe1\x3e\xf4\xf3\x75\xc7\xfd\xf9\x11\xb8\xf8\xfa\xb8\x48\xe5\x7d\x7a\xf3\xdb\x22\x5c\x41\x66\xf7\xe7\x1c\x87\x60\xb6\x3a\x15\x19\x9c\xec\x5d\xba\xf2\xb6\x91\x98\x9d\x90\x18\x55\x35\x01\x63\xc7\x9a\xc0\x95\x3d\x2b\xc4\x13\xdb\x9a\xfc\xa5\xee\x11\xb9\xaf\xb0\x36\xb4\x6b\xbc\x5d\x65\x8a\xdc\x8f\x22\xd3\x24\x83\xcd\x27\xae\x3a\xdb\x74\xc8\x3f\x73\x4d\x39\xaa\xa3\x6f\x9d\xc5\xb0\xba\xfe\xbd\x7e\x8e\x17\x50\x92\xeb\x8c\xb2\xe1\x54\x7b\x96\x69\x72\x27\x77\x24\xdc\x72\x71\x57\xef\x04\x8d\xce\x23\x7a\xe8\xc3\xb8\xca\xeb\x83\x17\x35\x9a\x30\x91\xfe\x75\xd7\xf8\xe2\x43\x75\x9d\xb7\xe9\x75\x19\xa3\x7a\x53\x66\x69\x31\x35\x8b\xc3\x7d\x3d\x3a\x7f\x55\x1f\x2d\x07\xcf\x24\x01\x00\xb0\xf6\x0f\x29\xcb\xc6\x2e\x0c\xfc\x67\xfd\x3f\xca\x5c\x81\xff\xd2\x91\x1f\x65\xf6\xaf\x96\x3f\x6a\x0c\xd9\x9f\xac\xee\xfe\x6f\x45\xf1\xaf\x2e\x7f\x9c\x98\x53\x3f\xb9\x34\xe2\xf8\xdb\x52\xe5\xd7\x20\x3f\x62\x41\xf3\xa7\x20\x0c\x9e\xff\xc7\x28\xfe\x1a\xe6\xc7\xa6\xff\x5c\x8b\x2d\xdf\xdf\x86\xd9\x05\x34\x17\xe8\x0f\x17\x5c\x00\x17\x50\xc7\x06\x00\xd6\xfc\x7f\xbc\xfe\x2d\x00\x00\xff\xff\xae\x35\xb3\xe4\x2b\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3371, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x18, 0x8, 0x6f, 0xcd, 0xcc, 0x1c, 0x30, 0xab, 0x42, 0xec, 0x71, 0x3e, 0xca, 0xef, 0x79, 0x64, 0x82, 0xff, 0x4, 0x46, 0xed, 0x10, 0xc5, 0x78, 0x48, 0xe2, 0x8c, 0x74, 0xf2, 0xb6, 0x8c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
