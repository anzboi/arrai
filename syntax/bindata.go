// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.359kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x79\x3c\x94\x7d\xbf\xc7\x2f\xdb\xd8\x93\xb2\xb4\x90\x2d\xcb\x68\x18\x51\x64\x0b\x65\x6b\x06\x35\xf6\x3d\xc2\x98\xd1\x4c\x23\x4b\xc8\x92\x86\x41\xb2\xe4\xb1\x8e\xb2\x24\x83\x91\x92\x48\x19\x93\x89\x51\x61\x34\x23\x3b\x25\xd2\x62\x1b\xe1\xb6\x65\x3f\xaf\xe7\xbe\xcf\x7d\x4e\x75\x5e\xe7\x3e\xe7\xdc\xe7\xb9\xfe\xb9\x5e\xd7\x1f\xbf\xef\x76\x7d\xbe\x9f\xdf\xfb\x1c\x9c\x8b\x5b\x0c\xe0\x03\xf8\x80\x5f\x1f\x21\x00\x00\x7c\x70\x97\x90\x68\x7f\x75\xef\xa0\x20\x6f\x74\x77\x9b\x75\x67\xe7\x4d\x68\x07\x0b\x5a\x63\x7b\x0e\xc6\x82\xb4\xab\x58\x77\xc3\x99\xac\xbe\xb3\x10\xd5\x6e\xeb\x4e\x6e\xc4\x0d\x22\x4c\x4f\xc0\xcb\x01\x4d\xd4\x25\x3b\x0a\xc0\xd6\x1b\xd6\xc0\x24\x5d\xf2\xfa\x09\xfb\x19\x49\xa7\xaf\xd9\x87\x1d\x27\x25\x73\x4b\x3f\xfb\x2a\x99\x80\x0d\x93\x4c\xf2\x63\x01\x00\xd8\xd9\x39\x07\xe7\xe5\x03\x3b\x5a\x4e\xda\x02\x00\x80\x03\x00\xe0\xbf\xaf\x45\x11\x00\x00\x2c\xce\x37\x14\xe3\x07\xf5\x47\x87\xa0\x42\x2f\xa8\xfb\xe0\xb0\x50\xef\xa0\x20\x35\x6f\x34\xf4\xf7\xea\xa0\xfe\x38\x75\x2c\xce\x37\x3e\x8b\x71\xb5\x4e\x5b\x28\x61\xa0\xe0\xbe\xd7\x90\xfa\x3c\x91\x0e\x19\xf6\x28\xf2\x7c\x71\x8d\xa7\x85\x2f\x30\xa1\x86\xac\x91\xa9\xe1\x34\x9a\x78\xd7\xfa\x55\x69\x3b\xed\xb7\x53\x45\x9e\xd1\x39\xbe\xe7\x4f\x37\xa6\xe4\x2d\xab\xef\x82\xd3\x31\xcf\x82\x64\x3b\x9a\xb1\xbc\xcf\x7a\xc8\x22\x44\x5f\xdb\x22\x9b\xf8\x1e\x3e\x6d\x04\xd3\x4e\xf9\x78\xe2\x2e\xb0\xaf\x4e\xfb\xb1\x23\x8f\x47\x77\x2c\xcf\x6d\x17\xea\x8c\x41\x65\x0e\xbc\xec\x4c\x58\x8f\xbc\x1c\x3f\x54\x5d\x7e\xbe\xb0\x95\x22\x76\x6d\xfd\x3b\xd7\xec\x79\xb1\x1c\xf0\xce\x65\x17\x0b\xd9\x34\x9c\x84\x45\x98\x45\x8c\xdd\x90\xf5\xd1\x37\xa6\xff\xe0\x56\x18\x3e\x11\x7f\xa4\xf3\x4e\x60\x09\x5b\x29\xcf\x4b\xde\xe9\x14\xff\x5d\x07\xb9\x14\x44\x65\x47\x6a\x55\xaa\x7d\xc9\x91\x23\x3e\x5a\x4c\xad\x09\x37\x0b\x94\x4f\xf2\x3a\x8b\x1d\x32\x15\x96\x66\x4b\xf6\xc2\x59\x59\x7c\x4c\x8b\xb1\x6b\x1b\x9f\x44\x3a\x09\x69\x88\xb8\x6d\xde\x9c\x37\x95\x4b\x10\x29\x7f\x2c\x61\x0e\x46\x10\x2b\x55\x82\xfa\x42\x85\xeb\x07\x65\x25\x76\x6e\x6f\x0c\x7f\xbf\x04\xef\x1b\x7f\x51\x4f\x8f\x36\x1b\x8f\xef\x4a\x63\xfa\xe0\xa1\x84\x1c\xd7\xec\x83\xdb\xee\x64\x50\x36\xda\x3a\xf5\xcc\x55\x99\xa0\xc3\x02\xc7\x16\xb7\x06\x91\x8a\x44\x03\x54\x5b\xaa\xc2\xbc\x13\xe6\xab\x17\x74\x9f\x4e\x86\x37\x3a\x53\x2a\xfc\xa0\x39\x15\x3f\x11\x7c\x58\x70\x91\xde\x21\x1a\x4a\xd8\xb7\xe5\xd8\xfb\x66\xf7\x27\x4a\x63\x36\x18\x4d\x59\x9a\x43\x72\xeb\xcb\xf0\x2d\xe1\x57\x76\xdd\x6b\x0c\x94\x29\x99\xe9\xf7\xc8\xdc\x83\x4c\xa1\x0b\x57\x88\xb8\x29\xb6\x58\xce\x7c\x53\x9c\x7d\xcf\x46\x11\x91\x4b\x51\x42\x86\x6a\xe9\xb7\x73\x2d\xda\xcb\xcd\xce\xd2\x33\x34\x86\xaf\x87\xa3\x3c\x3f\x1c\xea\xf1\x1e\x67\x1c\x8f\x94\xb4\xb8\x13\xf6\xc9\xed\xf9\x52\x90\x60\x68\xe0\xe9\x4b\x16\xab\x73\xc3\xf7\x13\xef\x6a\xe0\xe7\x5c\x8a\x0b\x69\x97\xe1\x33\x4b\x54\x33\x58\x92\x2b\xbf\xa2\x9f\x62\x32\xf5\x51\x36\x9e\xd2\x3f\x01\x6b\x69\x6e\xd3\xa2\xe3\x14\xa2\x38\xef\x10\x32\xfc\xed\x6e\xeb\x41\xc5\x43\xa4\x51\xd8\x7c\xd8\x35\x2e\xbe\x47\xad\x26\xd2\xfb\x60\x67\xb0\xf6\x05\x92\x0f\x54\x5d\x6f\x9d\x7b\xfa\x55\xff\x15\x95\xc9\x6b\x2c\x17\x0f\x16\xcc\xd4\x51\x71\xc3\xd6\x71\x56\x34\x2a\xc8\x2e\x29\x3c\x56\xb6\x49\xdf\x9e\xaf\x5a\xd9\xe0\xf3\xae\xcb\x68\x40\xb9\x72\x4c\x94\x80\x6e\xcd\x9e\x45\x1c\x1b\x7a\x9d\xb5\x4a\xda\x12\xbb\xd6\x8b\xce\xf9\xb6\x50\x30\x7b\xd6\xc0\x2a\xb7\x50\x97\xe5\xf4\x2c\x8d\xbd\x76\x0f\xc6\xa5\xd7\x38\x25\x12\x46\x82\x94\xf6\x9a\x4f\x4b\x89\xaa\xe5\x51\xe8\x95\xaa\x7b\xc3\x68\x05\xdb\xfc\x7f\x0a\x16\xb3\xaa\x03\xf2\xe4\x04\x80\x22\x9e\xbf\x12\xac\xce\xff\x2c\xd8\xe0\x88\x4b\x21\xde\xe1\xd0\xe0\x10\x5f\x0c\xfa\x02\x14\x89\xf1\xfe\xf7\x3d\xab\x72\x7e\x13\x5c\x62\x29\x46\x63\x9d\x5f\x28\x4b\x10\x78\x93\x5c\x10\xe9\xdf\x6b\x8f\xbd\x92\x96\xc9\xe8\xf7\xbc\xe0\xe8\x8a\xce\x56\xe5\xbe\xcf\xa1\x05\x4e\xd8\x89\x9e\x59\xe6\x2d\x8e\xcd\x7b\x40\x8d\x93\xa7\xc6\x9c\xa7\xad\x12\x18\x10\x91\x4f\xa8\x2d\x1e\x40\x56\x42\x77\xb7\x12\x41\xc4\xca\x92\x08\xdb\x3c\xb9\x30\xc8\x0b\x23\xf3\x6a\x75\x55\x89\x1c\xc7\xb5\xd5\x3e\x6f\xf3\x02\xd9\x76\x59\x5f\x3d\x61\x5e\x23\xdb\x4c\xeb\x99\x92\x9f\x3f\x50\xe6\x6e\x9e\xa8\xcc\xa8\x38\xdb\x55\xe5\xbc\x77\xe0\xb8\xd5\xa8\x71\x72\xc1\x77\x1e\x37\xe2\xa1\x58\x78\xbb\xc2\x7a\xbd\x4d\xfd\x93\x58\x95\x0d\x17\xa9\xfe\x53\x9e\xd3\x2e\x36\x92\xbe\xcd\x39\x1f\xb9\x8d\xa6\x34\x37\xe9\x6e\x9b\xaf\xe6\x6e\x58\x48\xb0\xbf\x40\x17\xd6\x35\x0b\xa8\xea\xf3\xab\x2d\xfc\x06\x57\xc7\xd6\x90\xa3\x9a\x33\x5b\x15\x10\xd5\x11\x48\x2e\xe2\x71\x70\x74\xe0\x00\xfa\xc0\xa7\xb0\x92\xa5\x86\xec\xaf\x4a\xd3\x7b\xd1\xd0\x71\x85\xb8\x2f\x4a\xd6\xf5\x6f\x1f\x36\x5d\xe4\x27\x4d\x5b\x68\xd4\x4a\x92\x85\x08\xee\x34\xae\xe8\xf8\x35\xa9\x9c\xcf\x19\xcd\xda\x5f\x1b\x8b\x36\x65\xa3\xc2\x0d\x16\x9e\xed\x5e\x67\x16\x25\x8f\xce\xf0\x99\x0d\x97\x9e\x19\xbc\x80\x7f\x9c\x2b\x78\x43\x23\x84\x91\xc8\x73\x44\xb3\x69\x6f\x67\xe8\x42\xfe\x6b\x51\x56\x67\xa8\x4a\x3d\x35\x29\x78\x59\x10\xe1\x67\xec\xec\x93\x71\xf2\x6b\xdc\xc9\xf1\x38\x51\xff\xb3\x11\xdb\xc5\x48\x5f\xea\x2d\x12\x2b\xe0\x4b\xec\x7a\x9d\xf5\x74\x77\x3e\xc7\x43\x7d\xd9\xba\xe9\xf7\xd1\x93\xef\x2f\xe3\x3f\xdc\x63\xbd\x36\x80\x65\xa6\x08\x1f\x98\xc9\x02\x15\xae\x45\x59\x26\x90\xa6\x7a\xc1\xe4\xd0\xca\x20\x58\xe5\xe6\xf5\x46\xfd\x40\x4e\x99\xb2\x15\x73\xf1\x31\xad\xa5\x7d\x4d\x4c\x2b\x79\xb9\x4c\x41\x75\x2b\xa5\xe2\x42\x7b\xa6\x46\x60\x4e\x05\xbf\xd5\x4c\xd5\xde\x5b\x7a\xae\x36\xe8\xfd\xaa\x73\x94\x91\x91\xf9\xe5\x0c\x3b\x5b\x9e\x8e\xd0\x6f\xb1\x35\x7e\xbd\x7e\xfc\x07\xc6\xd2\xdc\x91\xa7\x56\x72\x41\x39\x2f\x61\x4e\xa6\x28\x46\x09\x04\x4c\xca\xb6\x21\x88\x73\xf5\x61\x92\xf6\xe6\x95\x27\xca\x33\xbc\xd5\x62\x4f\xef\xc3\xee\x86\xa9\x8f\x46\x5b\x76\x53\x41\x0f\x05\xa8\xd3\x77\xef\xf9\xdd\x7e\x21\x94\xa3\x7c\x88\x1e\x04\x0d\x1f\x74\x2b\x7e\xa2\xd8\xc6\xa1\x28\xf1\xb9\x92\xdc\x9a\xbd\x4a\xd4\x76\x29\xd0\xf3\x63\x2e\xad\xbc\x3a\x98\x7a\x86\xa9\xc7\x55\x43\x48\x22\x4d\x0b\x2b\xd7\x05\xbc\x7a\x79\x34\x61\xff\x9d\xf0\x2a\xbb\x7f\x54\x9c\xc5\x35\xd7\x1b\x30\x4d\x07\x34\xe1\x1d\x95\x33\xc4\x1b\x25\xb7\x93\x50\x61\xee\xe5\xbd\xc4\xb9\x80\x1d\x53\x50\xa2\x3c\xf3\x9e\x0f\xc4\xbe\xba\x25\x3f\x0c\x66\x70\x43\xea\x4c\x12\xad\xab\xa1\x43\xf8\x61\x9d\x68\xa9\x78\x5c\x77\x88\x70\xa8\x57\x5e\xa3\x11\x76\x63\x0d\x11\x90\x5e\xc1\xd1\x96\x7f\x69\xe3\xda\x75\xad\x50\xd7\x55\x93\x54\xd9\x8a\x7d\x8f\x28\x08\x1d\x4c\x64\xa1\xe1\x90\x26\xcb\x4f\x8e\xca\x41\xdb\x08\x29\x40\xa3\x26\x4f\x39\xb9\xc5\x75\xdc\x78\xe7\x50\x0c\xa4\xa7\x92\x04\x10\x5b\x73\x8d\x48\x16\x85\xf9\x01\x03\xa0\xa8\x98\x16\x70\x4d\x3d\xd0\x63\x6a\x4c\xe1\x29\xef\xe5\xa2\x1e\x7a\x94\xfd\xc0\xbc\x2f\x20\x31\x08\x63\xec\x0d\xdf\x2f\x8f\x7b\x67\x9f\x75\x27\x5c\x8a\x30\x18\x26\xba\xe5\x49\xee\xa3\xe7\x32\x0d\x2f\x74\x3f\x7d\x68\x96\xd7\xd9\x6c\x1f\x74\xa4\xf6\xd8\x69\xfd\x3e\xa5\xc5\x95\xc5\x45\x6c\xf1\xbb\xb9\x69\xbf\x4f\xdb\x4d\xa5\xab\x66\x87\x5e\x8a\x67\xcb\x43\xb4\xf1\x21\x56\xc3\x4a\x31\x58\x47\x17\x8f\x3c\x84\x63\xe1\xe8\x90\x33\xd3\x63\x59\xfd\xfd\x26\xe8\x9a\x91\x91\xa1\xd6\x93\x3d\xcd\x26\xbe\x27\xcc\xf4\x40\x95\x35\xb1\x86\x44\x86\x87\xb6\xad\x7f\x1b\x72\x02\x03\x35\x57\x68\xf7\xd7\x86\x3f\xf9\x22\x7a\x64\x12\xc6\x88\xef\xbf\x7a\x75\xb7\x5c\xa7\xeb\xcd\x80\xe0\x98\x67\xd8\xe1\xc5\xbc\xf1\xe5\x26\x7f\xbd\xea\x8c\x29\xb5\xbc\x06\x8a\x7a\x99\xa3\x3f\xc3\x06\x6a\x67\xee\x2b\x08\xc6\xa7\x3f\x27\x0c\x2b\xe5\xcd\xac\xe0\x6e\x6a\x0c\x72\x9a\xf8\x5f\x85\x4b\x33\xf5\x1e\xb0\x4f\x47\x3a\x43\xb3\x6c\x31\xc7\xc6\x8c\x1e\xe1\x85\x26\x03\xa4\x44\xe8\x64\xe7\x84\xa3\xd1\x26\x70\x07\x1f\x46\x84\x18\x2d\x2d\x6e\x68\xc8\x68\xe1\x01\x89\xbf\xf8\xb7\x4d\x90\xd5\x68\x49\x54\xba\xe7\x66\xdc\x08\x8b\x2d\x46\x78\x11\xf0\x52\x40\x11\x49\x1d\x1a\x77\xf0\x73\xd3\x36\x71\xe8\xec\x4b\x3a\xf0\xa5\x29\x00\xf3\x09\x7e\xd7\x53\xd9\x65\xaf\x07\xfe\xe3\x3c\xeb\xcd\xe1\x00\x54\x4a\x8a\xa3\xe2\x1b\xea\x9c\x7b\x7a\x99\x22\x56\x39\x7d\xfc\x20\xbb\x6e\xa9\x44\xbe\x38\x30\x53\x9e\x61\x11\xd8\x58\xfa\x0a\x6e\x10\x35\x45\xda\x33\x2b\xec\xbf\xad\x98\xfa\x9a\x6e\x7b\x11\x34\xc9\x47\x6e\xbd\xae\x21\x4e\xcc\x87\x44\xc6\xb4\x2c\xb3\xac\x4c\x07\xc8\xa2\x32\xa3\x28\x88\xc7\xfe\xb0\x1c\x76\xa3\xf2\x46\xe0\x67\x7d\x84\xcc\x4c\x5e\xae\xef\x68\xad\x75\xca\xbb\xb5\x2b\xb5\x42\xa5\x27\x07\xb9\x25\x18\xe4\xd4\xb1\x70\x15\x48\x74\xec\x13\xc2\x5d\xf5\x21\x4b\x9f\xd7\x26\x89\x0e\x1f\xcb\x66\x16\xb5\x4c\xe2\x82\xfb\x5c\x07\x26\xca\x58\xc2\x8e\x55\x14\xe9\x96\x2b\x10\x76\x2d\x52\xba\x39\x4d\x9f\x38\xd9\xbf\xae\x07\xa2\xcf\x47\x7e\xec\xe3\xd7\xea\x5d\xc4\x45\x94\x57\xaf\x82\xa4\xda\x53\x8d\x50\x4f\x71\xd2\x11\x11\xcb\xb3\xfa\xe6\x2e\x11\x86\x05\xf5\x46\xde\xc4\x9c\xfb\x17\xba\x70\x34\xd1\x80\xef\x21\xc1\x3b\x86\x93\x53\x3a\x63\xde\x7c\x6b\x1f\xa8\xf3\x15\x59\x4f\x77\x30\x21\x03\xd2\xf0\xc9\xe2\xef\xe2\x7e\x11\x59\xec\x98\x8a\xe0\xda\x60\x42\xad\x6e\xd7\xeb\x8f\x53\x26\x94\x48\x0e\xea\x2c\x41\xcc\x78\x99\x62\x73\xdb\xf0\xe0\xb7\x6f\xb1\x27\x5b\x06\xe6\xd8\xee\x24\xde\xc5\x88\xad\xf3\xa7\x2d\x7a\xbe\x7c\x88\x58\xc9\x9c\x54\x09\x38\x34\xc7\xb8\xc6\xf1\xa7\x09\xd3\x63\x0b\x54\x65\x79\x00\xc0\x48\xec\xaf\x4c\x58\xf7\xff\x6a\xc2\x7f\xbc\xfe\xb0\xe1\xa8\xf4\xe6\x4b\xb5\x1a\xbb\xe3\xe7\x0c\x5e\x5a\x36\xc4\xee\xd1\x0d\x8b\xd9\x42\x54\x3f\x5f\xcd\x63\xe0\x85\x9d\x43\xfb\xdb\x3c\xf3\x4d\xad\x37\xd8\xd9\x72\xa4\x2e\xcb\x91\x9e\x31\x22\x2e\x6c\x70\x8c\x54\x2b\x5a\xb3\xab\x5e\x72\xa9\x99\xe6\x82\x95\xe7\xf3\xa7\x94\x2c\x70\xbc\x2d\x12\xca\xbf\x7e\xb1\xa6\x50\x01\x72\x5a\x2f\x4e\xa5\x35\x1f\x9f\x50\xeb\x50\x1c\x48\x08\xb7\x07\x4d\x78\x99\x09\x95\x8b\x11\x8a\xdb\x54\x0d\x04\xe3\x3d\xad\xdd\xbd\x87\x90\x20\x49\xcb\x19\xe9\xcb\x82\xb0\x09\xbf\xc9\x02\x8e\x1a\x73\x0d\x4d\xee\x34\xd9\x95\x6e\x62\x60\x18\xd3\x51\xef\x56\xbf\x76\x9f\xfc\x53\xd4\xf7\x41\x39\x7d\xf3\xb7\x4c\xc7\xfd\xc0\x09\x85\xb6\x22\xc8\x4d\x7e\xab\x87\xad\x4f\x87\x4d\xc0\x0e\x63\x46\x65\x6c\xda\x51\x03\xf4\x72\xc4\xed\xeb\x07\xeb\x79\x3f\xdf\x23\x96\x5d\xee\xcd\x19\x9c\x1b\xed\x3b\xd9\x9e\x1e\x25\x9f\x3c\x72\x47\xc3\x3d\x12\xdb\x30\x72\xa8\x83\x27\xf7\x6b\x50\x10\xad\xa8\x1b\x65\x17\x89\x3d\x75\xc3\x67\xb6\xa1\x46\xed\xb7\x29\x52\x6b\x0d\x25\x99\x28\x78\x9f\xd1\x4e\x6e\xef\x28\xff\xbc\x0b\x7c\x0e\x92\x56\x1d\xb6\xfd\x44\x0e\xfa\x6d\x49\xc1\x60\xdb\x04\xaf\xb6\x1a\x57\x35\xd5\xce\xb0\x28\x77\xce\x30\x3a\x7f\x4f\xf5\x71\xf5\x7f\x00\x5c\xe8\x15\x40\xe1\x30\x07\x00\x04\x70\xfe\x4b\xef\xc3\xd0\x10\x34\xe6\x8f\x1f\x81\x49\x6b\x4e\x8e\xd7\xd8\x6d\x3a\xb7\x25\xce\x13\x89\xb8\xc5\xf6\x18\x82\xba\x18\xd6\x15\x70\x73\xbe\x35\x56\x76\x89\xf7\xdb\x8e\x4e\xd2\xd4\x12\xb2\xf2\xa0\x44\x2c\xef\x5a\x26\xa8\x6d\xe9\x0a\x56\xa3\xe3\x4a\x9f\xa3\x9c\x69\x17\xf9\xdf\x3e\x52\xe5\xcd\x8a\xcf\x97\x8e\xb2\xfd\x7c\xc1\xc7\xf9\x8d\xf2\x7d\x64\xae\x8c\xa1\x99\x53\x31\xd3\xf1\xf2\xf7\x66\x36\x3f\xa0\xae\xd4\x95\xe0\xcc\xad\x75\xbf\xd0\xfa\x66\xe9\x08\xde\x61\x61\xc7\x54\x8d\xc6\xe0\x93\xd8\xff\xe1\xe3\xd1\x17\xfb\xec\x4e\xb4\xfa\xc5\x5f\x69\xba\x28\x90\x16\x63\xec\xb3\xc5\x68\x2a\x18\x35\x9d\x40\xe4\x27\x51\x16\x86\xfb\x7a\x0c\xff\xec\x3e\x51\x49\xaf\x90\x08\x00\xc0\xea\xef\xf8\xca\xc1\x29\x06\xfc\x67\xff\x3f\xa2\xad\xd0\x7f\x99\xc8\x8f\x68\xfd\xeb\xc9\x1f\x19\x43\xf1\xa7\x53\x29\xff\x5b\x10\xfe\x35\xe4\x8f\x1b\xa3\xf3\x53\x48\x43\xae\xbf\x8d\x2a\xbf\x26\xf9\x51\x0b\xba\x3f\x25\x69\xe1\xfb\x7f\xac\xe2\xaf\x69\x7e\x1c\xfa\xcf\xbd\x58\x0b\xfc\x6d\x99\x9d\x83\xf3\x80\xfe\x19\x82\x07\xe0\x01\x9a\x38\x00\x00\x2e\xf8\xcf\xaf\x7f\x0b\x00\x00\xff\xff\x5b\x9d\xaa\x1c\x1f\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3359, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x56, 0xaa, 0x12, 0x68, 0x30, 0x6b, 0x74, 0xe1, 0xfb, 0x73, 0x5a, 0x3c, 0xe7, 0xf4, 0xe3, 0x80, 0x5, 0xbb, 0x5c, 0x50, 0xe1, 0xec, 0xce, 0x5f, 0xcb, 0x58, 0x1b, 0x52, 0xfb, 0x7f, 0x20}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
