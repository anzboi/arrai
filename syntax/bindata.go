// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.37kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x67\x58\x53\x69\x9b\xc7\x0f\xbd\x2b\x08\x08\x22\x28\x04\xa9\x06\x82\xa0\x28\xa1\x2b\x46\x04\xa2\x82\x10\xe9\x4a\x49\x48\x62\x62\x10\x88\x88\x14\x91\x10\x8a\x08\xc8\x2b\x2d\x08\x18\x81\xd0\x44\x8a\x14\x87\x10\x89\x14\xa5\x04\x12\xaa\x80\x8a\x60\xa5\x2a\x20\xbd\xef\xf5\xce\xec\xec\xaa\x7b\xed\xec\xee\xec\x7b\xbe\x9c\xeb\x7c\x78\xee\x76\xfe\xf7\xff\xf9\x9d\xb3\xe6\xe1\x95\x02\x04\x01\x41\xe0\xd7\x47\x14\x00\x00\x2f\xc2\x15\x14\xc6\x47\xdb\xc3\xcf\xcf\x03\xd3\xd3\x0a\xef\xe8\x88\x83\xb4\x73\x20\x15\x76\xe7\xac\x38\xe0\x36\x75\x78\x8f\x35\x9b\xd3\x7f\x16\xac\xd9\x03\xef\xe0\xb5\x8d\xa5\x58\x41\x85\x2f\x39\x60\x28\x06\x45\x08\x61\xab\xb5\xda\x55\x0d\x9a\x41\xd1\xda\x31\xfb\x29\x99\x0b\x5f\x52\x0e\x20\xc6\x65\xd2\xf2\x3e\x79\xab\x9a\x6b\x18\xc7\x98\x67\x84\x03\x00\xb0\xbd\x7d\xce\x5a\x40\x50\x03\x61\x39\x6e\x07\x00\x00\x01\x00\x80\xff\xbe\x16\x15\x00\x00\xf0\x04\x6f\x22\x0e\x09\xf1\xc1\x04\xa0\x89\x9e\xda\x5e\x04\x3c\xc4\xc3\xcf\x4f\xcb\x03\x03\xf9\xbd\x3a\x88\x0f\x41\x1b\x4f\xf0\x0e\x49\x66\x65\x54\xea\x8b\x46\x0d\x74\x3a\x94\xe3\x64\x56\x3a\x94\xe2\xae\x0d\x14\xc8\xcc\x5e\xbc\xa5\xc3\xbd\x11\x3d\x68\x9f\x6e\xd3\xda\xbf\xac\x54\xa5\x77\xa8\x97\x92\x22\xb3\xb6\x30\x59\x79\x60\x5d\xee\x35\xb2\xb9\x24\xf0\xaa\xa3\x1c\xaa\x29\x85\xc7\x76\xc7\x15\xc3\xe7\x59\x67\x42\x5b\x0f\xdc\x5b\x0b\x00\x65\xc2\xca\x63\xfd\xb2\xa1\x45\x06\x01\x96\x4a\x75\xa7\xf3\x9d\x92\x36\xb7\x4e\x45\x7c\x4f\x64\x70\xdd\x5c\xed\x52\x47\xe9\xf7\x8d\xc4\x29\x77\x84\x19\x6f\x7e\x07\xbd\xa2\xad\xf4\xb6\xec\x47\x6f\xe7\x94\xdb\xac\x26\xb2\xa0\xdc\x57\x19\x2e\xf2\xc3\x3c\xab\x70\xe4\xd1\x17\x87\x25\x4f\xef\xba\x83\xfe\x28\x5e\xaa\xe3\xdf\x18\xfb\xe4\xfe\xa5\x88\x58\x57\x21\x95\x48\x04\x59\x07\x56\xa4\x79\xf4\x89\xbe\x5d\x6c\x69\xc9\x9d\xce\x63\x9c\x4c\x82\xc2\xc3\x78\x8d\x49\xd3\xca\x5e\xda\x88\x81\x15\x2d\xe2\xd9\x21\x05\xb2\xc0\x1a\x5c\x69\x2a\xf7\xbe\xdb\xa1\xe7\x46\xb8\x39\x48\xa3\x24\x59\xd6\x24\xb3\xdd\x59\x96\x66\x81\x2c\xce\x69\x75\x18\x38\x32\xe8\x49\x72\xdc\x20\x7c\x73\xf9\x58\xa7\xe5\x10\xc7\xf3\x66\x47\xa2\x74\xac\xe4\x71\x43\x68\xa2\x50\xbd\x94\x33\xd6\xe1\xca\x8a\x3f\x4d\xce\x3e\xff\xc8\x11\xd5\x89\xd0\xd6\x24\xf5\xae\x8e\x65\xaf\xfb\x29\xde\xdf\xa9\x4a\x47\x13\x9e\x8f\x94\x53\x48\xcf\x2e\xbd\xb5\x88\xa2\xc1\xfd\x46\xf1\xb2\x73\xc2\xd9\x9c\x24\x70\xc7\xd9\x83\xff\x98\xb0\x20\x92\x65\x37\x11\x7d\x9d\xe2\x1f\xe9\x75\x29\x1a\x18\xfa\xc2\x0c\x8a\xd7\x70\x7f\x47\xd7\xd9\xaa\x9d\xb2\xc3\xe4\x75\x71\xb7\xa7\xdf\x32\x92\x75\xbc\xe4\xaf\x98\x85\x0e\x6a\x4a\xc0\x9c\x03\x21\x98\x31\xd4\x29\xd6\xe1\xdc\x31\xaf\x71\x4c\xd0\x3b\x86\x91\x95\x89\xd6\x0d\xb9\x84\xc8\xee\x1d\xcd\x27\xe6\xe7\xb7\x32\x77\x48\x5e\x2c\x1d\xaa\x3b\xf6\x81\xb1\x77\x64\x92\x96\xe6\x52\x48\xda\xeb\x67\x48\xbf\x39\xe0\x6e\x2c\x46\x96\x08\xe1\x70\x2f\x6e\xb0\xb5\x1e\xf7\x4e\xed\xd6\x50\xc2\xaa\x24\x27\xa7\xa8\x7f\x6f\x44\x08\x4f\x3a\x3f\x38\x28\x24\xa0\x5c\x26\xca\x8c\x9f\xe5\xf3\xdd\x0d\xcb\x86\xe3\x27\x19\xf6\x5d\x44\x6a\x35\x46\x73\x53\x4c\xf1\xf9\x2e\x01\xe2\x25\x75\x95\x6a\x5b\xa2\x7b\x55\x31\xda\xfc\xf8\x70\xc6\x8c\xec\x3c\x74\x3f\x40\x16\xcf\x07\xdb\xbc\xa3\xe2\xaa\xbb\x85\xa9\xdf\xea\xb9\x2c\x18\x2d\xcf\x26\xde\x24\x90\xbb\x12\x5b\xdd\x79\x8d\xd7\x9a\x48\x6f\x08\x9a\x91\xdd\xb0\x2f\x39\x18\xbe\xcc\x38\x39\xb3\x9a\x16\xd0\x83\x73\x87\x87\xc6\x36\x96\xd3\xe6\x34\xb6\x4a\x7a\xc1\xc3\xf3\xb9\x07\x97\x92\xe0\x69\xd9\x06\x9c\x0b\xbf\x25\x4c\x2f\x8a\x58\xf3\x40\xeb\x26\x76\x06\xd2\xc0\x79\x7d\xb0\x49\x79\x09\xad\x74\x7a\x53\xb1\xa6\x64\x20\x33\x6b\x4b\xe8\x4f\xed\x3a\x0d\xe7\x8d\x61\xb8\x01\xa0\x96\xef\xaf\xb4\x7b\xf4\x7f\xd6\xae\x7f\xd0\x95\x00\x8f\xeb\x10\xff\x00\x6f\x1c\xc6\x13\x82\xc2\x79\xfc\xfb\xca\x95\x38\x76\xfa\xe7\x58\x4a\x31\x39\x17\xe7\xf2\xa3\x84\x3b\x6f\x67\x05\xfb\xf4\xd9\xe3\xaf\x25\xdc\x63\xbd\x72\xf7\x44\x38\x63\x52\x34\x79\x1f\x71\xe9\x69\x44\x6d\x87\x4e\x2d\x0a\x50\xc3\xd3\x1f\x33\x48\x20\x46\xd8\x45\xe6\x32\x99\x05\xde\xf9\x11\xbd\xc9\x07\x28\xee\x36\x10\x57\x25\xef\xb4\xb1\xa4\x58\x6d\x98\xcc\x0d\x0a\x58\x15\x09\xe8\x75\x95\xec\x3c\x42\x68\xad\x7c\xd6\x7a\x89\xdf\xae\x0b\x7e\xe3\x18\xac\x42\xb1\x81\xd9\x3b\x01\x9a\x95\xcb\x77\x85\x45\xab\xb1\x0a\xcf\x76\x95\x38\x4a\x0e\x1c\xb1\x19\x31\xbb\x9d\xb5\xc2\xe7\x42\xd9\x17\x6e\xdd\xa6\xbc\x56\x73\xa6\xa6\x3a\x5c\x7d\xdd\x49\xfe\xd5\x71\xf7\x49\xa7\x33\x32\xde\x0d\xa9\xef\x79\x4d\x27\x74\x37\x9a\x5c\x36\x5e\xce\xc4\x9e\xda\x3d\xfd\x19\x32\xb7\xa6\x9b\xc5\xd0\x9e\x5d\x6e\x14\x32\xba\x31\xba\x8a\x1a\xd1\x9d\xda\x2c\x04\x6b\x0e\x83\xd3\x6c\x9f\xf8\x87\xfa\x0e\x60\xe4\x3e\x06\xe6\x2c\xd4\xa6\x7c\x51\x9d\x94\xc4\x40\x3e\x28\x93\x3e\xab\xc2\x6b\xba\x4b\xeb\x2f\x0b\xd1\x26\x4f\xe9\x54\xca\x14\x89\x92\x5d\x99\x3c\xa1\x91\xab\xf2\xa9\x9f\x92\x1a\xf4\xbf\xd4\x3d\xd8\x50\x0c\xb9\x6e\x34\xf7\x9b\xf8\x1a\xfb\xc1\xed\x91\x29\xc1\x93\xaf\xf3\x4e\x0f\x7a\x46\x3c\x49\x13\x89\xd5\x09\x60\x45\xf3\x1d\xd4\xad\x97\xec\x20\xce\x65\xb4\x48\x70\x3a\x88\xea\x35\x8c\x18\xff\x45\x11\x5b\xa4\x99\xa3\x57\x92\xc9\x17\x92\xc9\x07\x92\x84\xcf\xd9\xa0\x2d\x2a\xca\x9b\x71\x97\xc6\xc1\x7e\x0e\x5f\xab\x82\x4f\xf6\x64\x70\x95\x1a\x2a\x56\x4d\xbe\x0d\x1d\x7f\x7b\x35\xe2\x5d\x2e\xa7\xc5\xc8\xea\xde\x1d\x31\xb9\xa9\x64\xfe\xec\xd5\x10\xcb\x28\xda\x44\x9f\x46\x11\xb1\xd8\xcf\xaa\x78\xe3\x56\x9d\xa1\x2f\xf7\xfe\xfc\x25\x98\xf4\xa8\xde\x82\x6c\x3d\xdb\x06\xa4\x74\x4f\x44\xdb\x46\x95\x9a\x6d\xcf\xd6\xf1\x4d\x2d\x14\xb2\x99\x2a\x91\xbc\x0b\x75\x3e\x83\xd9\xa3\x39\x43\x1f\x1e\x9e\x5d\x4c\x3a\x6f\xc7\xd7\x4e\xfc\x16\x5e\x81\xec\x43\x0a\xc9\x8d\x26\xb8\xa2\x8e\x2f\xa5\xf1\xa7\xbe\xb0\xba\x60\x81\x66\xe5\x80\x35\x68\x29\x67\xc8\xd2\x3c\xfd\xb8\x18\xc9\xf4\x82\x68\x10\xcb\x43\x2b\xfc\x84\x2c\x5e\xdc\x4a\x7b\x24\xd4\xb2\x87\xc1\x5f\x2a\xcc\x98\x7c\x98\x8b\xbc\xff\x5c\x34\x55\x6d\x5f\x93\x1f\xe4\xfa\xa0\x0b\xb5\x5a\xa5\x95\x4b\x65\xf7\xa7\xe2\xa2\xe6\x94\x65\x8a\xbe\x53\x16\x14\xc9\x5e\x58\x7a\xb9\x37\xfe\x34\x1b\xca\x53\x41\x8e\xa1\x4d\x8a\xa9\x55\x61\x5f\xbe\x38\x14\xb5\x27\xf3\x7a\xc9\xf9\x7f\x14\x9e\x25\x34\xd4\x18\xb1\x2d\x06\x74\xad\xdb\x8b\xa7\x28\xb1\x39\xf7\x63\xd0\x81\xae\x05\x7d\x94\x19\xec\xb6\x05\x7f\x34\x88\x9d\xeb\x05\xb6\x2f\x6b\xcc\x08\xb4\x32\x8a\x95\x3f\x1d\xc3\xec\xaa\x6d\x17\x2b\xad\x92\xc8\x93\x26\xf5\x04\x88\x11\x2f\xa5\xd7\x99\xe2\xd7\x57\x6d\xb1\x89\x85\x5c\xad\x19\x57\xd6\x6f\xde\xd2\x23\x3a\x2f\x9b\xc7\x2b\x16\xca\x96\xd3\x6d\x8f\xe2\x82\xb3\x8d\x87\x74\x39\x48\x25\x06\x17\x73\x3d\x20\x0b\x83\x1e\x3f\x7e\xc1\x85\xd4\x1e\xfb\xc6\x81\x0a\x24\xc6\xd3\x84\x6d\x37\x67\xea\x50\x1c\x3a\xfb\x1d\x0e\x40\x33\x70\x8d\x1a\x15\x35\x40\xaf\x85\x19\x9d\xaf\xa0\x8f\x87\xb1\xaf\x3c\xe5\x31\xac\x1f\x1b\xed\x87\x33\xf3\xb0\xde\x03\x22\xbc\xb1\x4f\xce\xbc\x2e\x4f\x1e\x0c\x94\xd8\x74\x2f\xea\x6f\x4a\x63\x1b\x7b\xf6\x3c\x2d\x3d\x99\xde\xd1\x60\xef\x77\xb0\xf2\xf0\x09\xc3\x7e\xd5\xf9\xa5\xf9\x79\x3c\xf5\xcd\xcc\x24\xf2\xe3\x56\x7d\xde\xf2\xc9\x7d\x2f\xa4\x53\x40\x60\xfd\x88\x00\x9b\xd7\xaa\x61\x78\x84\x93\x5b\xba\x2d\x22\x7b\x64\xc8\x91\xed\xb6\xa8\xfd\x76\x83\xff\xa6\xa9\xa9\xb1\x5e\xf5\xae\x06\x73\xef\x63\x27\xa1\xfc\xc5\x15\xe1\xc6\x14\x96\x9b\xbe\x9d\x4f\x2b\x6a\x0c\x07\x81\x29\xb7\xf9\xe8\x5b\x57\x7f\x96\x38\x38\x6e\xc5\x8a\x7c\x75\xe3\x86\xb8\x52\x87\x73\x1c\xd6\x3f\xec\x37\xfc\xeb\xf9\xf4\x0f\x8b\xf5\x3e\xd0\xb2\xa4\x09\xad\xf4\x5a\xba\x76\x3e\xc2\x87\x75\x06\x72\x1e\xe6\x2d\xa2\x11\x91\xf8\x8c\xfc\x5a\x35\x7d\x6a\x89\x10\xa7\x33\xc8\x6d\xee\x73\xc3\x5a\x81\x0d\x7d\x3c\x7d\x22\xd8\x11\x92\x6c\x87\x3b\x3c\x6a\x5a\x1e\x21\x3a\x8e\x95\xdf\xd9\x54\xe4\x18\x75\x28\xd4\xdc\xda\xc1\x8b\x15\x24\xc5\x4c\x20\x0d\x0d\x99\xce\x3d\xa6\x09\x51\xbf\x6f\xf0\xdb\x8c\xe4\x84\x24\xba\x6f\x90\x86\x39\xd3\x52\xe4\xe7\xd8\x17\xc2\x2a\x28\xc6\xd0\x07\x07\xa4\x8b\xbe\xb9\x43\x47\x7f\x8c\xdc\xe7\x7a\x2c\xee\xa3\xf5\x43\x77\x35\x27\x49\xb7\x88\xf7\xb3\x9c\xce\x03\x58\xf4\x9d\x3b\x08\x95\x4e\xc6\x8c\x6b\x62\xbe\x0a\x5e\x2d\xf1\xc3\xde\xe9\xaa\x85\x1c\x10\xd5\xf7\x1e\x88\x75\xca\xb7\x2e\xef\xa5\xb5\x51\xc8\x04\x6d\xd7\x57\x31\x9f\x2d\x95\xf8\x96\x26\xbb\xcb\xfc\xe3\x82\x45\xcd\xb7\x74\xa4\x29\x19\xe0\xe0\xb0\xc6\x45\x8e\x8d\xc5\x40\x91\xc4\xfe\x11\x34\xd8\x6d\x4f\x60\xea\x74\x9d\xda\xba\xef\x27\x43\xdb\xfd\x53\xe9\x69\xde\x23\x95\xf0\x3b\x6f\x56\xaf\x55\x8a\xe6\x99\x0c\xf2\xee\x66\x15\xc5\x8f\x5e\x57\x07\x87\x86\x57\x93\x1f\x6a\x0f\x59\x7a\xb5\x98\x47\x3b\xbc\xcf\x9f\x9a\xd7\x33\x27\xf9\xf7\x3b\x0f\x8c\xe5\x73\xc4\x10\x25\x74\x85\xc6\x6b\xe0\xe9\x4a\x94\x42\x43\x82\x21\x65\xfc\xd5\x1a\x94\xbf\x69\x36\xf8\x7d\xbf\x90\x5e\xdf\x3c\x21\xa8\xa0\x6c\x99\x5f\xbe\x2d\xde\x14\xfd\x94\xa0\x10\x14\xb4\xf8\xd5\x10\xe6\x14\x64\x9c\x55\x63\xea\x41\x49\x7d\xe4\xd9\x45\x60\x4a\x60\x57\x02\xfc\xb7\x8d\xc7\x27\x8e\x8e\x7a\x08\xae\xbe\x63\xcc\x16\x26\x3f\xdd\xc6\x05\x0c\x28\x58\x8f\x53\x57\xa4\x91\x41\xc9\xd3\x61\x85\xfe\x95\xfe\xe4\x4a\x83\xae\x96\xf7\x13\xe6\xf4\x60\x2e\xc6\x57\xb2\x94\xd9\x22\xfd\xcc\x7d\xe3\xbd\xdf\xbe\x85\x9b\x34\x0e\xcc\x4c\xbb\xd2\x04\xe6\x83\x36\x2f\x9e\x38\xd5\xfb\xf9\x5d\xd0\xd2\xbd\x71\x75\xec\xbe\x19\xd6\x4d\xae\x3f\x4d\xb8\x29\x3c\x4b\x53\x91\x0f\x00\x4c\xa5\xfe\xca\x84\x0d\xfe\xaf\x26\xfc\xc7\xeb\x0f\x1b\x0e\x49\x6c\xb8\x52\xa9\x23\x1e\x39\x63\xf4\xc2\xb2\x36\x7c\x97\x41\x60\xd8\xa6\x6d\xd9\xb3\xe5\x74\x56\x84\x98\x23\xf1\x55\xab\x7b\x86\x05\x7c\x7d\x3a\x45\x89\xd6\x65\x39\xdc\x3b\x4a\x21\x04\x0e\x8e\xd2\x2a\x25\x2a\x76\xd4\xc8\x2c\x34\x30\x9d\xf0\x20\x41\x1f\x7a\xce\x1c\x57\xf7\x03\xd1\x8c\x5b\x97\x2b\xb2\x95\xc1\x27\xa0\x24\xf5\xe6\x8c\x88\xa8\x4a\x07\xaa\x2f\xf9\xba\x3d\xff\xd8\xa5\x93\xa2\x05\x52\x64\x6a\xab\xa6\x91\x48\xa4\x3b\xdc\xd5\x63\x08\xc5\x2f\x63\x39\xa5\x70\x55\xc4\x6a\x0c\x39\x9e\xc5\x55\x01\xd3\xd1\xe5\x4d\x50\x5c\xea\xa1\xf8\x06\xb2\x11\xd0\xbb\xaf\xf4\xfb\x41\x4f\xd1\x2b\x83\x4a\x86\xb0\x6e\x36\x62\x0f\x70\x4c\xb9\xf5\x01\x38\x4e\xc8\xa6\xb4\xf9\xe9\x6b\x73\x0d\x87\x51\xd3\xfc\x69\xe6\x21\x23\xcc\x62\xd0\xfd\x5b\x7b\x6b\x04\x3e\xe5\x52\xf2\xaf\xf6\xa5\x0e\xce\x8c\xf4\x9b\xb4\x25\x86\x80\x6e\x0f\x67\xea\xb8\x06\xe3\x6b\x87\xf7\xb5\xf3\xa5\x7d\xf1\xf3\x63\x3e\xe8\x41\x9f\x0f\xc6\x1f\x8f\xf5\xfa\x5a\x5b\xa1\xf5\x7d\x82\xd6\x5c\x41\xbf\x4d\x11\x79\xc4\x6a\x2b\x6a\x6b\x2f\xf8\xb4\x43\xe3\x1c\x38\xa1\x2c\x70\xab\x5a\x09\xf2\x6d\x41\xd9\x68\xcb\x3c\x42\x6b\x99\x54\x32\xd1\xc6\x3a\x55\xe0\x98\x64\x7a\x31\x57\xf3\x49\xd9\x7f\xb0\x1c\xf1\x1a\xa0\x7c\x80\x0b\x00\xb0\xdc\xff\xd2\xfb\x90\x18\x80\xc1\xfd\xf1\x23\x70\x09\x0d\xb7\x23\x75\xc4\x2d\x66\x36\xa5\xf9\x82\x6d\xef\x4e\xbb\x0d\x41\x9c\x8c\xab\xb2\x78\xb9\xbb\xcd\xd4\x9c\x22\x91\x5b\xa1\x31\xba\x7a\xa2\x36\x6e\xf4\xa0\xc5\x1d\x8b\x64\xad\x4d\x03\x91\x32\x0c\x29\xef\x19\xda\x91\x79\x59\xa8\xbb\x5c\x53\x20\x39\x32\x43\x21\xc4\xee\x93\xa7\x97\x63\xa7\xda\x23\x54\xda\x7e\xe3\x93\x17\xa8\x6c\xc4\xd5\x95\x86\x69\x21\x40\x5b\xb5\x2b\xca\x91\x57\xef\x51\x36\x3c\x2e\x6f\x38\xc2\x61\x6e\xdb\x42\x8b\xc9\x12\xdc\xbd\xe7\xdd\xfb\x43\xcf\x65\xcf\x1f\x6b\x46\x46\x5e\xab\xbf\x2c\x9c\x10\x66\xe6\xb5\xc9\xaa\xcf\x1a\xb1\x18\xb3\xcd\x88\xa1\xcf\xbd\xee\xef\x35\xfe\xb3\xfb\x68\x55\x68\x36\x05\x00\x80\xe5\xdf\x49\x96\x8b\x5b\x0a\xf8\xcf\xfe\x7f\xa4\x5c\xd1\xff\x32\x91\x1f\x29\xfb\xd7\x93\x3f\x32\x86\xca\x4f\xa7\xee\xfc\x6f\x99\xf8\xd7\x90\x3f\x6e\xcc\xd1\x9f\x42\x5a\xf2\xfc\x6d\x54\xf9\x35\xc9\x8f\x5a\x30\xf8\x29\x49\xa7\xe0\xff\x63\x15\x7f\x4d\xf3\xe3\xd0\x7f\xee\xc5\x51\xf8\x6f\xcb\xec\x9c\x35\x1f\xff\x3f\x43\xf0\x01\x7c\x40\x3d\x17\x00\x20\x44\xfe\xf9\xf5\x6f\x01\x00\x00\xff\xff\xf8\x05\x6b\x6a\x2a\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3370, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x61, 0xf8, 0xe3, 0x4e, 0x95, 0x81, 0x3b, 0xa9, 0xf5, 0x4d, 0xc2, 0xbd, 0x3b, 0x3e, 0x24, 0x35, 0x78, 0x37, 0x38, 0xeb, 0xa, 0xd6, 0x7f, 0x65, 0x66, 0xf5, 0xc4, 0x15, 0x94, 0xbb, 0x95}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
