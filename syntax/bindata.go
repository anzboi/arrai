// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.367kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x3c\xd4\xeb\xbf\xff\x2a\xfb\x52\x64\xab\x2c\x59\xb2\x36\x8c\x28\xfb\x5a\x42\x63\xa8\xb1\x45\x89\x2c\xc3\xcc\x34\xd3\xc8\x10\x63\x4b\x18\x4b\x89\x1c\xeb\x28\x35\xc9\xc8\x44\x4a\xa2\x30\x99\x2c\x15\x33\xcc\x58\x43\x61\x6c\x65\x4f\x8e\x5d\x96\xfb\x3a\xe7\xdc\x73\x6e\x75\x5f\xf7\xdc\x7b\xcf\xef\xf7\xfc\xf3\xbc\x9e\x3f\x3e\xeb\xf3\xfe\xbc\x3f\xef\xd3\xb6\x3b\x39\xc5\x00\x5e\x80\x17\xf8\xf9\x08\x02\x00\xe0\x83\xbd\xe4\x87\xf4\xd7\xf4\x0a\x0c\xf4\x42\x76\x34\xd9\xb5\xb4\xdc\x00\xd3\x59\xe0\x32\x87\xd3\x10\x16\xa8\x59\xd5\xae\xc3\x96\xc9\xea\x3e\x05\x52\xef\xb0\x6b\xe1\x84\x25\x11\x21\x86\xfc\x17\x9c\x91\x44\x03\x8a\x0b\x3f\x64\xbd\x6a\x4d\x8d\x6c\x40\x59\xd7\x77\x9a\x96\x3c\xf3\x39\xf3\xa0\xcb\x84\x64\x76\xc1\x98\xaf\xb2\x85\x9a\x49\xa2\x45\x6e\x34\x00\x00\xdb\xdb\xa7\x6d\x79\x78\xd5\x5c\x6c\x26\x1c\x00\x00\xc0\x02\x00\xf0\x3f\xe7\xa2\x04\x00\x00\x06\xeb\x1b\x8c\x86\x83\xfd\x91\x41\x88\x60\x6f\x4d\x1f\x2c\x06\xec\x15\x18\xa8\xe1\x85\x04\xff\x9e\x1d\xd8\x1f\xab\x89\xc1\xfa\x46\x64\xd8\xe5\xde\xd6\x12\x8c\xef\x69\x55\x73\xad\x14\xd8\x60\x9d\x92\x98\x2d\x3d\xb5\x5b\x4b\x45\xd8\x2a\x5a\xa5\xb1\xb0\xde\xf7\x98\x3d\x3b\xa1\x8d\xc9\x59\xa8\x73\x08\xbc\x38\xd9\xed\x7f\x72\xd9\xa0\xcb\x31\xf5\xe4\xb4\xb7\x9e\x73\x4b\xbc\x0e\x4f\xbe\x58\x7f\x60\xb4\x91\xf4\x87\x5b\x36\xca\x4b\xc3\xe6\xfa\x8b\x17\xf4\xe8\x97\x11\x05\x9f\xdb\xe4\x08\x63\x0a\x44\x3f\xb7\x5f\x37\xdf\x71\x7f\xc2\x22\xb9\xb6\x16\x0b\x61\x2d\xa0\x22\x76\xba\x22\xb4\x56\xb6\xd6\x38\x31\x58\x33\x6a\x7d\x35\x6e\x59\x92\x80\xb4\xb9\x67\x8f\xdb\xdd\x38\x8f\x2a\x0b\xd1\x1b\x93\xcc\x74\x17\xeb\x84\xa2\x7f\x21\x59\x4b\xd5\x04\xc4\xa7\x89\xee\xca\x70\xe7\x14\x85\x16\x40\x54\xe5\x9f\xd3\xe3\x0e\x43\xc4\x29\x69\xe4\x34\xc8\x11\xbc\x17\xba\x1e\x3f\x12\x31\xcb\x8b\xe9\xcf\xdf\x22\xca\xd8\xcf\xd2\x61\xa8\x43\xae\x52\x9d\xa7\x5f\xde\xf7\x14\xd3\xfe\x58\xe3\x26\x2e\x93\x3c\xb0\x67\x5b\xce\xf8\x74\xe2\x70\x2b\x05\x44\x80\x41\xc4\x0a\x9b\x9e\x39\x1d\xb5\x23\x1c\x75\x49\xec\xbb\x8a\xf3\x54\x67\x83\x28\x67\x67\x7a\x2b\x6b\x5a\x6d\xee\x08\x4f\x0d\xe2\xfb\x87\x70\xf7\xc9\x2e\x6b\x31\x66\x12\x8f\x8e\xc1\x51\x8e\x23\xca\xaf\x84\xd4\xf6\x70\xed\x5f\x0b\x03\x95\xff\x02\xfd\x72\x64\x6c\x5d\x76\x55\xc0\xc5\xe7\xa9\x4a\xf2\x8d\xa6\xa7\x98\x74\xe9\x50\xa9\x30\xe3\xd8\x71\x9f\x83\x02\xa3\x03\x74\xd9\xe0\xf8\xbd\x9b\x0e\x5d\x37\x85\x47\xa9\xd5\x99\xe7\x3a\x02\x50\x9e\xad\xbc\x57\xfa\x45\x26\xf6\xcd\x0a\x85\x85\x8c\x98\x5a\xf6\xb4\x14\xfb\xd9\xee\x3d\x7c\x45\x92\xa4\x0b\xca\xe4\x55\x6c\x2d\xce\xc6\x8c\x5b\x59\x77\x6a\xe5\x8f\x47\x22\x90\xd5\x6c\x63\xb6\xed\xa0\xc6\xba\xae\x34\xdf\x83\xd9\xc4\x84\xa9\xb5\xb0\x7b\xbb\x44\x0f\x94\xf6\x15\xeb\x8f\xbc\xdc\xef\x39\x85\x01\xeb\xc1\x76\x4a\x8e\x55\x86\x5c\xed\xf1\x18\x10\x22\xc8\x46\x30\x76\x54\x6c\xd0\x35\x5a\x1b\x46\x25\xd4\xe4\x21\x4a\x19\x19\x84\xa6\x8e\x16\x09\x7e\xba\xc3\x01\x01\x3e\x23\xc5\x54\x41\x5a\xf2\x57\x8e\x00\x31\x2b\x59\x3b\x24\xfd\xc8\x99\xb6\x23\xa4\x0a\x0a\xff\x26\x9f\xdc\x6b\x31\xa3\x0a\x1f\x55\xa5\x0a\x18\x3c\xb7\x5b\xbd\xd8\xe2\x98\xdb\x6d\xd6\xde\x51\xe3\x2f\x00\x51\x58\x99\x05\x3d\x7b\xbf\xa4\xa2\x9d\x9f\x84\x36\xe5\xb0\xa4\xbe\xad\x98\x0c\x4b\x8a\xab\xb4\x5e\x96\x43\xb4\xcf\xc9\xf6\x87\x39\xca\x27\xeb\x6a\x8b\x3b\x6b\x0c\xe5\x64\x02\xcf\x06\x25\xf1\x09\xf9\x75\x83\xe3\xb4\xd2\x85\x9a\xd5\x57\xf6\x47\x8f\xae\xa4\x5e\x8a\xdc\xf0\xd2\xaf\x68\xc1\x9b\x36\x54\xf9\xa7\x7a\xf6\xea\x92\xd2\x6f\x44\xe1\xb2\x19\x50\x08\xa6\xc0\x5e\xa4\x3d\x46\x4d\x0a\x74\x3d\x62\xf4\xcb\xc7\xe1\x53\x7f\x01\x37\x06\x67\x8e\xf3\xdb\x01\x00\x55\x5c\x7f\x07\x5c\xbd\xff\x1d\xb8\x38\xfc\xa5\x20\xaf\x50\x30\x2e\xc8\x17\x8d\xf4\x06\xfb\xa1\xbd\xfe\x73\xde\x4a\x5c\x5b\x71\xf9\x36\x62\x34\x96\xe7\x7c\x61\x3c\x7f\xeb\xf5\xbc\x70\xff\x2e\x27\xcc\x95\x94\x74\xc6\x7b\x0f\x6f\x97\xb3\xc8\x4c\x75\xce\x62\x0e\x1d\xb5\xf8\xed\xc8\xe9\x25\x1e\x52\x74\xce\x63\x6a\xac\x02\x35\xca\x93\xb6\x42\x60\x80\x76\x8f\x22\x36\xb9\x00\x39\x09\x03\x61\x65\xc2\x6e\xa8\x0d\x11\xb2\x61\x3a\xdf\xcb\x03\xa1\xf0\xe8\xb4\x95\xec\x3e\x8a\x6d\x2a\x7f\xd5\x74\x81\xdb\xa1\xcd\x2e\x4c\xdf\xaa\x4c\xae\x8e\xd6\x39\xa9\xf0\x75\x7f\xa1\xbb\x55\x82\x0a\xa3\xe8\x54\x5b\x89\xab\x68\xcf\x51\x28\xdb\xfc\x7a\xde\x2a\xd7\x39\xa2\x6c\xb4\x6d\xb3\xe2\x7a\xa5\x7d\x65\x45\xb4\xea\x37\x37\xe9\xf7\xc7\x3c\xa6\xdc\xec\x25\x7d\xeb\xb2\x86\x39\xcd\x26\xb5\x37\x1a\xce\x6d\xbc\x9d\x4b\xb2\x96\x98\xf9\x04\x9e\x5f\xd7\xce\xa3\x6a\x7e\x5d\xa9\xe7\x33\x0e\x1b\x5a\xf3\x63\x6b\x4f\x6f\x16\x81\xd4\x07\x40\xd9\xb0\x67\xb8\xc8\x80\x1e\xe4\xfe\xd1\x90\xfc\xc5\xaa\xcc\xcf\xca\x53\xa2\x48\xf0\x88\x62\xec\x27\x65\xbb\xca\xf6\xd2\xda\x8b\x7c\xe4\x29\x6b\xad\x72\x49\x8a\x20\xc1\x9d\xb6\x33\x32\x6e\x4d\x3a\x6b\x2c\xad\x4e\xf7\x73\xcd\xbd\x0d\xb9\x88\x50\xe3\xf9\x97\xc2\xeb\xcc\x7b\xd7\xd9\xd3\xbc\x27\x3e\x14\x9c\xec\xf5\x8e\x79\x96\x2d\x90\xa4\x15\xc4\x48\xe0\x3a\xa4\x5d\x2b\xda\x12\x3c\x9f\xfb\x4e\x84\xd5\x12\xac\x5a\x49\x4d\xc4\x2d\x09\xc0\xe0\xe6\xae\x3e\x69\xa6\x9f\x63\x4d\x47\x62\x45\xfc\x4f\xe1\xb7\x48\x7e\xbe\xd4\x5b\x64\x16\xea\x53\xf4\xfa\x73\xbb\xa9\x8e\x5c\x8e\x52\x23\xb9\xe7\x53\xfd\x91\x13\xfd\x97\x63\x06\x1f\xb0\xde\x19\x43\xd2\x93\x85\xf6\x4f\x67\x70\xdf\x5d\x8b\xb0\x89\x27\x4f\x76\xa9\x51\x82\x1f\x05\x42\x1e\x6d\x5c\xab\x31\x0a\xd8\x71\xa0\x70\xd9\x4a\x7c\x48\x67\x71\x6f\x2d\x13\xaa\x20\x9f\x2e\xa0\x09\x55\x26\xdd\x75\x62\x6a\x05\x64\x15\xf1\x41\xa7\x4b\x44\x6f\x19\x9e\xb5\x47\xee\x53\x9f\xab\x1e\x18\xf8\xba\x94\xe6\xe8\xc0\x45\x0f\xfe\x12\x5d\x06\xef\x82\xf3\xed\x1f\x4a\x71\xf7\x3b\xb6\x9c\xcd\x9d\xf5\x06\x72\xc6\x12\xc1\xc8\x07\xa9\x91\x33\xed\x09\xe2\x3b\xbb\xd1\x89\xa2\x39\x0f\x13\x14\x18\x5e\x1a\xd1\xc7\xf7\x62\x84\x21\x9a\xec\x48\x9b\x0e\x2a\x77\x29\x3f\x75\xea\xfe\x03\xf8\xed\xd7\x82\x59\x2a\xb2\x0d\x81\xe0\xd0\xde\x73\xa4\x0a\xa5\x26\x0e\x25\x89\xb1\x47\x94\xc6\xcc\x15\xa2\xae\x5b\x9e\x21\x9c\xb9\xb8\xfc\x56\xea\xe6\x49\xa6\xe1\xce\x32\x42\x22\x79\x4a\x48\xe5\x39\xea\xed\x9b\xc3\xf1\xfb\xee\x84\x96\x38\xfe\x52\x74\x0a\x5b\x57\x69\xcc\xb4\xec\xd1\xb6\xa5\x3f\x9a\x26\x26\xe5\xdf\x4e\x44\x84\xb8\x3f\xec\x22\xce\xa1\xb6\x2d\xb9\x13\x14\x98\x0f\x7c\x40\x4e\x4f\xea\x73\x43\x20\xc6\x49\xd2\x27\x13\x69\x6d\x55\x74\xa1\xd2\xe7\x22\x05\xe2\xb1\x1d\x41\x42\xc1\x17\x72\x6a\xcc\x30\xdf\xd6\x60\xa8\xd4\x22\x8e\xa6\xdc\x4b\xdf\xae\x5e\xd3\x09\x3e\xbb\x62\x71\x53\xae\x68\xef\xd3\x6a\x98\x1e\x3a\xfc\xae\x49\x9f\x36\x0b\x2e\x4f\xe5\xa0\x7d\x0b\xca\x43\x22\x26\x8e\x9d\x39\x17\x4b\x4f\xfa\xe8\x4c\x02\x52\x6f\x92\xf9\x61\x9b\x73\x35\x7e\xac\x6a\xe6\x20\x1a\x40\x50\xd1\xf5\x6a\x65\x95\x40\xa7\xa5\x79\x35\xd7\xc3\xae\x9d\x54\xd9\xa7\x99\x8f\xad\xba\x51\x09\x81\x68\x73\x2f\xdb\x7d\x0a\xd8\x8f\x4e\x19\x77\x42\xa5\x09\xbd\x21\x22\x9b\x1e\x94\xee\x86\x6c\xa6\x89\x77\xc7\x8b\xd2\x13\x39\x2d\x75\x4e\x81\x87\xca\x8f\x1c\x37\xea\x56\x5e\x58\x5e\x58\xc0\x90\x3e\xce\x4d\xc1\x47\xb7\x6a\x0b\x56\x4e\xc8\xbe\x11\xcf\x54\x00\xe9\xc6\x04\x41\x3f\x28\x47\x61\x5c\xdc\xce\xe7\xc0\x5c\xee\xb2\xfb\x5c\x99\xe7\x97\x34\xfb\x37\xb8\xaf\x9a\x99\x99\xe8\x54\xec\xa9\xb3\xf0\xd5\x3f\x61\xc8\xfd\xa8\x2c\xda\x84\xc8\x38\xaf\xeb\xe0\xdf\xe4\x37\x8e\x06\x5b\x29\x36\xfb\xeb\xda\x56\x7c\x12\x39\x34\x01\x61\xc4\xbd\x0f\x0b\x13\x96\x6f\x39\x7b\x03\x85\x8b\x7a\x89\xf9\xb0\x90\x33\xb2\x54\xeb\x6f\xf8\x24\x6d\x52\x23\xa7\xaa\x5a\xb3\xd0\xc5\x9f\x61\x0f\x76\xb4\xf2\x15\x50\x8b\x49\x7d\x45\xf8\xa0\x9c\x33\xbd\x8c\xbd\xa1\xd5\xbb\xc3\xc2\x3f\xcc\x56\x86\x69\xf8\x78\xe6\x78\xb8\x2b\x38\xc3\x01\x7d\x64\xc8\xec\x69\x8c\xe0\x04\x4a\x7a\x77\x03\xc5\x35\xfe\x70\xa4\x85\xad\xb3\x0f\x03\x2f\x46\x4b\x89\xed\xeb\x33\x9b\x7f\x4c\xe6\x23\xfd\xba\xc1\x0d\x65\xe7\x47\xa4\x7a\x6c\xc4\x0e\xb0\x66\xc4\x08\xaf\x51\x6f\xf8\x95\xfc\xa8\x7d\x23\xce\xf0\x73\xba\x16\xce\x2d\xdd\x89\xfb\x3f\xd5\xa2\xd0\xa3\xb6\xf7\x3d\x54\xdc\x44\xcf\xc7\x0c\x7f\x65\xb5\x1e\x44\x21\x92\x93\x5d\x94\x5a\xa9\x73\xee\xa9\x85\x4a\x18\x95\xd4\x11\xa9\x99\xe7\x8b\xf9\x0a\xa4\x80\x74\x05\x86\x75\x40\x4d\xc1\x5b\x5b\xe3\x88\x49\xf2\x9e\x59\x21\xff\x2d\xa5\x9b\xef\x1a\x1c\x2e\x72\x4f\xf0\x52\x1a\xaf\x69\x89\x13\x73\x41\xe1\x51\xf5\x4b\x2c\xa8\x65\x0f\x45\xe4\x00\x1b\x01\x3a\xbf\x2f\x24\x6b\xa6\x46\xe5\x5b\xc0\x98\x11\xec\xc0\x74\x4e\xb6\x2f\xbb\xdc\x2e\xf9\xe3\xda\x95\x72\xc1\x02\xd3\x5e\x4e\x09\x06\xe5\xe6\x50\xa8\x2a\x28\x32\xba\x82\x70\x5f\xb3\xcf\xc6\xe7\x9d\x45\x82\xf3\x70\xe1\xf4\x82\x8e\x45\x2c\xae\xfb\x6c\xcf\x78\x21\x4b\xc8\xa5\xa4\x5a\xa6\xfe\x0a\x68\xa6\xdc\x4f\xa6\x2e\xc5\x88\x38\xf1\x7e\xdd\x90\xbb\xe1\x6b\xf8\x70\x37\x9f\x4e\xd7\x02\x16\xff\xf0\xc9\x0a\xb7\x74\xf3\x4d\x33\xc4\x0b\xac\x0c\x1e\xbf\x34\x6b\x64\xe5\x86\x37\xc9\xab\x34\xf3\x22\x66\x15\x7b\xb7\x61\x69\x22\xa8\xd5\x20\xdc\xb6\xc9\xc4\xa4\xde\x90\x17\xef\xda\x20\xf5\x6b\x51\xc6\x8b\x6d\x74\x50\x8f\x8c\xed\x04\x69\x55\x1c\x8e\xcf\x98\x89\x2a\xc2\x95\xe3\x08\xe5\x06\x6d\xef\x86\x27\x2d\xaa\xc3\x39\xa8\xb3\x04\x31\xf3\xa5\x6a\xfb\xdb\x26\x52\x5f\xbe\x44\x9b\xd6\xf7\xcc\xcd\xb8\x93\x79\x16\xf0\x9b\x9e\xc7\xad\x3b\x3f\x0d\xe2\x97\xd3\x27\x54\x51\xb2\x73\x8c\xab\x1c\x7f\x92\x70\x43\x74\x9e\xba\x1c\x17\x00\x98\x89\xfd\x1d\x09\x1b\xfc\x7f\x49\xf8\x8f\xeb\x0f\x1a\x8e\x48\xad\xbb\x54\xae\x25\x1c\x37\x67\xfc\xc6\xa6\x2a\x7a\x8f\x41\x48\xd4\x26\xec\xc9\xab\x95\x1c\x46\x8c\x90\x6b\xf0\xfb\x26\x8f\x5c\x4b\xbb\x6f\x33\x99\xf2\xe4\x36\x9b\x81\xce\x21\x22\x36\xa4\x77\x88\x5c\x2e\x52\xb6\xab\x52\x72\xb1\x8e\xe6\x86\x51\xe0\xf5\xaf\xce\x9f\xe7\x68\xbf\x27\x98\x7b\xed\x62\xd9\x5d\x45\xd0\x71\xc3\x58\xd5\xc6\xdc\x98\xf8\x72\x67\x52\x00\x21\xd4\x89\x7b\xfc\xc2\x09\xc1\x87\x62\x04\x52\x93\xba\xb1\x40\x9c\x87\x9d\xbb\x57\x9f\x1f\xb7\xa4\xcd\xb4\xcc\x65\x01\xc8\x38\x7c\x22\x8f\xa3\xcc\x4a\x4b\x9b\x33\x45\x6e\xb9\x83\x18\x10\xc2\x74\x31\xbc\xf5\x5e\xb7\x5b\xe1\x05\x62\xb5\x57\xde\xc8\xaa\x9d\xe9\xb2\x0f\xd0\x57\x6c\xba\x07\xba\xc1\x07\x2d\x6d\x7c\xf1\xc1\x42\xcd\x79\xc8\xac\x70\x86\x76\xd8\x18\xb9\x84\xbf\x7d\x4d\xaa\x92\x67\xec\x01\xb1\xf0\x72\x57\x56\xef\x1c\xbb\xdb\xb4\x39\x35\x42\xe1\xfa\xc0\x1d\x2d\xf7\x70\x4c\xd5\x80\x2c\x9d\x2b\xfb\x73\x60\x20\xed\x5e\x07\xc2\x31\x1c\x73\x2c\xc9\x67\xb6\xaa\x4c\xe3\xd7\x49\x72\x63\x59\xf5\x75\xa2\x40\x31\xa3\x99\xd2\x4c\x7f\x38\xb6\x4b\xed\x34\x28\xe5\x49\xc8\x56\x85\x3c\xf8\xcb\xa2\xa2\xf1\x96\x45\x8c\xc6\x4a\x6c\xc9\x64\x33\xc3\xfa\xa1\x6b\x9a\x99\xe7\x03\xf5\x67\x4f\xfe\xda\x87\xc1\x57\x00\xc5\x83\x1c\x00\x80\xda\xf1\x6f\xdd\x87\xc1\x41\x48\xf4\x1f\x1f\x81\x4e\xa9\xbb\x1e\xa7\x25\x6c\x39\xb7\x29\xce\x15\x0e\xbb\x35\x73\xbe\x0f\xec\x66\xf2\x3c\x8f\x73\x47\xbb\xb9\x8a\x5b\x1c\x7c\x2b\x32\x51\x5b\x47\x10\x7a\xbe\x1a\xbf\xb4\x6b\x89\xa0\xb1\x69\x20\xf0\x04\x19\x5b\xf0\x0a\xe1\x4a\xbb\xc8\xd7\xfe\x54\x9d\x27\x23\x2e\x57\x26\xc2\x61\xcc\xdb\xc7\xb5\x55\xa5\xd8\x2f\xfb\x80\xc9\x89\x33\x24\xa6\xcb\xe5\xd5\xba\x19\x3e\x40\x53\xb9\x2d\xde\x95\x53\xa7\xf8\xae\xdd\x8d\x82\x81\x18\xe7\xf9\x6d\x4b\x0d\x1a\x83\x57\x62\xdf\xe0\xf0\xe1\xd7\x7b\x1d\xf5\x1b\xe1\x71\x57\x6a\x2f\xf2\xa7\x44\x99\xfb\x6c\x32\x6a\xf3\xd8\x96\xe3\xb0\xdc\xc4\xea\xf9\x0f\xdd\x9d\x26\x7f\x56\x9f\xa0\x6c\x78\x97\x08\x00\xc0\xca\xef\x32\x96\x63\x87\x18\xf0\x5f\xf5\x7f\x2f\x71\x05\xff\x5b\x47\xbe\x97\xd8\x3f\x5b\x7e\xaf\x31\x94\x7e\xb0\x4a\xfe\xbf\x0a\xe2\x9f\x5d\x7e\x3f\x31\x7a\x3f\xb8\x3c\xb1\xf3\x1f\x4b\x95\x9f\x83\x7c\x8f\x05\x83\x1f\x82\xd0\x79\xff\x85\x51\xfc\x39\xcc\xf7\x4d\xff\xb1\x16\x67\xfe\x7f\x0c\xb3\xd3\xb6\x5c\xdc\xbf\xb9\xe0\x02\xb8\x80\x5a\x0e\x00\x70\x14\xf8\xed\xf5\x1f\x01\x00\x00\xff\xff\xc9\x7f\xd5\xf3\x27\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3367, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0xd7, 0xdc, 0x29, 0xd2, 0xc1, 0xfc, 0x93, 0x6f, 0xba, 0xa, 0x62, 0x74, 0x0, 0xf9, 0x78, 0x7f, 0x97, 0x90, 0xbf, 0x39, 0xbe, 0xeb, 0x23, 0xfd, 0xc3, 0xd6, 0x36, 0xd5, 0x6c, 0xd9, 0x35}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
