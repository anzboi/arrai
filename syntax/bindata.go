// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.361kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x67\x58\x53\x69\x9b\xc7\x0f\x2d\x74\x11\xa5\x58\x40\x29\x52\x0d\x04\x41\x41\x9a\x80\xd2\x4c\x28\x86\xde\x25\x42\x42\x82\x89\x41\x8a\x80\x14\x31\x10\x40\xa4\xc8\x4b\x0d\x4a\x11\x69\x41\x14\x11\x44\x09\x91\x08\x41\x05\x82\x09\xd2\x41\x11\xc4\x42\x0b\x02\x43\x93\xbe\xd7\x3b\xb3\xb3\xab\xee\xb5\xb3\xbb\xb3\xef\xf9\x72\xae\xf3\xe1\xb9\xdb\xf9\xdf\xff\xe7\x77\x0e\xc6\xc5\x2d\x06\xf0\x01\x7c\xc0\xaf\x8f\x10\x00\x00\x3e\xf8\x4b\x28\x8c\x9f\x3a\x22\x30\x10\x81\xe9\x6e\xb3\xee\xec\xbc\x09\xe9\x60\x41\x6a\xec\xce\x41\x59\xe0\x76\x65\xeb\x6e\x18\x93\xd5\x67\x0b\x56\xed\xb6\xee\xe4\x86\xdf\x20\x41\xf5\x04\xbc\x1d\x31\x24\x5d\xb2\x93\x00\x74\xbd\x61\x4d\xa5\x54\x97\xbc\x7e\xd2\x61\x46\xd2\xf9\x6b\xd6\x11\xa7\x49\xc9\x9c\x92\xcf\xbe\x8a\x26\x2a\x86\x89\x26\x79\x31\x00\x00\xec\xec\x9c\x83\xf1\xf2\xa9\x38\x59\x4e\xda\x01\x00\x80\x07\x00\xe0\xbf\xaf\x45\x01\x00\x00\x1c\xde\x37\x04\x8b\x84\xf8\x61\x82\xd1\x21\x17\xd4\x7d\xf0\x38\x08\x22\x30\x50\x0d\x81\x81\xfc\x5e\x1d\xc4\x0f\xaf\x8e\xc3\xfb\xc6\x65\x32\xae\xd6\x69\x0b\xc5\x0f\xe4\xdf\xf7\x1e\x52\x9f\x27\xd1\xc1\xc3\x9e\x85\x5e\x2f\xae\xf1\xb4\xf0\x05\xc4\xd7\x90\x35\x32\x34\x9c\x47\x13\xee\x5a\xbf\x2a\x69\xa7\xfd\x76\xba\xd0\x2b\x2a\xdb\xf7\xfc\x99\xc6\xe4\xdc\x65\xf5\x5d\x30\x3a\xf6\x59\xa0\x4c\x47\x33\x8e\xf7\x59\x0f\x59\x84\xe4\x6b\x57\x68\x13\xd7\xc3\xa7\x0d\x67\xda\x2b\x9d\x48\xd8\xa5\xe2\xab\xd3\x7e\xfc\xe8\xe3\xd1\x1d\xcb\x73\xdb\x05\x3a\x63\x90\xc3\x07\x5e\x76\xc6\xaf\x47\x5c\x8e\x1b\xaa\x2e\x3f\x5f\xd0\x4a\x11\xbb\xb6\xfe\x9d\x6b\xf6\xbc\x58\xb6\xca\xce\x65\x57\x0b\x99\x54\xbc\x84\x45\xa8\x45\xb4\xfd\x90\xf5\xb1\x37\xa6\xff\xe0\x96\x1f\x3e\x19\x77\xb4\xf3\x4e\x40\x31\x5b\x31\xd7\x5b\xce\xf9\x34\xff\x5d\x47\xd9\x64\x78\x65\x47\x4a\x55\x8a\x43\xf1\xd1\xa3\x3e\x5a\x4c\xad\x09\x77\x0b\xb4\x4f\xd2\x3a\x8b\x1d\x3c\x15\x9a\x6a\x47\xf6\xc6\x5b\x59\x7c\x4c\x8d\xb6\x6f\x1b\x9f\x44\x39\x0b\x69\x88\xb8\x6f\xde\x9c\x37\x95\x8d\x17\x29\x7f\x2c\x61\xae\x02\x27\x55\x2a\x07\xf6\x85\x08\xd7\x0f\xca\x48\xec\xdc\xde\x18\xfe\x7e\x09\xd6\x37\xfe\xa2\x9e\x1e\x65\x36\x1e\xd7\x95\xca\xf4\x21\x40\x88\xd9\x6e\x59\x07\xb7\x3d\xc8\xa0\x2c\x8c\x75\xca\xd9\xab\x87\x03\x8f\x08\x1c\x5f\xdc\x1a\x44\x29\x90\x0c\xd0\x6d\x29\xf2\xf3\xce\xd8\xaf\xde\x90\x7d\x3a\xe9\x08\x4c\x86\x54\xd8\x41\x73\x2a\x61\x22\xe8\x88\xe0\x22\x3d\xc9\x57\x0f\xee\x29\x6b\x4e\x13\x0f\xd1\x6a\x7d\xf6\xed\x12\x12\x9a\xa7\xbe\xd5\xb8\xbf\x99\xc9\xab\xb5\x44\x58\xd9\x75\xaf\x31\xe0\x70\xf1\x4c\xbf\x67\xc6\x1e\x54\x32\x5d\xb8\x42\xc4\x5d\xa1\xc5\x72\xe6\x9b\xc2\xec\x7b\x36\x9a\x84\x5a\x8a\x14\x32\x54\x4b\xbb\x9d\x63\xd1\x5e\x6e\x66\x4b\x4f\xd7\x18\xbe\x1e\x86\xf6\xfa\x70\xa8\x07\x31\xce\x38\x11\x21\x69\x71\x27\xf4\x93\xfb\xf3\xa5\x40\xc1\x90\x80\x33\x97\x2c\x56\xe7\x86\xef\x27\xdc\xd5\x20\xcc\xb9\x16\x15\xd0\x2e\xc3\x66\x96\xa8\x66\xd0\x44\x37\x7e\x05\xa4\x42\x12\xf5\x51\x16\x81\xd2\x3f\x01\x6d\x69\x6e\xd3\xa2\xe3\xe5\x23\x39\xef\x10\xd3\xfd\xec\x6f\xeb\x41\xc4\x83\xa5\xd1\xb8\x3c\xe8\x35\x2e\xbe\x47\xad\x26\xd2\xfb\xa0\x67\x71\x0e\xf9\x92\x0f\x54\xdd\x6e\x9d\x7b\xfa\x55\xff\x15\x95\xc9\x6b\x2c\x1b\xa7\x22\x98\xa1\xa3\xec\x8e\xab\xe3\xac\x68\x94\x97\x59\x92\x7f\xac\x64\x93\xb6\x3d\x5f\xb5\xb2\xc1\x87\xa8\x4b\x6f\x40\xbb\x71\x4c\x14\x83\x6e\xcd\xda\xc2\x8f\x0f\xbd\xce\x5c\xdd\xda\x11\xbb\xd6\x8b\xc9\xfe\xb6\x90\x3f\x6b\x6b\x60\x95\x53\xa0\xcb\x72\x7e\x96\xca\x5e\xbb\x07\xe5\xd2\x6b\x9c\x12\x09\x2d\x05\x97\xf4\x9a\x4f\x4b\x89\xaa\xe5\x52\xe8\x95\xaa\x7b\x43\x69\xf9\xdb\xfc\x7f\x4a\x56\x0d\xc1\x2b\xe0\xcd\x09\x00\x85\x3c\x7f\x25\x59\x9d\xff\x59\xb2\x41\xe1\x97\x82\x11\x61\x90\xa0\x60\x5f\x2c\xe6\x02\x04\x85\x45\xfc\xfb\xa6\x55\xb9\xbc\x09\x2a\xb6\x14\xa3\xb1\xce\x2f\x94\xc5\x0b\xbc\x49\xca\x8f\xf0\xeb\x75\xc0\x5d\x49\xcd\x60\xf4\x7b\x5d\x70\x72\xc3\x64\xa9\x72\xdf\xe7\xd0\x52\x89\xdf\x89\x9a\x59\xe6\x2d\x8a\xc9\x7d\x40\x8d\x95\xa3\x46\x9f\xa7\xad\x12\x19\x60\x91\x4f\xe8\x2d\x1e\x40\x46\x42\x77\xb7\x22\x51\xc4\xca\x92\x04\xdd\x3c\xb5\x30\xc8\x0b\x25\xf3\x6a\x75\x55\x89\x9c\xc0\xb7\xd5\x3e\x6f\xf3\x06\xd9\x75\x59\x5f\x3d\x69\x5e\x23\xd3\x4c\xeb\x99\x92\x9b\x3f\x50\xe6\x61\x9e\xa0\xc4\xa8\xb0\xed\xaa\x72\xd9\x3b\x70\xc2\x6a\xd4\x38\x29\xff\x3b\x8f\x3b\xe9\x50\x0c\xac\x5d\x7e\xbd\xde\xa6\xfe\x49\x8c\xf2\x86\xab\x54\xff\x69\xaf\x69\x57\x1b\x49\xdf\xe6\xec\x8f\xdc\x46\x53\x9a\x9b\x74\xf7\xcd\x57\x73\x37\x2c\x24\xd8\x5f\x20\x0b\xeb\x9a\xf9\x54\xf5\xf9\xd5\x16\x7e\x83\xab\x63\x6b\xa8\x51\xcd\x99\xad\x0a\xb0\xea\x08\x38\x07\xfe\x38\x28\x2a\x60\x00\x73\xe0\x53\x68\xf1\x52\x43\xd6\x57\xc5\xe9\xbd\x18\xc8\xb8\x7c\xec\x17\x45\xeb\xfa\xb7\x0f\x9b\x2e\xf2\x97\x4e\x5b\x68\xd4\x4a\x92\x85\x88\x1e\x34\xae\xa8\xb8\x35\xa9\xec\xcf\xe9\xcd\xda\x5f\x1b\x0b\x37\x65\x22\xc3\x0c\x16\x9e\xed\x5e\x67\x16\x26\x8d\xce\xf0\x99\x0d\x97\x9c\x1d\xbc\x40\x78\x9c\x23\x78\x43\x23\x98\x91\xc0\x73\x54\xb3\x69\x6f\x67\xc8\x42\xde\x6b\x51\x56\x67\x88\x72\x3d\x35\x31\x68\x59\x10\x8e\x34\x76\xf1\x49\x3f\xf5\x35\xf6\xd4\x78\xac\xa8\x9f\x6d\xf8\x76\x11\xca\x97\x7a\xab\x94\xe5\xff\x25\x66\xbd\xce\x7a\xba\x3b\x8f\xe3\xa1\xbe\x4c\xdd\xf4\xfb\xa8\xc9\xf7\x97\x09\x1f\xee\xb1\x5e\x1b\x40\x33\x92\x85\x0f\xcc\x64\x82\x0a\xd6\x22\x2d\xe3\x4b\xa7\x7a\x55\xc8\x21\x95\x81\xd0\xca\xcd\xeb\x8d\xfa\x01\x9c\x87\xcb\x56\xcc\xc5\xc7\xb4\x96\xf6\x35\x31\xad\xe4\x64\x33\x04\xd5\xad\x14\x8b\x0a\x1c\x98\x1a\x01\xd9\x15\xfc\x56\x33\x55\x7b\x6f\xe9\xb9\xd9\x60\xf6\xab\xce\x51\x46\x46\xe6\x97\xd3\xed\xed\x78\x3a\x42\xbe\xc5\xd4\x20\x7b\x91\xfc\x07\xc6\x52\x3d\x50\xa7\x57\x72\x40\xd9\x2f\xa1\xce\xa6\x68\x46\x31\x58\xa5\x34\xcb\x86\x28\xce\xd5\x87\x4d\xdc\x9b\x5b\x9e\x20\xc7\x40\xa8\xc5\x9c\xd9\x87\xdb\x0d\x55\x1f\x8d\xb2\xec\xa6\x82\x1e\x0a\x50\xa7\xef\xde\x43\xde\x7e\x21\x94\xad\x74\x88\x1e\x08\x09\x1b\x74\x2f\x7a\xa2\xd0\xc6\xa1\x20\xf1\xb9\x92\xdc\x9a\xb5\x4a\xd2\x76\xcd\xd7\x43\x32\x97\x56\x5e\x1d\x4c\x39\xcb\xd4\xe3\xaa\x21\x26\x96\x4e\x0b\x2b\xd5\xf9\xbf\x7a\x79\x2c\x7e\xff\x9d\xb0\x2a\xfb\x7f\x54\xd8\xe2\x9b\xeb\x0d\x98\xa6\x03\x9a\xb0\x8e\xca\x19\xd2\x8d\xe2\xdb\x89\xe8\x50\x8f\xf2\x5e\xd2\x9c\xff\x8e\x29\x28\x41\x8e\x79\xcf\x07\xec\x50\xdd\x92\x17\x0a\x35\xb8\x21\x75\x36\x91\xd6\xd5\xd0\x21\xfc\xb0\x4e\xb4\x44\x3c\xb6\x3b\x58\x38\xc4\x3b\xb7\xd1\x08\xb7\xb1\x06\xf7\x4f\xab\xe0\x68\xcb\xbb\xb4\x71\xed\xba\x56\x88\xdb\xaa\x49\x8a\x4c\xc5\xbe\x47\x14\xb8\x0e\x36\xa2\xc0\x70\x48\x93\x85\x94\xa5\x72\xd0\x36\x82\xf3\x31\xe8\xc9\xd3\xce\xee\xb1\x1d\x37\xde\x39\x16\x01\x69\x29\xa5\x02\xf0\xad\xb9\x46\x14\x8b\xc2\xfc\x80\x05\xd0\x54\x6c\x8b\x4a\x4d\x3d\xd0\x63\x6a\x4c\xe1\x29\xef\xe5\xa2\x1e\x7a\x94\xf5\xc0\xbc\xcf\x3f\x21\x10\x6b\x8c\x80\xed\x97\xc3\xbf\x73\xc8\xbc\x13\x26\x45\x1c\x0c\x15\xdd\xf2\x22\xf7\xd1\x73\x98\x86\x17\xba\x9f\x3e\x34\xcb\xed\x6c\x76\x08\x3c\x5a\x7b\xfc\x8c\x7e\x9f\xe2\xe2\xca\xe2\x22\xae\xe8\xdd\xdc\x34\xf2\xd3\x76\x53\xc9\xaa\xd9\xa1\x97\xe2\x59\x72\x60\x6d\x42\xb0\xd5\xb0\x62\x34\xce\xc9\xd5\x33\x17\xee\x54\x30\x3a\xe4\xc2\xf4\x5c\x56\x7f\xbf\x09\xba\x66\x64\x64\xa8\xf5\x64\x4f\xb3\x89\xef\x49\x33\x3d\x50\x65\x4d\x8c\x21\x89\xe1\xa9\x6d\xe7\xd7\x86\x9a\xc0\x42\xcc\xe5\xdb\xfd\xb4\x61\x4f\xbe\x88\x1e\x9d\x84\x32\xe2\xfa\xaf\x5e\xdd\x2d\xdb\xe9\x76\xd3\x3f\x28\xfa\x19\x6e\x78\x31\x77\x7c\xb9\xc9\x4f\xaf\x3a\x7d\x4a\x2d\xb7\x81\xa2\x5e\xe6\xe4\xc7\xb0\x81\xd8\x9b\xfb\x0a\xaa\x10\xd2\x9e\x13\x87\x15\x73\x67\x56\xf0\x37\x35\x06\x39\x4d\xfc\xae\xc2\xa4\x99\x7a\x0f\xd8\x67\x22\x5c\x20\x99\x76\xd8\xe3\x63\x46\x8f\x08\x42\x93\xfe\x52\x22\x74\xb2\x4b\xfc\xb1\x28\x13\x98\xa3\x0f\x23\x5c\x8c\x96\x1a\x3b\x34\x64\xb4\xf0\xa0\x94\xbf\xe8\xb7\x4d\x90\xd5\x68\x71\x64\x9a\xd7\x66\xec\x08\x8b\x2d\x46\x7c\xe1\xff\x52\x40\x01\x45\x1d\x1a\x77\x44\xba\x6b\x9b\x38\x76\xf6\x25\x1e\xf8\xd2\xe4\x8f\xfd\x04\xbb\xeb\xa5\xe4\xba\xd7\x93\xf0\x71\x9e\xf5\xe6\x88\x3f\x3a\x39\xd9\x49\xe1\x0d\x75\xce\x23\xad\x4c\x01\xa7\x94\x36\x7e\x90\x5d\xb7\x54\x2c\x57\x14\x90\x21\xc7\xb0\x08\x68\x2c\x79\x05\x33\x88\x9c\x2a\xdd\x33\x2b\xec\xb7\xad\x90\xf2\x9a\x6e\x77\x11\x34\xc9\x47\x6e\xbd\xae\x21\x4e\xca\x03\x47\x44\xb7\x2c\xb3\xac\x4c\x07\xc8\xa2\x87\x47\xd1\x60\xcf\xfd\xa1\xd9\xec\x46\xa5\x8d\x80\xcf\xfa\xf0\xc3\x33\xb9\x39\xbe\xa3\xb5\xd6\xc9\xef\xd6\xae\xd4\x0a\x95\x9c\x1a\xe4\x96\x60\x90\x53\xc6\xc2\x94\xc1\x51\x31\x4f\x88\x77\xd5\x87\x2c\x7d\x5e\x9b\x24\x38\x7e\x2c\x9b\x59\xd4\x32\x89\x0d\xea\x73\x1b\x98\x28\x63\x09\x3b\x55\x51\xa4\x5b\xae\x80\xd9\xb5\x28\xe9\xe6\x54\x7d\xd2\x64\xff\xba\x1e\x88\x3e\x1f\xf1\xb1\x8f\x5f\xab\x77\x11\x1f\x5e\x5e\xbd\x0a\x92\x6a\x4f\x31\x42\x3f\xc5\x4b\x87\x87\x2f\xcf\xea\x9b\xbb\x86\x1b\xe6\xd7\x1b\x21\x48\xd9\xf7\x2f\x74\xe1\x69\xa2\xfe\xdf\x83\x83\x76\x0c\x27\xa7\x74\xc6\x10\x7c\x6b\x1f\xa8\xf3\x15\x99\x4f\x77\xb0\xc1\x03\xd2\xb0\xc9\xa2\xef\xe2\xc8\xf0\x4c\x76\x74\x45\x50\x6d\x10\xb1\x56\xb7\xeb\xf5\xc7\x29\x13\x4a\x04\x07\x75\x96\x28\x66\xbc\x4c\xb1\xb9\x6d\x78\xf0\xdb\xb7\x98\x53\x2d\x03\x73\x6c\x8f\x52\xde\xc5\xf0\xad\xf3\x67\x2c\x7a\xbe\x7c\x08\x5f\xc9\x98\x54\xf6\x3f\x34\xc7\xb8\xc6\xf1\xa7\x09\xd3\x63\xf2\x55\x65\x78\x00\xc0\x48\xec\xaf\x4c\x58\xf7\xff\x6a\xc2\x7f\xbc\xfe\xb0\xe1\xc8\xb4\xe6\x4b\xb5\x1a\xbb\xe3\xe6\x0c\x5e\x5a\x36\xc4\xec\xd1\x0d\x8d\xde\x82\x57\x3f\x5f\xcd\x65\x10\x84\x5d\x42\xfa\xdb\xbc\xf2\x4c\xad\x37\xd8\x59\xb2\xa5\x5d\x96\x23\x3d\x63\x24\x7c\xe8\xe0\x58\x69\xad\x68\xcd\xae\x7a\xc9\xa5\x66\x9a\x2b\x4e\x8e\xcf\x8f\x52\xbc\xc0\xf1\xb6\x50\x28\xef\xfa\xc5\x9a\x02\x79\xf0\x19\xbd\x58\xe5\xd6\x3c\x42\x7c\xad\x63\x51\x00\x31\xcc\x01\x34\xe1\x6d\x26\x54\x2e\x46\x2c\x6a\x53\x35\x10\x8c\xf3\xb2\xf6\x40\x0c\xa1\x40\x92\x96\x33\xd2\x97\x05\xa1\x13\xc8\xc9\x7c\x8e\x1a\x73\x0d\x4d\xee\x54\x99\x95\x6e\x52\x40\x28\xd3\x49\xef\x56\xbf\x76\x9f\xdc\x53\xf4\xf7\x41\x59\x7d\xf3\xb7\x4c\xa7\xfd\xc0\x49\xf9\xb6\x42\xf0\x4d\x7e\xab\x87\xad\x4f\x87\x4d\x54\x1c\xc7\x8c\xca\xd8\xb4\x63\x06\x98\xe5\xf0\xdb\xd7\x0f\xd6\xf3\x7e\xbe\x47\x2a\xbb\xdc\x9b\x3d\x38\x37\xda\x77\xaa\x3d\x2d\x52\x2e\x69\xe4\x8e\x86\x47\x04\xae\x61\xe4\x50\x07\x4f\xce\xd7\xc0\x40\x5a\x61\x37\xda\x3e\x02\x77\xfa\x86\xcf\x6c\x43\x8d\xda\x6f\x53\xa5\xad\x35\x94\x24\x92\xe0\x7d\x46\x3b\xb9\xbd\xa3\xfc\xf3\x2e\x95\x73\xe0\xd4\xea\xd0\xed\x27\xb2\x90\x6f\x4b\xf2\x06\xdb\x26\x04\xb5\xd5\xd8\xaa\xa9\x76\x86\x45\xb9\x4b\xba\xd1\xf9\x7b\xaa\x8f\xab\xff\x03\xe1\x42\xae\x00\xf2\x47\x38\x00\xc0\x9f\xf3\x5f\x7a\x1f\x86\x04\x63\xb0\x7f\xfc\x08\x6c\x6a\x73\x52\x9c\xc6\x6e\xd3\xb9\x2d\x71\x9e\x08\xf8\x2d\xb6\xe7\x10\xc4\xd5\xb0\x2e\x9f\x9b\xf3\xad\xb1\x92\x6b\x1c\x72\x3b\x2a\x51\x53\x4b\xc8\xca\x93\x12\xbe\xbc\x6b\x99\xa8\xb6\xa5\x2b\x58\x8d\x89\x2d\x79\x8e\x76\xa1\x5d\xe4\x7f\xfb\x48\x95\x37\x33\x2e\x4f\x3a\xd2\xee\xf3\x05\x1f\x97\x37\x4a\xf7\x51\x39\x87\x0d\xcd\x9c\x8b\x98\x4e\x97\xbf\x37\xb3\xf9\x01\x75\xc5\xae\x78\x17\x6e\xad\xfb\x05\xd6\x37\x4b\x46\x08\x8e\x0b\x3b\xa6\x6a\x34\x06\x9f\xc4\xfe\x0f\x1f\x8f\xbd\xd8\x67\x7f\xb2\x15\x19\x77\xa5\xe9\xa2\x40\x6a\xb4\xb1\xcf\x16\xa3\x29\x7f\xd4\x74\x02\x9e\x97\x48\x59\x18\xee\xeb\x31\xfc\xb3\xfb\x04\x45\xbd\x02\x12\x00\x00\xab\xbf\x03\x2c\x07\xa7\x18\xf0\x9f\xfd\xff\x08\xb7\x42\xff\x65\x22\x3f\xc2\xf5\xaf\x27\x7f\x64\x0c\x85\x9f\x4e\x25\xff\x6f\x51\xf8\xd7\x90\x3f\x6e\x8c\xce\x4f\x21\x8d\xb8\xfe\x36\xaa\xfc\x9a\xe4\x47\x2d\xe8\xfe\x94\xa4\x95\xef\xff\xb1\x8a\xbf\xa6\xf9\x71\xe8\x3f\xf7\x62\x2b\xf0\xb7\x65\x76\x0e\xc6\x03\xfa\x67\x08\x1e\x80\x07\x68\xe2\x00\x00\x6b\xc1\x7f\x7e\xfd\x5b\x00\x00\x00\xff\xff\xb0\x4a\x1a\xfe\x21\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3361, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0x46, 0xf, 0x83, 0x56, 0xfb, 0x23, 0xb0, 0x5e, 0x6d, 0x49, 0xb0, 0xd8, 0x18, 0x9c, 0x7e, 0xe7, 0x41, 0xe5, 0xc8, 0x99, 0x35, 0x90, 0x24, 0xf9, 0xb7, 0xf, 0x8e, 0xff, 0xe, 0x6c, 0x31}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
