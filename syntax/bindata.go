// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.397kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x79\x3c\x94\x7b\xdf\xc7\x2f\xc5\x58\x2b\x42\xc8\x52\x94\xb5\x61\x44\x89\xb1\x0c\x25\x9c\x19\x84\x18\xbb\x1a\x8c\x59\x1a\x46\x96\xec\x4b\x18\x4b\x0b\x79\xb2\x0d\x61\xc2\xd8\x52\x72\x88\x13\x13\x59\x12\x86\x21\xb2\x96\x50\x96\xb1\x64\xc9\x96\xfd\x79\x9d\x73\x9e\xf3\xdc\xd5\xfd\xba\xcf\x7d\xdf\xe7\xbe\xaf\x7f\xae\xd7\xf5\xc7\xef\xbb\x5d\x9f\xef\xe7\xf7\x36\x43\xec\x67\x15\x00\x38\x00\x0e\xe0\xc7\x87\x07\x00\x00\x17\xa2\x87\x1b\x0e\xa3\x84\xf2\xf2\x42\xe1\xba\x5b\x4c\xda\xdb\x6f\x43\xda\x3a\x21\x65\x16\x66\xf0\x4e\x70\xab\x9c\x49\x37\x82\xd1\xd9\x7b\x09\xac\xd0\x6d\xd2\xce\x6a\x1e\x47\x86\x43\xb9\xae\x5a\xe1\xc8\x1a\x45\x48\x2e\xf8\xe6\xf3\x0d\x79\xaa\x46\xd1\xa6\xba\xe5\xac\x90\xf5\x64\xf2\x49\x24\x53\x28\x35\x6f\xdc\x55\x46\x4f\x5e\x3b\x56\x2f\x3d\x1c\x00\x80\xbd\x3d\x33\x04\x3b\x87\x3c\xd2\x88\x69\x01\x00\x00\x11\x00\x80\x7f\x5c\x8b\x34\x00\x00\xee\x44\x57\x5f\x02\x1a\x82\xc1\xf9\x60\x7d\x9d\x95\x5c\x88\xee\x10\x94\x97\x97\x22\x0a\x07\xf9\xad\x3a\x08\x86\xa8\xe4\x4e\x74\x0d\x4e\xea\xa8\xce\x55\xe3\x89\xee\xef\xb0\x7a\x4a\x10\xfa\x6a\xd8\xbc\x0d\x1e\x72\xcc\x76\x7a\xe9\x70\x93\xc0\x8a\x3a\xaf\x9c\x6c\x32\x79\xd2\x7a\x24\x46\x59\x55\xd6\x33\x1f\x33\x41\xd2\x09\x09\x54\x6c\xad\x8d\xbe\x21\x22\x3f\x1b\xe3\xe3\xf4\x60\x71\x4c\x21\x51\xe3\x35\x4a\xdb\x53\x3d\x73\xf3\x1e\xee\x61\xc7\x74\xd3\x99\x04\xa6\x5f\x9b\xba\xdf\x90\xd1\x5c\xec\x85\x1b\x3d\x0d\x1c\x19\x3b\x1b\xfd\x0c\x7c\xe0\xf8\xc1\x02\x7a\x0d\x48\xbf\xcc\x6e\xa7\x86\xc7\x78\x70\xa1\x60\xc4\xa9\x29\xdf\x32\xec\xd2\x34\xf7\x46\x98\x3a\xd8\x7b\x77\xc2\xeb\x58\xa2\xf4\x8b\x80\xa3\x31\xec\xad\xa2\xae\xe7\x78\x0d\x0a\x1d\x0f\xc7\x8f\xf7\x68\x38\x9c\x86\xe7\x93\xcb\x33\x0e\xc3\x0b\xc5\x04\xe4\xd0\x2f\x8b\x73\x80\xc2\x2f\xe7\xfb\x49\xa0\xde\x64\xab\x31\x55\xf9\x72\x14\x9e\x5d\x26\x7b\x0d\x09\xbb\x3a\x85\xa8\xdb\x00\xe6\xd8\xec\x5d\xa0\x07\x0f\xa5\x23\x49\x1e\xf1\x67\x32\x3e\xde\x59\xa2\x35\xcf\x5e\x89\xc1\x1c\x94\xa7\xdd\x9f\xb1\x13\x04\x8a\x15\x14\xae\x79\x33\xa1\x86\x8a\x1a\x52\x5b\xf4\xf7\x44\x8f\x99\x3e\xcb\xfd\xec\xc4\xb0\xd0\xf7\x71\xd2\xfc\x95\x9f\x94\xdf\x30\x6a\x2d\x0d\x44\xe5\xac\xb7\xf2\xf7\x19\x9a\x55\x5c\x34\xa9\x59\xd1\x19\x6f\x12\x53\x6f\xfb\x6c\x83\xa1\x92\x74\xb0\xfe\xc2\x86\x49\x23\x2d\xaf\x46\x21\x49\x48\x73\xc9\x35\x93\xa3\x9e\x5f\x50\x79\xa7\x4c\x55\x64\xd6\x84\xb3\xe5\xec\xd2\x32\x67\x6e\xc9\x9b\x5c\x7b\x23\xe9\x0c\x5f\xbf\x8b\x5c\xc8\x9c\x44\xec\xf1\x1b\xc4\x4d\x02\x8d\x57\x5a\x61\x9e\x62\x4a\x5e\x5c\x38\xe6\x7c\x86\xdb\xc2\x4b\xc4\x1d\x31\xe7\x24\x0f\xfd\xb0\x69\x7f\xec\xd2\x6e\x48\x42\x85\xd9\x5e\x0d\x47\x62\xf7\x46\xf4\xfb\x18\xc1\x7b\xf2\x4b\x21\x35\x0d\xb5\x63\xd7\x47\xd1\xf1\x67\x5a\x4f\xaf\xd0\xb4\x44\x91\xc7\x84\x61\xb5\x09\x21\xea\xa7\xa5\xc3\xdc\x44\xde\xf7\x57\x4d\x99\xc1\x22\x37\x25\x4d\x05\xaa\xb6\xf0\xe6\xe2\xf7\x8e\xcc\x2f\x1a\x74\x27\x34\xae\xdb\x7b\x20\x0e\x1b\x3c\x08\xe4\xfb\x25\x95\xd8\xbd\x1c\x12\xea\xa8\x63\x56\x0c\x62\xb3\xb3\x6e\x9b\xec\xb3\x0e\xf7\x75\x4f\x87\x7f\x62\x19\xef\x75\xb1\x93\xdd\xeb\xd1\x3d\xc5\x8d\x4c\x06\x11\xc8\xb9\xcb\xa4\xb3\x14\x51\xaf\x35\xfe\xc8\x70\x04\xb4\xf1\x60\x8e\x39\x30\x24\x60\x36\x55\xc9\xf6\x2e\xa7\xb9\x5a\xb1\x5d\x56\x62\x49\xc2\x8f\x97\x5a\x9c\x7c\xb6\x59\x37\x1e\x7b\x2a\x86\xe1\x3b\x74\x26\x5b\xf8\x64\x20\xc2\xbe\x87\x7e\xf6\xf0\x66\x62\xd3\x6d\x4a\xc1\xf4\xa2\x69\x95\x14\xa5\xc4\xca\x6a\xbe\xed\x08\x74\x16\xda\x8b\xfc\x5c\xd6\xc2\x7e\x2a\x6b\xc7\x7b\xf7\x5d\xd8\xa2\xe4\x6e\xc9\xa7\x94\xf9\x0d\x58\x4a\x86\x5b\xed\x8a\x73\xda\xb8\x78\x69\xae\xff\xce\xc6\x1a\xcb\xfd\xe1\x76\xcd\x4c\x64\xb2\x07\x85\xa5\xe5\x76\x7e\x05\xe9\x55\x77\x61\xdb\x67\xe6\xae\xfa\x8e\xd0\x1f\xb2\xee\x3e\x9f\xe0\x11\xb5\x0f\x00\x16\xd9\xfe\x4c\xd6\xe7\xfe\xb9\xac\xbd\x03\x3c\x7c\x50\xfe\x10\x6f\x1f\x57\x02\xce\x19\xe2\x46\x40\xfd\xdf\x36\x96\xd8\x74\x78\xe7\x18\x09\xd4\x75\x5e\x59\xca\x8f\xe6\xea\xb8\x95\x19\x84\x79\x6b\xe9\x7e\x23\xfe\x3e\xbd\xcf\xc9\x19\x69\x87\x4b\x56\x60\x7d\xc4\xa2\x2a\x1f\xbd\x17\x32\xbb\xca\x4e\x09\x4f\x7b\x4c\x8b\x94\xa2\x85\x5e\xa9\x5b\x27\xd1\xc1\x87\x3e\x61\x77\xd8\x80\xe3\x47\x34\x78\x65\x48\x87\x8c\x8d\xc8\xf0\x6d\x9d\xa5\x01\x76\x78\x11\xbb\x6a\x57\xc9\xa1\xb3\xc4\x96\xf2\x17\x2d\x57\x41\x16\x5d\x26\x81\xea\x06\x65\xc7\xeb\xeb\x7a\xa6\xa5\x16\x8f\xe6\x3b\x18\xc4\xc8\xd2\x0b\x2f\x75\x95\xd8\xf0\xf7\x9f\x35\x1e\xd1\xbd\x95\xf9\x95\xcd\x9e\x2c\x11\x8e\x68\x3d\xb1\x59\x69\x5a\xf9\x2c\x5c\x6e\xcb\x56\xac\xef\xbc\xd3\x8c\xad\xa9\x90\x6b\x7d\xca\x18\x2b\x6c\x5a\x65\xbb\xd1\x7e\xbb\x79\x21\xce\xf0\xc8\xdc\x04\x64\x69\x53\x25\x93\xa6\xb4\xb8\xde\xc0\xa9\x15\x38\xba\xe1\x36\xa2\x32\xbb\x53\x08\x56\x18\x06\xa7\x9a\xff\xec\x1d\xe2\xd9\x8f\x3b\xfa\xc9\x2f\x67\xe5\x79\xf2\xa4\xcc\x0c\x3f\x0e\xf2\xf1\x44\xe4\x84\x8c\x49\xe5\x9b\x27\xb5\xd7\x38\xa9\x33\x86\xca\xe5\x42\x45\x3c\x24\x87\xba\xfd\x21\x51\x1b\x62\x29\xe3\x89\xf5\x6a\x93\x35\xd9\xdb\xc7\x83\xfd\xb5\x96\x7e\xe1\xdd\x64\x64\xdf\x1a\x99\xe5\xb8\x38\x94\xf7\xd3\x80\x73\xc4\xcf\xa9\xdc\x71\xca\x3e\xf4\x18\xb6\x53\x2a\xb5\xfc\xed\xbe\x4b\xe9\xaf\xf9\x3a\xdb\x7d\xe5\x2a\x69\xb1\xde\xab\xdc\xe6\x68\x5d\x1b\x97\x44\x9d\xc9\x48\x9d\x8f\x91\x7c\x98\x4b\x01\xbb\x14\x37\x57\xda\x3d\x6a\x27\x7e\x22\x7c\xb3\xc2\x64\xa6\x3b\x9d\xe5\x89\xe6\xf1\x8a\x99\xf7\x21\xcc\xf7\xd7\x23\x3e\xe4\x76\xbe\xd6\x82\xdf\xbf\x73\xe0\xe8\x6c\x12\x28\x6b\x23\xd8\x28\x9a\x3a\xfd\x56\xbe\xc8\xb7\xd8\x0b\x5e\xbc\x7d\xb3\x46\xd3\x73\xdf\xb1\xfc\x35\x03\xc1\x51\xd5\x15\xe1\x5a\x86\xb1\x94\xe4\x7d\x6e\x25\x63\x19\x4a\x96\x25\x43\xd9\x33\xa5\x90\xd3\x78\xb6\x84\xff\x1e\xd4\xce\x14\x27\xa2\xb0\x50\x3d\x3c\xbc\xb8\x9a\x78\xd9\x82\xad\xcd\x77\x3e\xbc\x0c\xfd\x16\xcd\x79\x74\x34\xde\xc1\xed\xfc\x5a\x2a\x28\xe5\x15\xdc\x5a\x1f\x4b\xcf\x01\xcb\x53\x93\x4d\x49\x82\xfb\x7b\x09\xb1\xfc\x69\x05\x31\x52\x74\x94\x62\xf8\x05\x61\x77\x5e\xb8\xd2\x48\x88\x51\x37\x0d\xf4\x84\x8b\x36\xf3\x30\x17\x9d\xf1\x92\x27\x45\x56\xa2\xd1\x0b\xe2\x3f\x60\x4f\x79\x26\xdd\xc2\x22\x7d\x64\xbc\xb8\xa8\x29\x79\x9d\xac\x66\x9b\x09\x45\x33\x56\xd6\x9a\x45\xef\xfe\xc4\x80\xee\x2f\x23\xc5\x52\x67\x0e\xc8\x56\xe0\x9b\x5f\x9d\x8e\x16\x79\xe0\x5f\x72\xf9\x7f\x0a\x2f\x11\xeb\x2b\xb5\x18\xfa\xfd\x2a\x88\xb6\xe2\x59\x72\x5c\x4e\x46\x2c\xd6\xcf\xa1\xe0\x2d\x79\x01\xbf\xa7\x0f\x8a\x91\x62\xe4\xba\x80\x2d\x4b\x1b\xd2\xfd\xe0\x5a\x71\x62\x3f\xc5\xd6\x75\x3d\x6f\x3b\xf0\xa4\x82\x2f\x4f\x30\xb2\xdb\xe7\x80\xef\xd5\xb4\x1a\x98\xfb\xd6\x86\x39\x3e\xa1\x90\xa5\x25\xdd\x63\x2b\xec\xa6\xaa\xaf\xdd\xba\xde\xdd\xe3\x85\xc2\x4f\xab\xcd\xcf\x11\x82\xb2\xb4\x07\x55\x3a\xd1\x92\x34\x96\xba\x2d\x9f\x4c\x1c\x96\x79\xde\xda\x3e\xb2\x2d\xee\x9d\x15\x05\x48\xb8\x4b\xe5\x32\xdf\x59\xa8\x71\xeb\xac\x66\x7c\x20\x00\x58\x1a\xa1\x41\xbe\xac\x12\xe8\xd1\xd7\xad\x66\x2b\x78\xbb\x9f\x26\xf1\x34\xf9\xb1\x41\x2f\x3e\xc6\x8b\xa0\x8b\x42\x88\x48\x11\xdf\x59\x26\x3d\xf0\x17\x23\x0d\xf8\xf1\xed\x38\x15\xf5\x36\xa6\x32\xb4\x9d\xbb\xab\x9e\x5c\x4c\x6b\xaf\xb7\xf4\x3a\x55\x7e\xe6\x82\x66\xaf\xcc\xf2\xda\xf2\xb2\x3b\xe5\xdd\xc2\x0c\xfa\xd3\x6e\x6d\xde\xfa\x45\x89\x57\x82\xc9\x52\x60\xb5\x08\x1f\xe3\x21\x99\x50\x77\xa4\xad\x63\x9a\x39\x32\x6b\x64\xd0\x86\xe1\xb8\xaa\xf4\x7e\x1b\x14\x06\x83\x69\xab\x3e\x3b\x5c\xaf\xe7\xaa\x7e\x11\x0a\x2a\x2e\x0b\xd7\x26\xd3\x1d\xd5\x2c\x30\x2d\x6e\x53\x04\x88\xc1\x89\x56\x8c\x1a\xe2\xd9\x04\xdf\x29\x26\x9c\x1e\xd5\x17\x18\xc8\x2b\xd9\x6e\x77\x1b\xef\x1d\xfa\x8b\xfb\xd0\x72\xda\xc7\xd5\x5a\x0c\xb4\x34\x71\x5a\x31\xed\x79\xb5\x52\x3e\x12\x43\x37\x85\x5c\x36\x70\xe5\x96\x8f\x48\x78\x41\x1a\x92\x49\x9b\x5d\x23\xde\x56\x1e\xd8\xa7\x87\x09\x44\x88\x33\xa0\x8f\xe7\x2e\x04\xd9\x40\x92\x2c\x08\x67\x46\x61\x4f\x23\x78\x98\x78\xb1\x43\x8d\x45\x36\xd1\xa7\x43\xf4\x10\x56\x2e\xf4\x00\x81\xba\xf8\xc8\xc1\x41\xd8\xd2\x63\x2a\x27\xe5\xcb\x36\xc8\x78\x24\x27\x38\xc1\x69\x3b\x72\xb8\x73\x4e\x80\xf4\x12\xff\x8a\x4b\xda\x8d\x36\xf8\xd1\x0a\x6d\xaf\xa6\x67\xd5\xde\x1b\x7b\x74\xa2\x16\x4f\xf8\x84\x78\xe8\x24\x6b\xcb\xef\x18\x31\xb6\xd8\xd9\x71\x12\x8f\xbd\x73\x07\x29\xdd\x41\x5b\x70\x48\xc8\x97\x76\x97\x4d\xf8\x28\x3a\x57\xb1\x92\x23\x45\xf1\xbc\x2f\x45\x37\xf4\xac\xc9\x6b\x46\x68\x05\x4f\x53\x0f\x7f\x3e\x80\xd9\x95\xbe\xfb\xba\xd1\xe2\x1a\x88\xc9\x51\xd4\x74\x53\x59\x90\x9c\x0e\x0e\x0a\x6d\x58\xed\x34\xd6\xef\x2f\xe2\x3b\x36\x82\x05\x3b\x8a\xf8\xa5\xcc\xd5\xc8\x6e\x79\x8e\x6b\x9a\x1f\x9b\x4d\x4b\x75\x1d\x29\x37\xb9\xf3\x6e\xe3\x46\x39\x4f\x9e\xce\x00\xeb\x11\x7a\xd1\xdd\x51\x7f\x39\x70\x48\xf8\x33\xd2\x43\xa5\x41\x23\x97\xd7\x7a\x31\x56\x63\xf9\xb3\xcb\xaa\x7a\x91\xde\xbd\x76\xfd\x53\xf9\x9d\x07\x90\x25\xd5\xe2\x0d\x37\xc0\x73\xe5\x6e\xe2\xf5\xf1\x9a\x64\x66\xdf\x26\x14\xd4\xb8\x18\x34\xd6\xcb\xa9\xfa\x76\x99\x18\x50\x50\xba\x0e\x12\x6b\xbd\x0b\xc3\x56\x11\xc5\x03\x02\x56\x3f\x6b\x1a\xd8\x06\x68\x67\x56\xc2\x50\xe4\x94\x47\xce\x5d\xc4\x3a\x3e\xfc\x57\x1f\xef\x3d\x6d\xe6\xf4\xb9\x51\x14\xc7\xc6\x07\xda\x62\x61\x52\xd5\x1e\xc1\xa7\x5f\x1c\xc1\xa4\x7c\x15\x44\x07\x24\xcd\x85\x16\x7a\x97\x7b\x93\xca\x35\xba\x5e\x8f\x4d\xeb\x55\x07\xb1\xd0\x3e\x93\x04\x74\x57\xab\x4d\x33\xb4\x45\xe7\xe7\xc3\x75\x1a\xfa\x17\xe6\x1c\xa8\xec\xcb\x01\x3b\x57\x2e\x18\xf6\x4c\x7c\x08\x58\xbb\xcf\x94\xc3\x4b\x2c\xd0\xc3\x58\xfe\x30\xe1\xc6\xf0\x4c\x85\xe3\x6c\x00\x00\x13\xf8\x33\x13\xd6\xf8\x77\x4d\xf8\xf7\xd7\xef\x36\x1c\x9c\x50\xef\x51\xae\xcc\x1b\xb5\xa0\xf5\xca\xe8\x79\xf8\x61\x0d\xbf\xd0\x1d\xf3\xd2\x17\xeb\x69\xf4\x88\x03\x36\xbe\x7d\x2d\x4e\xe9\xfa\x26\x5b\x73\xc9\x92\xd4\x2e\xa3\xe1\x9e\x51\x32\xd1\x6f\x60\x94\x5a\xce\x57\x76\xb0\x52\x68\xa5\xbe\xce\xd6\x5d\x8a\x03\x53\x9d\xb3\xc4\xf2\x26\x9b\x27\xfd\xe6\xb5\xb2\xac\x13\xe0\x0b\xd0\x48\xb9\xa6\xf4\x88\xe8\x72\x2b\x8a\x27\xc9\xdf\x12\x34\x75\xf5\x22\x4f\x81\x00\x89\xd2\xa2\xa0\xc5\x1d\xe5\x64\xe2\x80\x1a\x74\x03\x09\x19\xcd\x8a\x5f\xe7\x86\x4f\xa1\x99\x99\x2c\x65\x06\xca\x2a\xac\xf1\xc7\xd7\xba\xc9\x9e\x7e\x0c\x24\xf4\x5e\x9f\x5a\xaf\x54\x15\xf6\xeb\x80\xa4\xa6\xc1\x1b\x06\x52\x04\x50\x3f\xd1\x92\x0d\xbe\xcd\x69\xfc\xa4\xa9\x6a\x48\x4f\xde\x6a\x14\x96\x3f\x57\x77\x5a\x0b\xb7\x1a\x90\x71\x53\xb4\x92\x7d\x3c\x97\x9c\x7f\xfd\x6d\xca\xc0\xc2\x48\xaf\x4e\x6b\x42\xb0\xd4\xad\xe1\x07\xca\x0e\x41\xee\xcf\x87\x25\xda\xd8\x52\x27\xbd\xbc\xea\xb2\xbb\xb1\x97\x83\xdc\xcf\xc7\xb9\x7c\x7e\x5e\xa6\xf8\x65\x9a\xda\x54\x56\x7d\x8b\xcc\xfd\x88\xde\x5a\xd4\xda\x56\x30\x7e\x50\xde\x0c\x1c\x5f\xea\xb7\xfb\x4c\x12\x32\xbf\x72\x42\x6b\x57\x2f\x42\x71\x3d\xb2\x64\xba\x95\x6e\x58\x60\x93\x08\xbb\x92\xab\xf0\x73\xe9\xff\x63\x9e\xef\x0d\xe0\xc4\x49\x16\x00\xc0\xef\xfb\xaf\xde\x87\xbe\x3e\x38\xc2\xef\x3f\x82\x10\x5f\x7f\x2b\x4a\x99\x57\x7f\x61\x47\x90\x2d\xc8\xfc\xde\x9c\xe3\x20\xc4\x56\xbb\x22\x93\x75\xdf\x1b\x5d\x59\xdb\x28\xf4\x6e\x48\xac\x8a\x2a\x8f\xb1\x63\x75\xc0\xea\xc1\x55\x92\xe2\x8e\x06\x77\x29\x2e\x32\xef\x05\xd6\xa6\xee\x1a\xe7\x9b\xa7\x0a\xec\x49\x51\xe9\xe2\xc1\x16\xe3\xce\x2e\x36\x1d\xb2\x8f\xdc\x52\x8f\x69\x5f\xb4\xa6\x30\x90\xd7\xbf\xd6\xcf\x71\x02\x4a\x32\x5d\xd1\x36\xac\xaa\x8f\xb2\x4c\x6e\xe7\x0d\x47\x58\x2d\xed\xe9\x2b\xd6\xd1\x39\x8e\x88\x7c\x18\x3b\xfd\x52\xf8\xb2\x7a\x13\x3a\xea\x46\xed\x35\xae\xf8\x50\x5d\x97\x1d\x7a\x6d\xe6\x88\xfe\x94\x79\x7a\x6c\xf5\xd2\x50\x6f\x8f\xf6\x1f\xdd\xc7\xc8\x40\xb3\xc8\x00\x00\xac\xff\x06\xb9\x2c\xfb\x04\x80\xbf\xf5\xff\x2d\x00\xf3\xfc\xdd\x44\xbe\x05\xf0\x1f\x4f\x7e\xcb\x18\xd2\xdf\x9d\xba\xf3\xaf\xe2\xf2\x8f\x21\xbf\xdd\x98\x73\xdf\x17\xb2\xff\x2f\xa3\xca\x8f\x49\xbe\xd5\x82\xc6\x77\x49\x98\x1c\xff\xc1\x2a\xfe\x98\xe6\xdb\xa1\x7f\xdf\x8b\x37\xd7\x5f\x96\x99\x19\x82\x0d\xf4\x6b\x08\x36\x80\x0d\xa8\x65\x01\x80\xeb\xdc\xbf\x7e\xfd\x6f\x00\x00\x00\xff\xff\x12\xb3\x66\x97\x45\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3397, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0x1, 0x7c, 0x6d, 0x65, 0x41, 0x57, 0x18, 0xa8, 0xf7, 0x58, 0xfd, 0xcf, 0x29, 0x8, 0x12, 0x3a, 0xfc, 0x9e, 0xd8, 0xdb, 0x26, 0x57, 0x67, 0x55, 0xc8, 0xc6, 0x27, 0x7, 0x2f, 0xf8, 0x62}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
