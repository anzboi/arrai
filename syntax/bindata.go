// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.397kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x67\x58\x53\x69\x9b\xc7\x0f\xbd\x2b\x28\x58\x11\x29\x52\x0d\x04\xc1\x17\xa5\x77\x84\x50\xa4\x77\xd0\x08\x21\x24\x26\x06\x48\x28\x91\x5e\x02\xa8\x08\x38\xd2\x82\x82\x0c\x12\x9a\x88\x62\x00\x87\x18\x13\x69\x52\x82\x09\x52\xa4\x89\x80\x22\x84\xa2\x11\x01\x91\x26\x7b\xbd\x33\x3b\xbb\xea\x5e\x3b\xbb\x3b\xfb\x9e\x2f\xe7\x3a\x1f\x9e\xbb\x9d\xff\xfd\x7f\x7e\x8e\xb6\x3c\xbc\x92\x80\x20\x20\x08\xfc\xfc\x88\x02\x00\x10\x80\xb9\x14\x84\x80\x6b\x40\xc3\xc2\xa0\x88\xbe\x4e\xfb\x9e\x9e\x6b\xe0\x6e\x16\xb8\xce\xd9\x11\xc2\x02\x75\xa9\xd8\xf7\xd9\x32\x59\x83\x67\x41\x6a\x7d\xf6\x3d\xbc\x4e\x57\x88\x10\x3d\xe1\xf3\x6e\x08\xa2\x6e\x95\xbb\x30\x64\xa3\x69\x5d\x95\xa4\x5b\xb5\x71\xda\x75\x61\xbf\xc7\x4c\xee\x31\x77\xf6\xfe\xfc\xb2\xe9\x40\x25\x53\x55\xc3\x74\xd3\xc2\x04\x00\x00\x76\x76\x1c\x6d\x05\x04\x55\xdd\xad\xd9\xce\x00\x00\x60\x00\x00\xf8\xef\x6b\x51\x04\x00\x00\x8d\x09\x0c\x47\xc1\xc0\x70\x04\x2e\x38\xfc\x82\x46\x00\x06\x0d\x86\x86\x85\xa9\x43\x11\xe0\xdf\xab\x03\xc3\x31\x1a\x68\x4c\x60\x4c\x8e\x7d\xe1\x5d\x1d\xf1\xd4\xa1\x25\x55\x4f\x25\x91\x15\x17\xb3\x2d\xd0\x2f\x7e\xc5\xd2\xe7\x1d\x1c\xf7\xf0\x05\x65\x48\xa8\x0a\x9d\x1d\xab\x60\x25\x13\x89\x3a\x2b\x65\x1e\xa0\xf9\xfe\x7b\x1e\x6e\x66\x43\xbd\x1a\x0a\xb0\xed\x6c\xe6\xb5\xbd\x46\xbe\x8a\x5a\xb3\xa7\x6b\x8e\x4a\x3b\x54\x18\x05\x7a\x07\x63\xf5\x4e\xbc\x50\xd8\xf0\xd3\x62\x16\xe9\xec\xd1\x7f\x9b\x3d\x5e\xaf\xd9\x12\x14\xff\xad\xc1\xdc\x3e\xeb\xf5\x14\x0e\xcf\x4a\x50\x71\x1f\xa0\x33\x9e\xe5\x6c\xc7\x6d\x7c\x50\x44\x41\x56\xd7\x72\x68\xd9\x3b\x69\xad\x5a\xb3\xe7\x34\xd6\x24\xbc\xfa\x6e\x55\x84\x46\x65\x53\x4d\x23\x78\xa0\x29\xa3\xea\x2d\x37\x62\xf4\xd2\x8e\x5b\x75\x9d\xc4\x46\xb8\x98\x09\xe5\x26\x73\x93\x44\x3d\xdd\x24\x01\x37\x7f\x36\xa5\xb7\x84\xf2\x48\x2d\x46\x09\xa6\x63\xf7\xe1\xd9\x74\xbf\xcc\xaa\x79\x04\x6d\xe5\xb0\xc0\xf9\xa3\xc3\x87\xfa\x43\xa3\x7a\xeb\x95\x70\xd8\xfa\x91\x3d\xf0\x8c\xd9\x06\xff\x1d\x8a\x01\xd6\x7a\x6a\xdc\x75\xa8\x1a\x70\x74\x73\xf2\xba\x65\x3e\xa4\x8b\xec\x92\x18\x39\x57\xbb\x3d\x53\x7e\xc9\x0f\xb9\x92\xf8\x81\x95\xa5\x5f\x17\xd8\x12\x21\xad\x34\x3a\x65\x0b\xab\x4f\x0c\x6b\x3f\x25\x75\x3a\xa9\x54\x1d\x39\xaa\xce\x31\x77\xe8\x49\xbc\xfb\xda\x68\xa1\xa6\xbe\x37\x4d\x74\xf7\xbb\xf4\xcf\x87\x9b\x0e\x6c\x11\xfa\x0e\xa9\xb5\xd1\x6c\x78\x1c\x8c\x32\x70\xed\x36\xcf\xdb\x64\xde\xb9\x58\x8a\x90\x6d\xfd\x4e\x90\x10\xe3\xb8\xf4\x82\xbe\x58\xf2\x60\x74\x5f\xcc\x5c\x7c\xb7\xca\x4b\xe9\xc0\xaf\xc7\xd7\x05\x32\x5b\x2d\x1d\xe4\xc4\xc6\x63\x19\x8b\x42\xd4\xb6\x4e\x39\xab\x39\xab\x95\xfc\xcc\xb4\x7d\x9c\x09\xce\x8d\x7d\xf3\xf1\x60\xb3\x32\x1c\x4d\x6e\x0d\x2a\x15\x08\x89\x99\xc8\x7c\x88\x89\x92\x8e\x22\x2a\xd8\x87\x89\x1a\x82\x59\xa9\x83\x02\x1d\x59\x3b\x1d\xb4\xdb\x05\xbf\x18\x93\x45\x3f\x2e\x8c\x61\x2b\xef\xd8\x6c\x0b\x2a\x5f\x1d\xc3\x37\x54\xee\x82\x88\x44\x46\x29\xcc\x75\x4c\x6d\xaa\x4e\x1d\x14\x54\x70\x78\x2a\xf8\x9a\x71\x6a\x6e\xdd\x88\xee\x6f\xe4\x58\xcd\xcf\xe7\xed\xd1\x3d\xf3\xca\x23\x21\x1c\x5d\x08\x79\x67\x3a\x9d\x7b\xe2\xfe\xcd\x1d\xa1\xde\xee\x24\x37\x12\x97\xcf\x0c\x3b\x06\x2a\xc6\x4e\xbd\xbd\xcd\x2b\x1e\x62\x03\x1f\xb6\x39\x29\x6c\x72\x8b\x7b\xfe\x75\xe3\x79\x9f\x01\xcf\xc7\x84\xf5\x14\x09\x4e\xa8\xb2\x53\xb5\xb7\x57\x80\xe8\x74\x7a\x63\x18\xdb\xb7\xc2\x7e\x59\x48\xf6\xa5\xcf\x68\xa1\x7f\x6d\x6e\x6f\xd6\x31\x7f\x6e\x43\xfb\xb4\x1d\xdc\x18\x6f\x4e\x43\x75\xb7\xdf\x88\x19\xdc\xaf\x62\xb4\xda\xf0\xd2\x67\xae\x76\x72\x3c\x33\x3e\x7a\xb7\xd1\xc0\x9d\xcd\xdf\x48\xd1\xb4\xac\xf7\x79\x44\xf0\xd3\x03\x4a\xf8\x8e\x05\x15\xff\x73\xb4\xd8\xe6\xc0\x53\xcb\x97\x2a\xdc\x48\x87\x83\x81\xcf\xa5\xaa\x68\x68\xdd\xc9\xea\x30\xfd\x27\xc6\x0e\x3b\x7c\x7f\xca\x5a\xb9\x27\x67\x36\x85\x1b\x00\x3e\xf1\xfd\x95\xac\x4f\xfd\xcf\xb2\xc6\xe2\x2f\xe1\xa0\x51\x60\x2c\x2e\x10\x85\xb8\x00\x0e\x42\x41\xff\x7d\x1b\x6b\x3c\x5f\x60\x4b\xad\x25\xe9\xac\x73\x4b\xe5\xa9\xc2\x2f\xae\x16\x45\xc3\x07\x5c\xd1\x11\x99\x37\x19\xaf\xfc\x2f\xb8\x7b\x23\x72\xd5\x78\xef\x71\x69\xab\xa6\xee\xc4\x2e\xac\x0a\x94\x24\x14\xdc\xa7\x26\xcb\x53\xe3\xce\xd1\xd7\x08\x0c\xd0\xee\x77\xc1\xdb\x7c\x80\xec\x3e\x5d\x71\x25\xc2\x6e\x3b\x6b\x22\x64\xcb\x68\x69\x58\x00\x52\x25\xa0\xdd\x5b\xb3\xfb\x1f\x98\x4e\xf2\xd3\xce\xf3\xfc\xce\xbd\xf6\x97\x4f\x5b\xd5\xc9\x36\xd3\xfb\xe7\xe4\x3f\x1d\x2a\xf7\xb5\x4a\x53\x66\x54\x9e\xed\xad\xf1\xdc\x3b\xf4\x0f\xbb\x09\x93\xab\x45\x5f\xf9\x7c\x88\x32\x09\xb6\x5d\x0a\x1b\x8d\x0e\x8d\x0d\x09\x2a\x9b\x5e\xd2\xaf\xcc\xfc\xe7\xbd\x1c\xf6\x07\x36\xe7\x4d\xf1\x1a\xcf\x69\x6d\xb5\xfa\x6c\x3d\xe7\x5c\x39\xb3\x6f\xf1\x3d\x78\x69\x43\xab\x88\xaa\xf1\x69\xad\x45\xc8\xe0\xf2\xe4\x7a\xd0\x84\xd6\xc2\x76\x25\x48\x6d\x1c\x94\xef\xf4\x08\x1b\x1b\x32\x84\x38\xf4\x2e\xb2\x74\xa5\x29\x77\x46\x69\x7e\x2f\x02\xfc\x56\x21\xf9\xbd\x92\x7d\xe3\xcb\x5a\xda\x45\x21\xd2\xfc\x19\x4d\xf2\xfe\x2a\x51\x82\x2f\x9d\x27\x36\x65\x5d\x3a\x6f\xfa\x46\xb3\xce\xcc\x93\x3b\x5b\xb2\x31\x51\x06\x4b\xbf\x89\x6f\x30\xef\x5c\x9d\x58\x10\xb4\x1c\x2d\xb3\x19\xbe\x90\xf4\x28\x5f\xe4\x8a\x26\x8e\x91\xc6\x77\x5c\x8b\xb6\xb7\x27\x7c\xa9\xb0\x43\x82\xd5\x13\xae\xd2\x48\x4d\xc7\xae\x8a\x38\xc1\x4c\x3c\x03\x6e\x18\xcd\x24\x1b\xbd\x4d\x96\x80\x9f\xc5\x7f\x2b\x09\x0a\xa4\x66\x93\x58\xc8\xf7\x09\x1b\xf5\xf6\xf3\x7d\x85\x5c\xb5\xfa\xb2\xf5\xf3\xaf\x63\xd9\xaf\x43\x93\xde\xdc\x65\x75\x18\x40\x6e\x66\x88\x1d\x5a\xc8\xe1\x2f\x5e\x8f\xb1\x4e\x25\xcd\x0d\xa8\x56\x85\x57\x87\x41\xaa\xb7\x12\x9f\xe8\x87\x70\x1f\x2d\xff\x62\x25\x35\xa9\xbd\x72\x80\xc6\xb4\x93\x97\xbb\x29\xa2\x61\xa7\x54\x52\xec\xca\xd4\x0c\xc9\xab\x14\xb2\x5b\xa8\xd9\x9b\xad\xe7\xed\x80\x38\xa8\xc6\xa1\x8c\x8f\x7f\x5a\xbd\xe1\xe2\xcc\xd7\x1d\xfe\x31\xa1\x0e\x36\x00\x13\x3a\x34\x99\xe9\x1b\x64\xf6\x25\x9f\x3f\xaf\x1d\xe2\x61\x11\xcc\x28\x05\xa9\x92\x72\x1d\x08\x52\x3c\x83\xa8\xf4\xbd\x05\x15\x69\xf2\x0c\xa8\x7a\x82\xf9\x01\xb4\x38\x44\x63\x22\xd6\xba\x8f\xca\x5f\x2b\x4c\x9d\xff\xf5\x2e\xec\xd6\x33\xd1\x3c\x65\x99\xd6\x30\x70\xd4\xb0\x4f\x49\x83\x62\x27\x97\xe2\xbe\xe9\xea\xaa\xb6\xdc\x35\xa2\x8e\x57\x91\x1e\x8c\xb9\xf2\xe5\xf9\xe1\xeb\x36\x4c\x3d\x9e\x3a\x42\x3a\x69\x5e\x4c\xb9\x1e\xf9\xbc\xfd\x44\xea\xc1\xdb\x51\x35\x2e\xbf\x54\x9e\xc5\x34\x37\x1a\x30\x2d\x86\xb4\x6c\xbb\xab\x17\x88\x57\x4a\x6f\xa5\x07\x47\xfa\x56\x0c\x10\x39\xc8\x1d\x0b\xfe\x34\x79\xe6\xdd\x00\x90\xeb\x83\x96\xc2\x48\x88\xc1\x15\x69\x9b\x74\x7a\x6f\x53\xb7\x58\x6d\xbd\x44\x99\x54\x72\x1f\x4e\x2c\xfc\x7c\xc1\x13\x63\xf4\xe6\xba\x13\x32\xab\x92\xab\xb3\xf0\xd2\x66\x7c\xa2\x76\xb8\xf7\x9a\xe9\x75\xd9\xca\x03\x0f\x29\x4e\xa7\x50\xd1\xc5\x86\x23\x5a\x2c\x98\x1c\x95\x8b\xbe\x89\x2b\x42\x04\xb3\xcd\x3c\x7c\x92\xbb\xaf\x8c\xb9\x95\x00\x59\xd7\x49\xc2\x4e\xdb\x9c\x27\x41\x2c\x0a\xf3\x0d\x0a\x08\xa6\xa2\x5a\x54\xeb\x1a\x81\x7e\x0b\x13\x0a\x5f\xc5\x00\x0f\x55\xe6\x61\xee\x7d\xab\x41\x64\x5a\x18\xca\x04\x6a\x7b\x50\x1e\x33\xe6\x9a\x73\x3b\x4a\x9a\x30\x1c\x29\xb1\xed\x5f\x35\xd8\x9a\xcf\x34\xbc\xd0\xf7\xb8\xd6\xb2\xa0\xa7\xd9\x35\xec\x38\xf9\xa4\xb9\xfe\xa0\xd2\xf2\x97\xe5\x65\x74\xc9\x18\x67\x1e\xf6\xee\x1b\xad\x6c\xcd\x52\xa6\x5d\x2a\x57\x1e\xa4\x93\x84\xb3\x1b\x55\x8a\x43\xbb\x7b\xf9\x15\x38\xb9\x17\x4f\x8c\x78\x32\xfd\x56\x35\x5e\x6f\xf1\xc7\x1b\x1b\x1b\x6a\x37\xec\x69\x36\x0d\x3c\x6d\xa9\xc7\x5f\x5d\x97\x60\x48\x64\xf8\xe9\x38\xc3\x3b\x83\x66\x51\x60\x2b\x85\x2e\xb8\x8e\x6d\xc3\x7b\x89\xe3\x6c\x08\x23\xe5\xd5\xe5\xcb\xe2\x72\x3d\xde\xd7\x90\xd8\xb8\xdf\xd0\xa3\xcb\x05\x6f\x57\x69\x70\xbd\x07\x37\xe6\xd4\x0b\x9a\x28\x1a\xe5\xee\x70\x86\x03\xd8\xc5\x2a\x50\x44\x35\x29\xeb\x29\x61\x54\xa9\x60\xe1\x0b\xe6\x9a\xe6\x30\xb7\x29\xfc\xb2\xed\x11\xa6\xde\xfd\x45\xf3\x68\x4f\x70\x8e\x33\xea\xe4\xa4\xf1\xc3\x24\x51\x36\x52\x7a\x77\x6b\x95\x67\xea\x89\x58\x53\x5b\xb7\x00\x06\x5e\x92\x9e\x99\x3c\x32\x62\xbc\x74\x9f\x24\x54\xf2\x79\x8b\xdf\x6e\xa2\x34\x26\xcb\x7f\x2b\x79\x9c\xb5\x28\x49\x78\x86\x6c\x17\x56\x0c\xa2\x8e\xbc\x75\x83\xf9\xe8\x98\xba\xf5\x0c\xa6\x1f\x7a\x4f\x43\xa2\xde\xd9\xfe\xea\xaf\xec\xb5\xd7\x2f\x69\xea\x13\xeb\xc5\x31\x64\x70\x46\x86\xbb\xe2\x0b\x2a\xc7\x37\xab\x5c\x11\xad\x9c\xf5\xf6\xf0\x62\xfd\x4a\xa9\x7c\x49\xc8\x4d\x79\xc6\x99\x90\x27\x65\xcf\x6d\x0d\x62\xe6\x48\x7b\x3e\x88\xc1\xbf\x29\x5e\xef\x68\x75\xbe\xc8\xcf\x16\xac\x6a\x4b\xd4\x94\x22\x16\x82\xa2\xe3\x5a\x56\x59\x76\x16\x43\x55\x12\x47\x27\x82\x41\x7e\x07\x23\xf3\x16\x9f\x28\x6f\x86\x4c\xeb\x3b\x1d\x5d\x28\xc8\x0f\x9c\x20\xdb\x67\x8c\xad\x47\x90\x45\xcb\x8c\x86\x79\xf7\x31\xaa\xae\x4f\x46\xa9\x80\x62\x13\x1a\x08\xbf\x6a\x8c\x58\x07\x74\x98\xa6\xb9\x4d\x95\x2f\x2c\x6b\x9b\x26\x63\x07\xbd\x87\x66\xcb\x59\x62\xee\x35\x94\x23\x2d\x11\xa0\x45\x72\xd0\x91\xe6\x4c\x7d\x22\xfb\xd5\x86\x1e\x7f\xeb\xa7\xe8\xa9\x41\x21\xed\x81\x65\x0c\xbe\xe2\xc1\x1a\xbf\x74\xd7\x75\xe3\xe0\xc7\x98\x23\x78\xfc\xea\x07\x7d\x2b\x2f\xbc\x61\x51\xa3\x31\x94\x98\x77\xef\x42\x2f\x86\x2e\x81\xfc\x8a\xc3\xee\x18\xb2\xe7\x4e\x4d\x42\x05\xd7\xdf\x50\x3f\x55\xe6\x3c\xde\x41\xe1\x86\x8e\xd8\xb2\x4b\xbe\x4a\xc1\xf0\x39\x8b\x71\x95\x58\x32\x96\x40\xd6\xed\xed\x98\x9a\x33\xa5\x44\x73\x51\x3f\x10\x24\x4d\x56\x29\x0e\xb7\x0c\x0f\x7f\xfc\x98\x60\xd4\x32\xc4\x59\xf4\x25\x09\x2c\xe3\xb7\xcf\x99\x9f\xe9\x7f\xff\x06\xff\xe5\x26\x5b\x05\x29\xc3\x61\xc4\x73\xfd\x69\xc2\xad\x09\x45\x6a\xb2\x7c\x00\x60\x2c\xf9\x57\x26\xac\xfb\x7f\x35\xe1\x3f\x5e\x7f\xd8\x70\x4c\x56\xf3\x25\xb2\xa6\x78\x0a\xc7\xa0\xdd\xba\x29\x61\x8f\x6e\x64\xdc\xb6\xd3\x83\xa7\x6b\x05\x8c\x24\x31\xcf\xf0\x57\x9d\xfe\x85\x16\xf6\x9b\x8b\xb9\x72\xa4\x5e\xeb\xf1\xfe\x49\x22\x26\x72\x78\x92\x44\x96\xa8\xdb\xd5\xb8\x7f\xa5\x99\xee\x85\x96\x17\x84\x53\x4a\x97\xb8\x5e\xde\x11\x2d\x4c\xbc\x58\x57\xac\x00\x32\xd7\x4b\x56\x69\x2b\x4c\x4a\x25\xbb\x95\x84\x10\xa2\x5c\xf9\x67\xcf\x5b\x8a\x56\x48\x12\x4a\x3a\xd5\x0c\x44\x52\xfc\xed\x7d\xa1\x23\x41\xfc\xfb\xad\x17\x8e\x84\x8a\x40\x66\x61\xec\x22\xae\x3a\x2b\x4d\x2d\xde\x4c\xd9\x2f\x7d\xc4\x90\x48\xa6\xbb\x5e\xf6\x2b\x9d\x41\xf9\xc7\xc1\x5f\x87\xe5\xf4\xad\x5e\x32\xdd\x0f\x02\xa7\x15\x3a\xef\x80\xae\x09\xd9\xd5\xb6\x3d\x1e\x35\x55\x75\x9b\x34\x2e\x5f\xa4\x9f\x30\x40\xac\xe2\x6f\x25\x1e\x6e\x14\x98\xbe\x4b\x2c\x0f\x1d\xc8\x1b\xe6\x4c\x0c\x1a\x75\x65\xc5\xc8\x5f\x1d\xbf\xad\xe9\x1b\x8d\x6e\x1a\x97\xe9\xe6\xcb\x9f\x09\x0b\xa3\xdf\xe9\x0b\x76\x89\x46\x9b\x5d\x09\xf8\xd0\x54\xa7\xfe\x79\x8e\xd4\x56\x47\xb9\x4a\x14\xb9\xc7\xe8\xaa\xea\xea\xae\x98\xde\xa5\xea\x08\xca\x7c\x10\xf9\xad\x41\x0e\xfc\x71\x45\xc1\xe0\x9b\x69\x92\xfa\x5a\x72\xcd\x5c\x17\xe3\x4c\x85\xe7\x0d\xe3\x73\x77\xd5\x1e\x3d\xf8\x0f\xcc\x0b\x8f\x00\x14\x8e\x71\x01\x00\x92\xfb\x5f\x7a\x1f\x86\xe3\x10\xa8\x3f\x7e\x04\x2a\xb3\xf9\x6a\x8a\xa6\xb8\x05\x67\x5b\x8a\x2f\xda\x29\x7b\xd1\x6f\x04\xec\x65\x58\x5f\xc4\xcb\xfd\xd2\x44\xd9\x2b\x05\xf6\x2d\x36\x5d\x4b\x5b\xd4\xce\x8f\x82\x5f\xdd\xb5\x4a\x50\xdf\xd6\x15\x79\x80\x48\x2e\x7b\x1a\xec\x49\xbf\x28\xf4\xf2\xa1\x9a\x40\x4e\x4a\xe1\x91\x18\xe7\xe9\x0b\x01\x9e\x2f\x94\xef\x05\xe5\x1f\x35\xb4\xf4\x28\x61\xba\x87\x7e\x6d\x5e\x14\x02\x34\x94\x7a\x53\x3d\x79\xb5\xef\x15\xdb\x5f\x2b\x1b\x4f\x72\x5b\xda\xb1\x50\xa7\x33\x04\xf7\x1d\x7c\x33\x75\xe2\xd9\x01\x97\xd3\x6d\xb0\x94\x08\xda\x45\xe1\xcc\x38\x93\x80\x6d\x06\xad\x68\xc2\x62\xd6\xa9\x30\x9d\xb2\x34\x3a\xd8\x6f\xf8\x67\xf7\x69\x4a\x7a\xc5\x44\x00\x00\xd6\x7e\x87\x5c\x2e\x6e\x49\xe0\x3f\xfb\xff\x1e\x80\x45\xff\xcb\x44\xbe\x07\xf0\x9f\x4f\x7e\xcf\x18\x8a\x3f\x9c\xca\xf8\xdf\xe2\xf2\xcf\x21\xbf\xdf\x98\x53\x3f\x16\xc2\xf3\xb7\x51\xe5\xe7\x24\xdf\x6b\x41\xf7\x87\x24\x6c\xc1\xff\xc7\x2a\xfe\x9c\xe6\xfb\xa1\xff\xd8\x0b\x56\xf8\x6f\xcb\xcc\xd1\x96\x8f\xff\x9f\x21\xf8\x00\x3e\x80\xc6\x05\x00\xa1\x22\xff\xfc\xfa\xb7\x00\x00\x00\xff\xff\x2f\xd6\xc8\x5a\x45\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3397, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xd, 0xe7, 0xe8, 0x6f, 0xe1, 0x78, 0x4a, 0x5e, 0x24, 0xd, 0x94, 0x7a, 0xba, 0xef, 0x6d, 0xe8, 0x78, 0xa3, 0x5, 0x43, 0xde, 0xad, 0xc7, 0x20, 0xa7, 0x4f, 0x9f, 0x2f, 0x16, 0xe1, 0xc7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
