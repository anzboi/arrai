// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (802B)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xc1\xae\x9b\x3c\x14\x84\xf7\x7e\x8a\x91\xb2\xc0\x48\xfc\x66\xef\x28\xf7\xcf\xaa\x4f\xd0\xe5\x95\xae\x5c\x7c\x52\x5c\x19\x9b\xda\x4e\x14\x44\x79\xf7\xca\x26\x17\x44\xab\xb2\xc2\xe3\x6f\x0e\x73\x46\x9c\xf0\xb5\x37\x11\xb1\x0b\x66\x4c\xe8\x95\xd3\x96\x22\x52\x4f\x18\xd4\x38\x1a\xf7\x1d\xfe\x06\x4d\x9d\xd7\x14\x22\x8c\x83\x19\x46\x6b\x3a\x93\xf2\x8b\x0f\x29\x42\xd3\x48\x4e\x17\xd2\xb1\x53\xb1\xd2\x33\x91\x8b\xc6\xbb\x6c\xce\xc2\xca\x92\xc6\xcd\x58\x12\x8c\x9d\xf6\x91\x83\x1a\x63\x91\x71\xf3\x61\x50\x29\x22\xf9\xe2\x89\x49\x39\xad\x82\xde\xd1\x7b\x24\x9d\x6f\x57\xa1\x98\x4a\xa4\xd4\xab\xf4\x72\x0b\x66\x29\xed\x8e\x0b\x66\x06\x00\x55\x17\x1f\x95\x44\xdb\x92\xeb\x7c\xce\x2a\xba\xf8\x10\x2b\xd6\xac\xc4\x8f\xe8\xdd\x11\xc9\xca\x91\x79\xda\xf8\x3c\x32\x59\x39\x32\x93\x1a\x6c\x25\xc1\x5f\x19\x0e\x74\xbe\xfb\xa4\xa1\xac\x51\x51\x62\xae\xa6\xc1\x56\x4b\xdd\xb0\xe5\x9c\x8b\xe9\xbc\x7b\x50\xee\x95\x1e\x14\xa6\xd4\xe7\x62\x93\x87\x82\x36\x5d\x32\xde\xa9\x30\x61\xde\x0a\x96\x9f\xbb\x7e\x71\xcb\x9f\xab\xf3\x12\x68\x13\x6e\xc6\x26\x0a\x10\xd7\x87\xb2\x77\x7a\x15\x93\x1f\x2e\x5f\x4c\x03\x59\x42\xd5\x12\x33\x97\xe2\xda\x60\x65\xb7\x8f\xd4\x0b\x7e\x81\x17\x06\x97\x37\xf0\xab\x14\x7f\x33\x75\xb3\x4d\xfe\x90\x98\xc5\xb2\x9e\x17\x56\xe3\xbf\x37\xb4\x6d\x20\x2b\xee\xce\x78\xc7\x45\x7d\x66\xec\x7d\xff\x59\xde\xbf\x4d\x89\x0a\x9c\x37\xd9\xf5\x4b\x2e\x45\x63\x6e\xdb\x48\x3f\x45\xaf\xe2\xc7\x18\xe8\x66\x9e\xbc\x12\x55\xb3\x73\x75\xee\x3a\x13\x29\x98\xe1\x1f\x48\x93\x33\x6d\xc7\xe5\x7c\xa8\x88\xef\xdc\xff\x3c\x67\xa9\x25\xaf\xd9\xef\x00\x00\x00\xff\xff\xe7\xd6\xd8\x44\x22\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 802, mode: os.FileMode(0644), modTime: time.Unix(1613367428, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1b, 0x54, 0x14, 0x7b, 0x55, 0x1c, 0x55, 0xea, 0x84, 0xd7, 0xd2, 0xd6, 0xe, 0x4d, 0x97, 0x79, 0x53, 0x93, 0x6a, 0x7f, 0x58, 0xfb, 0x91, 0xc4, 0x27, 0x66, 0x1, 0x21, 0x9c, 0xf0, 0xa4, 0x89}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
