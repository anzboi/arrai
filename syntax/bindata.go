// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.249kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x38\xd4\x7b\xdf\xfe\x89\x11\x22\x39\x96\x8a\xac\x65\x5f\xc6\x52\x64\xa7\x84\x33\x83\xec\x6b\x48\xc6\x36\xcd\x34\x62\x26\x0d\x61\xc2\x18\x95\x25\x65\x1b\x0e\x49\xb6\x29\x2d\xb2\x94\x31\x11\x5a\x30\x63\x46\x96\x18\x1d\x0d\x5a\x0c\xc6\x19\x4e\xf6\xf5\xbd\xce\x39\xef\x79\xdf\xea\xbd\xde\xf3\x3c\xcf\x79\x9e\xdf\x3f\xbf\xeb\xfb\xc7\x67\xbb\xaf\xfb\x73\x7f\x6e\x67\x28\x2f\x9f\x04\x20\x00\x08\x00\xdf\x7f\xc2\x00\x00\x04\xa3\xce\x85\x46\x84\xe9\x04\x45\x45\x05\x45\xf4\x75\x3a\xd2\x68\xd7\xc0\xdd\x0c\x70\xad\xab\x33\x84\xa1\xd5\xa5\xe6\xd8\x07\xa5\x33\x06\x4f\x6a\x69\xf4\x39\xd2\xf8\x5c\xae\x10\x21\x26\x42\xa7\x3d\x22\x88\xc6\x24\x4f\x21\xc8\x5a\xd3\xaa\x7a\x85\x31\x69\xed\xa8\xfb\xcc\x5e\xaf\xcf\xb9\x87\x3c\xd9\x7b\xf3\xcb\x3f\xc2\x54\xac\xd5\xcd\xd3\xac\x0b\x71\x00\x00\x6c\x6f\x3b\x43\x77\x0a\xa8\x7b\xda\xb3\x5d\x01\x00\x40\x01\x00\xf0\xff\xf7\xa2\x0c\x00\x00\x12\x05\xc3\x20\x42\xc0\x61\x11\xe8\x70\xcc\x19\x9d\x60\x14\x12\x1c\x14\x15\xa5\x1d\x14\x01\xfe\xbd\x3b\x70\x18\x4a\x07\x89\x82\xa5\xe4\x50\x63\xeb\x0d\x85\x53\x87\x8a\xef\x9d\x66\xea\xcc\x11\x3b\xb4\x46\xfc\x6f\x05\x3c\x4f\x04\xb5\x0b\x44\xa6\xd6\x92\x74\x6f\xea\x7a\xb1\x08\xb7\x1d\x5f\x95\x77\xb5\xfe\x7a\xec\x56\x40\x7c\x1e\x2c\xf0\x78\x73\x7a\xc1\xa2\xce\x6e\x68\x07\xe2\x69\x94\x42\x77\x1b\x72\xe7\xd3\x7e\x92\x28\x11\xe6\x7a\xcb\x29\xa5\x5f\xc0\xd0\x85\xee\xa6\x7a\x84\xb0\x5b\x1d\x66\xd4\x75\x58\xf3\x31\x6b\xdb\xde\x79\xab\xc4\x68\x0c\x2c\x2f\xfd\x92\x96\xba\x16\x77\x3e\x85\xf9\xb0\x2a\xb0\xe4\x05\x59\x22\x71\x6d\x85\x77\x36\x50\x22\x4f\x7d\xfb\xbc\x8f\x9d\x42\x26\x4a\xca\x2e\xc6\x2e\xc1\x8d\xe9\xa8\xd7\x63\x73\x83\xef\xe0\xc8\xd1\x14\x4d\xda\x4f\x91\x65\x1c\x95\x82\xd3\x4a\x5e\xc7\x04\x6f\x7b\x28\xa6\xbb\xdc\xed\xce\xa8\xc9\x70\x2f\xd3\xd4\x0c\x36\xa0\x1b\x4c\xfa\xd9\x85\x07\x5f\x5d\x63\x70\xd0\x53\x31\x99\xae\xa4\xd3\x28\x07\xbb\xf1\xcc\x04\xb7\xce\x09\x76\xa8\x97\xb0\xae\xa8\xdf\xc6\xb5\x39\x1b\xc5\x54\xd1\xaa\xc7\x52\xb6\xea\x2e\xc4\xbb\x6a\x51\x83\x18\x91\xc6\x61\x05\xa9\xed\xa2\xf5\x91\x95\x73\x50\x8f\xc5\xcb\x48\xc2\xfa\xd5\x17\x82\xb7\x65\x8b\x5f\xf3\x05\x0a\x69\x37\x68\x18\x6d\x34\xb9\x8a\x68\xf4\x17\x4a\xdf\x5c\xb0\xf8\x68\x2f\x11\xfe\x79\xbd\xb6\x07\xa2\x8f\xed\xbd\x2e\x63\x37\xf6\x70\x98\xd6\x16\xa0\x7b\x4e\xa9\xa3\x4f\xc5\x78\xce\x30\xfd\x22\x88\x31\x69\x2f\xf5\x99\x90\x7b\x70\x5a\x48\x6f\xed\x7e\x75\x91\xe2\x2b\x4c\x8c\xa6\x5b\x1f\x7a\x8a\xd5\x23\x70\xc1\x62\x0f\x1b\x34\x2b\x6b\x1b\x33\x6e\x61\x33\x74\xbf\x59\x45\x99\xb6\x8f\x20\xe3\x2c\xdf\x08\x49\xc9\x7e\x3b\x0a\x1d\x69\x62\xbe\xd1\xef\x61\xaf\xee\x8b\xf5\x95\x33\x02\x67\xdd\x38\x79\xad\x24\xf5\x60\x50\x3d\xef\x7c\x2f\x85\x82\x54\x3e\x2c\x1e\xf8\x80\xd9\x7c\x74\x82\x22\xc3\x9a\xae\xc8\xf7\xab\x4e\x96\x89\x32\x25\x27\x0e\x05\x98\x0b\xe3\xc5\x2e\x31\x76\x2c\x6e\x64\xf8\xf9\x56\x4d\x6a\xbb\x1e\x1b\x80\xa8\xa9\x6b\xba\x7c\xc4\xdf\x97\x18\x68\xb0\xf0\xfa\x61\xb7\x6d\xc9\xfe\x04\x99\x71\xf1\x31\xad\x74\xb3\xa2\x91\x01\x2c\xa9\x74\xc6\xea\x6c\xbf\xfb\x9a\x8c\x15\x4e\x79\xf7\xf4\x73\x67\x08\xfc\xce\x34\x25\xdc\xe3\x4d\x52\x0a\xf9\x08\x4b\xef\x33\xc6\x02\x10\x52\x74\xf0\x29\xa0\x58\x33\xe1\x77\x24\xad\x46\x65\x79\x6e\xcb\x67\x9b\x9f\x8f\x5d\x20\x84\x35\xb0\xec\x04\xee\x64\xd0\x4e\xf4\x0b\x1d\xdd\x7b\x04\x87\x48\xbc\x5a\xd6\x65\x51\x49\x01\xcf\x56\xad\xdc\x71\xaa\x43\x67\x71\x11\x89\x13\x41\xe4\x05\x1a\xb6\xa5\x1d\x03\x63\xc8\x7b\x48\xf7\x32\x1d\x13\x9f\x6a\x86\x28\x56\x18\xba\x4e\xa6\x85\xb7\x0d\xc8\x7a\x7a\x10\x9f\xae\xcf\x2e\x9c\xfc\x1f\xc6\x3e\xe1\x3d\xbb\x14\xb8\x03\x00\x6e\x81\xfe\x8a\xb1\x46\xff\x98\xb1\xd1\xd8\x73\xe8\xa0\x8b\xe0\x68\x34\x0c\x11\x71\x06\x1c\x8a\x08\xfa\xef\x45\xab\xf1\xee\x89\x2e\xb3\x97\x68\x65\x04\xce\x57\xa6\x0a\xf5\x5c\x2d\x8e\x0b\x1b\x70\x47\x5e\xc8\xbc\x49\x7d\x1b\x70\xc6\xd3\x37\x22\x57\x83\xef\x1e\x8f\x81\x7a\xea\x76\xfc\xcc\xe2\xce\x52\x5c\xc1\x7d\x4a\xb2\x12\x25\x21\xb0\x75\x19\x4f\xd5\x12\xfd\x10\xbe\x09\x02\x14\xa4\x8c\xf7\xa8\xe0\x45\x1d\xec\x89\x90\x0d\x8b\xf9\xe1\x9d\x10\xd2\x4e\x83\xde\x1a\xd1\x23\xa8\xce\xba\x67\x9d\xa7\xf9\x5d\x7b\x1d\x63\x8f\xda\xd6\x2a\xb4\xb5\xf6\x4f\x29\xcd\x49\x57\x9e\xb2\x25\xa8\x52\xab\x4f\xf6\xd6\x78\x8b\x0f\x1d\x71\x60\x59\x5d\x2d\x5e\x01\xf9\x11\xe5\x70\xd0\xae\x83\x6b\x8d\x4e\x8d\x0d\x38\xb5\x75\x9f\x03\x6f\x8f\x05\x4c\xfb\x38\xed\x85\xb5\xe5\x8d\xf3\x59\x4e\xe9\x6f\x74\xf8\x6d\xbc\xe2\x5e\xb1\x93\xe2\x7c\x02\xcf\xaf\xe9\x17\x53\x74\xe6\x96\xdb\x05\xcd\x62\xc7\x56\x43\x59\xfa\x33\x9b\xd5\x5a\x1a\xa3\x5a\xf9\x2e\x8f\xa3\xe3\x23\x87\x22\xa4\x3f\xc4\x94\x2d\x34\xe5\x7e\x56\x99\x16\x8f\x00\x4f\x1c\x4c\xfe\xa4\xe2\xd8\xf8\xe6\x41\xcb\x59\xc1\x8a\x69\x3b\xdd\xba\xbd\x24\x61\xfc\xa9\x56\xde\xf8\x94\xd5\x03\x79\x1f\xb3\xdb\x0c\x3f\x37\xdf\xda\x50\xb8\x74\xd1\x6c\xfe\xe9\x9e\x35\xfa\xad\xab\xac\x19\x81\x13\x23\xe5\x3f\x0e\x9f\x49\x7a\x9c\xbf\xeb\x8a\x2e\x9a\x4a\x00\x69\xea\xb7\x88\xd3\x30\xf3\x85\xaf\xc5\x18\x34\x8c\x5a\x23\x25\x2d\x7a\x71\x97\x4b\x88\x95\x77\x70\xb6\xc5\xe7\x64\x8b\x89\x64\xb1\xb0\x93\xd8\xad\xd2\x50\x18\xe5\x7a\x05\x03\xfe\x09\xb7\x56\xef\x38\xdd\x57\xc8\xf3\xc0\x54\xa1\x7e\xfa\xe7\x78\xf6\xcf\xe7\x93\xde\xdf\x61\xbc\x36\x83\xdc\x4c\x17\x91\x9e\xc9\xe1\x2f\x59\xbd\x64\x9f\x5a\x31\x35\xa0\x4e\xc2\xdc\x8d\x82\xdc\xdd\xb8\xdc\x6c\x1a\xb9\x43\xbe\x72\xc9\x56\x72\xcc\x60\x61\x5f\x0b\xdd\x41\x49\xf1\xe6\x2e\x1d\x07\x95\xd2\x12\x77\xba\x6e\x64\x5e\xb5\xa0\xc3\x4c\x8d\xf8\x75\x13\x5f\xa7\x88\xfd\x1a\x5c\xf2\xe8\xe8\xdc\x62\xb6\x9b\x2b\xa8\x1b\xf3\x0b\xae\x36\x64\x20\x44\x50\x7a\x2c\xf3\x54\xe8\xb1\xa5\x7c\xfe\xbc\x97\x10\x2f\x9b\x70\x6a\x99\x96\x7a\x45\xae\x13\x5e\x92\x77\x10\x91\x26\x5e\x50\x45\x50\xa2\x06\x69\xe3\x8e\xef\x43\xee\x81\xe8\xb0\xe2\xed\xfb\x28\xfc\x0f\x84\x28\xd3\xb7\xef\x84\x14\x3d\x17\xce\x53\x95\xeb\x88\x02\x5f\x1c\xf6\x2b\x6d\x50\xee\xe4\x51\x96\xfa\x78\x97\xf4\x22\x77\x99\x68\xe8\x53\x6c\x12\x42\x5f\x58\x7a\x25\x93\xf1\x23\xdd\x84\xb7\x16\x9f\x56\x31\x2d\xa2\x5a\x0f\x7f\xf5\x52\x2f\x75\xff\x4f\x17\x6b\xdc\x6e\x54\x9f\x44\xb5\x35\x9a\xd1\x6d\x86\xf4\xa1\xdd\x77\x67\x88\x57\xca\x8a\xd2\xc2\x63\x4e\x55\x0d\x10\xb9\xf0\x6d\x1b\x7e\x82\x12\xfd\x4e\xb0\x96\xfb\xc3\xf6\xc2\x18\x88\xd9\x95\x03\x3f\xa6\xb5\xf6\x36\x75\x8b\x3c\xa8\x17\x2b\x97\x4c\xee\x43\x8b\x60\x4e\x17\x34\x5b\x22\xd7\x57\x5d\xe0\x59\xd5\x3c\x9d\x85\xe7\xd6\x13\x2f\x1b\x60\x7c\x97\xad\x33\x14\xaa\xf7\x3d\x22\xbb\x18\x21\xe2\x4a\xcc\x99\xfa\x8c\x10\x45\x0a\x4f\xeb\x3a\xba\x38\x22\x9c\x7d\xcc\xcb\x2f\xb9\xfb\xca\x3b\x8f\x52\x20\x2b\xa3\x42\xc8\x65\x93\xdb\x1c\xca\x20\xd3\xdf\x23\x80\x70\x0a\xa2\x5d\xbd\xb6\x11\xe8\xb7\xb1\x22\x83\xaa\x06\x78\x29\x72\x8f\x72\xef\xdb\x0e\xc2\x09\x51\x08\xab\x20\xe8\x7e\x25\xd4\x3b\xf7\x9c\x9f\x2e\x1e\xc0\x0f\xc7\x88\x6d\x06\x90\x06\x3b\xf2\xe9\xe6\x67\xfa\x9e\x3c\x38\x51\x40\x6b\x73\x8f\xd2\xac\x3b\x7c\xdc\x74\x50\xe5\xcb\xd2\x97\x2f\xc8\xd2\x77\xdc\xe9\x90\x0f\x5b\x2d\xe5\xcb\x27\xe4\x5e\x4a\xe6\x2a\x69\x19\x26\xa1\x1d\x46\x54\x12\x90\x9e\x3e\xfe\x05\x2e\x9e\x25\x2c\xa6\x37\xdd\x7f\x51\xe7\xe7\x0d\xfe\x44\x4b\x4b\x73\x83\x86\x1f\xda\xac\x61\x47\x4f\x98\xf0\xdf\xad\xc5\x99\x13\xa9\xfe\x86\xae\x61\x9d\xa1\x93\x08\xb0\xed\xc1\xae\x30\x43\x68\xc3\x27\x31\x4d\x36\x84\x9a\xf2\x36\x36\x76\x8f\x22\xcd\xf7\x1a\x3c\x3a\xe1\x29\x72\xe4\x4b\xc1\xc4\x62\x4b\x98\xc9\xc3\xec\x29\xed\x82\x26\xb2\x4e\xa5\x67\x18\xd5\x09\xec\x66\x0b\xdb\xa5\x9e\x94\xf5\x0c\x3f\xa2\x52\x30\xb3\x84\xba\xa6\x3b\xbc\xc3\x3a\x2c\x16\x2a\x4b\x37\xb9\xcf\x39\x1e\xe7\x0d\xce\x71\x45\x1c\x1e\xb3\x7c\x94\x24\xcc\x86\x1f\x10\xed\x20\x79\xa7\xea\xc5\x5b\x43\x3d\x82\xa9\x58\x89\xd6\xcc\x64\x26\xd3\x72\xfe\x7e\x85\x60\xe9\xaf\x1b\xfc\x0e\xac\xb2\x4b\x59\x01\x1b\xc9\xa3\x0c\x8e\x04\xfe\x39\xfc\xa5\x90\x72\x28\x85\x39\xe1\x11\xe2\x67\x68\xed\x41\x1b\x4c\x93\xfe\xd4\x02\x47\x7c\x80\xde\x0e\x50\xf5\x11\xf7\x4f\x1a\x9f\x63\xf4\x1c\x82\x87\xa7\xa7\x7b\x2a\xf7\x50\xb8\xa7\xb2\x2a\x95\x91\xaa\x59\x13\x32\x9c\xfa\x85\x32\xa5\xd2\xc8\x9b\x4a\x54\xbb\xc8\xe6\xf2\x57\x50\xb3\x4b\x53\x15\x3f\xcc\x8a\x84\x6d\x29\x67\xbc\xee\x70\x3d\xcb\xcf\x16\x20\xbd\xb8\xac\x2b\x49\x2c\xd4\x8a\x4b\x68\x5f\x64\x38\xd8\x0c\x91\xc4\xe4\x59\xe1\x5a\xfe\xfb\x63\xf2\x38\xcd\xaa\xeb\x91\x1f\x4d\x5d\xe4\x67\x0a\xf2\x61\xac\x3a\xc7\xf4\x77\xab\x17\xea\x84\xcb\x2d\x86\xf9\xa4\xa8\xa4\x8c\xb1\x8b\x6a\x5a\xf1\xb8\x06\xfc\x6d\x1d\xa6\x7d\xf0\x6b\x6b\x82\xc7\x78\xe5\xcc\x17\x03\xeb\xe4\xe8\x41\xdf\xa1\xc9\x4a\x86\x88\x67\x0d\x59\xb6\xfd\x82\x16\xa7\x2e\x54\xb6\x2d\xd3\x94\xc8\x7e\xbb\x66\xc2\xdf\x31\x17\x37\x3e\x28\x68\x30\xf0\x05\x85\xad\x7a\xb8\xcc\x7f\xa0\x2b\xc3\x32\xfc\x09\x4a\x16\x8b\x5d\x9c\x35\xb5\xf5\xc1\x9a\x17\x37\x5a\x06\x11\xf3\xee\x9d\xe9\x45\xb5\x8a\xc1\x57\xd0\xd1\xdb\xe6\xec\x29\xa3\xb1\x20\x81\xd5\xf7\x94\xb9\xea\x9c\x27\xdb\x08\xf4\x90\x2c\x94\x5d\xba\x22\x19\x82\xcd\xe1\x24\x54\x47\xd7\x45\xe3\xeb\x8c\x7b\x5f\x8f\x4f\x59\x93\xe3\x78\x28\xb3\x78\x09\xab\x45\xb2\x53\x91\xb9\xcc\x2f\xbf\xe0\x2c\xda\x87\xb8\x9c\x53\x15\x3b\xbf\x60\x37\x03\x8f\xdb\xf5\x7f\x7a\x8f\x5d\xba\xc9\x56\x83\xcb\x71\xa9\x89\x3c\x7f\x8a\x70\x07\xae\x58\x43\x01\x04\x00\x96\x12\x7f\x25\xc2\xc6\xff\xaa\x08\xff\xf1\xfb\x43\x86\x61\x99\x7a\x50\x3e\x6b\x61\xfc\xfa\xaa\xa4\xe8\x83\xa6\xe3\xc3\xb3\xda\x9c\x59\x6d\xe4\x63\x23\x66\xf1\x58\x81\xcf\x8d\x1a\xaa\xe2\x56\x0c\xd1\x34\x5b\xdc\xed\xd9\xf5\xe5\x6c\x2e\x2e\x5f\x69\xb7\x65\x51\xcd\xe5\xc1\x11\x02\xec\xc2\x9e\x0b\xe4\xd3\xe7\xf8\x51\xdc\x74\x6c\x7f\xb4\xbd\x1b\x41\xad\x4c\xd7\xcc\xde\xc0\xc7\x36\xb7\xab\x53\x27\x2d\xf5\x4a\x6d\x91\xcd\xa3\x25\x29\xa2\xc8\x21\xde\x12\x5e\x6b\x14\x27\xf1\x11\x7a\x05\xc4\xbd\x5e\xe1\xd1\x07\x1a\x60\xbd\x6e\xf4\xe4\x8f\x48\x3d\x8f\xa8\xdc\xdd\x27\x85\x9f\x9d\x7c\x0c\x95\x70\xa6\xf7\x35\x54\xbf\xdf\xbf\x15\x63\xff\x50\xae\xa9\x3b\x07\x18\x93\x9a\x9f\x4b\xf9\x80\xe1\x1a\x78\xf9\xca\xe9\x65\xde\xea\x18\xfe\x30\x34\xef\x69\xe2\xbf\xab\x6a\x41\xf6\x4f\x6c\x4e\x54\x09\x93\x1a\x00\x00\x38\xc4\xf3\x1f\x3d\x50\x18\x74\x04\xe2\x0f\x64\x10\x99\x6d\x57\x53\x74\xf7\xd8\x70\x37\x25\x41\x71\x2e\xd7\x39\xfe\x4c\xb0\x8f\x79\x7d\x31\xdf\x8e\x37\x56\xaa\x3e\x29\x21\x5b\xf1\x69\xfa\x06\xc2\x0e\xfe\x64\xec\xe2\xee\x45\xbc\xf6\xa6\xf1\xae\x87\x11\xc9\xe5\xcf\xc2\xbd\x5b\xcf\x0a\xbe\x79\xa4\xb1\x33\x27\xa5\x50\xf6\x92\xeb\xc7\x33\xc1\xde\x3d\xaa\xf7\x42\xf3\xe5\xcd\x4f\x78\x95\xd2\x3d\xcf\xaf\xb4\x71\x04\x01\x1d\x95\xde\x54\x6f\x3e\x83\x7b\x25\x8e\xd7\xca\x47\x93\x3c\xe6\xb7\x6d\xb4\x5b\xa9\x02\x52\xfb\xdf\x8f\xeb\x3d\xdf\xe7\x76\xf4\x45\x48\xca\x85\x96\xb3\x42\x99\x09\x56\xc1\x9b\xd4\x96\x62\x96\xcd\xa4\x4b\x61\x1a\x79\x7e\x64\xb0\xdf\xfc\xcf\xe9\x09\x2a\x26\x25\x44\x00\x00\x96\x7f\x37\x94\x3c\x3b\x24\x80\xff\x9d\xff\x6b\xb3\x29\xfc\x7f\x10\xf9\xda\xec\x7e\x1f\xf9\xf5\xd1\x57\xfe\x26\x2a\xfd\x9f\xb5\xa6\xdf\xa7\xfc\x9a\xc2\x46\xdf\xa4\xb4\xe0\xfd\xdb\xde\xe1\xfb\x22\x5f\x73\xc1\xf8\x9b\x22\x1d\x02\xff\xc6\x6e\x7c\x5f\xe6\x6b\xd0\xbf\x9d\x85\x25\xf8\xb7\x69\xe6\x0c\x05\xf1\xff\x96\x02\x04\x80\x80\x16\x1e\x00\x18\x15\xfa\xed\xf5\x5f\x01\x00\x00\xff\xff\x10\x13\xdd\x76\xb1\x0c\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3249, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x9a, 0x26, 0x26, 0x48, 0xa7, 0xa7, 0xad, 0xc7, 0x79, 0x81, 0x25, 0xf6, 0x9d, 0x12, 0xd6, 0x61, 0x48, 0xe, 0xd2, 0x5c, 0xb6, 0x63, 0x51, 0x31, 0x2f, 0x7d, 0xf4, 0x92, 0xe6, 0x8a, 0x1b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
