// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.358kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x67\x58\xd3\xd9\x9e\xfe\xd3\x42\x17\x19\x9a\x85\x26\x18\x9a\x40\x10\x14\xa4\x09\x48\x35\xa1\x48\xef\x48\x28\x21\xc1\xc4\x60\x00\xe9\x45\x20\x80\x48\x11\xa9\x41\x41\x44\x10\x82\x58\x10\x44\x0d\x11\x24\x11\x41\x82\x09\x43\x91\x62\x41\x50\xa4\x05\x03\xd2\xa4\xef\x33\x33\x3b\xbb\xea\x3e\x3b\xf7\xde\xb9\xf7\x7c\x39\xcf\xf9\xf0\xeb\xef\xef\x3d\xef\x29\x18\x07\xa7\x28\xc0\x03\xf0\x00\x3f\x1f\x01\x00\x00\xfc\xb1\x67\x11\xa8\x20\x75\x38\x0e\x07\x47\xf5\x76\xda\x74\x77\x5f\x82\x74\x31\x20\xf5\x0e\xa7\xa0\x0c\xd5\x97\x4a\x36\xbd\x30\x3a\x63\xc0\x4e\x55\xa5\xd7\xa6\x9b\xd3\xfe\x22\x01\xaa\xc7\xe7\xeb\x8c\x22\xe8\x12\x5d\xf8\xa0\xeb\x4f\xd6\x94\xab\x74\x89\xeb\xc7\x9c\x66\x25\x5c\x3f\x17\x1c\x74\x99\x92\x28\xaa\xfc\x14\xa0\x60\xa2\x6c\x98\x6e\x52\x92\x08\x00\xc0\xce\xce\x29\x18\x37\x8f\xb2\x8b\xd5\x94\x03\x00\x00\x58\x00\x00\xfe\xff\x5c\xc0\x00\x00\x60\xb0\x01\xe1\xe8\x40\x48\x10\x2a\x0c\x19\xee\xa7\xee\x8f\xc5\x40\xe0\x38\x9c\x1a\x1c\x05\xf9\x3d\x3b\x48\x10\x56\x1d\x83\x0d\x48\xc9\xa7\x45\x37\x6a\x0b\xa4\x0e\x96\xde\xf6\x1d\x56\x9f\x27\x50\x55\x47\xbc\xaf\xfb\x3c\x4b\xe0\xa2\xf0\x84\xa4\xd6\x13\x35\xf2\x34\x5c\x47\xd3\x6e\xd8\xbc\xa8\x7c\xd9\xfa\xf5\xc4\x75\x9f\xb8\xc2\x80\xd3\xa6\xcd\x99\xc5\xcb\xea\xbb\x60\x54\xf4\x63\x9c\x6c\x57\x1b\x86\xfb\x71\x1f\x51\x88\x10\xe0\x70\xdd\x36\xa5\x8f\x47\xdb\x9e\xee\xa8\x78\x34\x6d\x97\x72\x80\xce\xcb\x23\x87\x1e\x8c\xee\x58\x9d\xda\x2e\xd3\xf9\x00\x91\xd9\xd7\xde\x9d\xba\x1e\x73\x2e\x65\xf8\x5e\xf5\xe9\xb2\xe7\x24\xd1\x84\xf5\x6f\x1c\x73\xa7\x45\x0b\x95\x77\xce\xb9\x5b\xca\x66\x63\xc5\x2d\x23\x2c\xe3\x1d\x87\x6d\x0e\xbf\x32\xbb\xc2\x29\x3f\x72\x2c\xe5\x50\xf7\xb5\x90\x0a\xa6\x42\xb1\xaf\x9c\xeb\x09\xde\x1b\xce\x07\x32\xed\x6b\xbb\xb2\xea\xb2\x9c\x2a\x0e\x1d\xf2\xd7\xa2\x6b\x4d\x7a\x5a\x22\xfd\x33\xd6\x19\xcc\xb0\xe9\x88\x6c\x07\xa2\x2f\xd6\xda\x72\x2c\x3b\xde\xb1\x73\x7c\x0a\xe1\x2a\xa0\x21\xe4\xb9\x79\x69\xde\xec\x40\xaa\x50\xf5\x03\x71\x0b\x65\x7b\x42\xad\x12\x6e\x20\x5c\xb0\x69\x48\x56\x7c\xe7\xea\xc6\xc8\xb7\xb3\xb0\x81\xf1\x67\x4d\xd4\x38\xf3\xf1\x94\x9e\x6c\xba\x7f\x12\x04\x5f\xe8\x51\xb0\x7f\xdb\x8b\x08\x2a\x40\xd9\x64\x9d\x8c\x96\xc1\x1d\xe4\x3b\xb2\xb8\x35\x84\x00\x13\x0c\x90\x9d\x59\xf2\xf3\xae\xe8\xcf\xbe\x90\x3d\x3a\xb9\x70\x54\x9e\x64\xe4\x7e\x0b\x72\xd2\x64\xe8\x41\xfe\x45\x6a\x97\x70\x38\x7e\xcf\x96\x4b\xff\xab\xdd\x1f\x49\xcd\x05\xca\x28\xd2\x12\x0b\xc1\xa9\x2f\xc3\xb3\x94\xb4\xb2\xeb\x66\x73\x88\x4c\xc5\xec\x6b\xef\xbc\x5f\x10\x99\x54\xc1\x1a\x21\x4f\x30\xc5\x6a\xf6\x0b\x78\xee\x2d\x13\x49\x40\x2c\xc5\x0a\x18\xaa\xe5\x5c\x2d\xb2\x7c\x59\x6d\x6e\x47\xcd\xd5\x18\xb9\x10\x89\xf4\x79\x2f\xdd\x07\x1f\xa7\x1d\x8d\x91\xb0\xbc\x16\xf1\xd1\xf3\xe9\x12\x8e\x3f\x3c\xc4\xf4\xac\xe5\x2a\x6b\xe4\x76\xda\x0d\x8d\x24\x96\x7b\x79\x59\xeb\x39\xd8\xec\x12\xd9\x1c\x9a\xee\xc1\x0b\x0e\x04\x67\x90\xef\x17\x24\x91\x5e\x4f\x42\x29\x6d\x9d\x5a\x54\xac\x7c\x2c\xfb\x35\x7c\x6e\x90\xe3\x55\x3d\x88\x58\x98\x14\x12\x53\x02\x4d\xe0\xe0\xb9\xff\xdc\x44\x6a\x0f\xf4\x24\xc6\xa9\x54\xe2\x8e\x8a\xc7\xe5\x53\x8f\x3e\xeb\xbf\x20\xd3\xb9\x8d\x0f\xa4\x28\xf3\xe7\xe9\x28\x79\x62\x1a\xd9\x6b\x9a\xe5\x65\x97\xe4\x1f\x28\xda\xe6\x6c\xcf\xd7\xad\x6c\xf0\xc0\x1b\x73\x9f\x20\x3d\xd8\x26\x2b\x40\x97\xe7\xec\xec\x8f\x0c\x77\xe4\xaf\x56\x6d\x89\x26\xf4\xa3\x0a\xbf\x2c\x94\xce\xd9\x19\x58\x17\x95\xe9\x32\x5c\x1f\x67\x33\xd7\x6e\x42\x39\xf4\x9a\xa7\x85\x22\xaa\x54\x2b\xfb\x2d\x66\x24\x85\xd5\x8a\x49\xd4\x5a\x15\x91\x88\xd6\xd2\x6d\xde\x3f\x01\x8b\x5e\xd5\x01\xf9\xb0\x03\xc0\x75\xae\xbf\x02\xac\xce\x3f\x06\x6c\x68\xd4\xd9\x30\x78\x24\x24\x34\x2c\x00\x8d\xf2\x83\x20\xd0\xf0\xff\xde\xb3\x3a\xb7\x57\xa1\x15\x56\xa2\xad\x8c\xd3\x0b\xb7\x52\xf9\x5e\x65\x94\xc6\x04\xf5\x3b\x61\xce\x67\xe7\xd1\x5e\xfb\xf8\xb9\x78\xa0\x0a\x54\x38\x6f\xb3\x69\x29\xa7\xee\xc4\xcd\x2e\x73\x97\x27\x16\xdf\x21\x27\xcb\x91\xe3\x4f\xb7\xae\xe2\x69\xaa\x42\x1f\x91\x5b\x5c\x80\xac\xb8\xee\x6e\x05\xbc\x90\xb5\x15\x01\xba\x79\x7c\x61\x88\x1b\x4a\xe4\xd6\xea\xa9\x13\x3a\x8a\xed\x6c\x78\xda\xe9\x0b\x72\xe8\xb1\x89\x3e\x66\x51\x2f\xdb\xd6\xda\x37\x2d\x37\xbf\xef\x96\x97\x45\x9a\x22\xad\xc6\xae\xa7\xce\x4d\x64\xf0\xa8\xf5\xa8\x71\x46\xe9\x37\x2e\x4f\x82\x74\x22\xec\xa5\xfc\x7a\x93\x6d\xd3\xc3\x44\xa5\x0d\x77\xc9\xd7\x27\x7c\x66\xdc\x6d\x25\x02\xda\x0a\xc7\x38\x8d\xa6\x35\x37\xa9\x9e\x9b\x2f\x58\x17\x2d\xc5\x99\x13\x90\x85\x75\xcd\x52\xb2\xfa\xfc\x2a\x85\xd7\x20\xfa\xc3\x1a\x62\x54\x73\x76\xab\x46\x55\xe5\x9d\x6a\x91\xfd\x83\xd0\xb8\x90\x41\xd4\xbe\x8f\x11\x15\x4b\x4f\x0a\x3e\x2b\xcc\x88\xa0\x20\xe3\xf2\xc9\x13\x0a\x36\x4d\xbf\xde\x6d\x39\xc3\x5b\x35\x63\xa9\xd1\x20\x41\x14\xc0\x7b\xb5\x72\xc4\xa5\xac\x49\x16\x7e\xca\x6d\xd3\xfe\xdc\x7c\x7d\x53\x36\x36\xd2\x60\xe1\xf1\xee\x75\xfa\xf5\x8c\xd1\x59\x1e\xf3\x91\xca\x93\x43\x7e\x49\x0f\x8a\xf8\x2f\x6a\x84\xd1\xd2\xb8\x0e\x69\xb6\x88\x74\x87\x2f\x94\x74\x08\x33\xba\xc3\x95\x9a\xc8\xe9\xa1\xcb\xfc\xf6\x81\xc6\x6e\xfe\xb9\xc7\x3f\x27\x1f\x1f\x4f\x16\x0e\xb2\x8b\xda\x2e\x47\x04\x90\x2f\x57\x31\x82\x27\x12\xd7\x1b\x6d\x66\x7a\x4b\xd8\xee\xea\xcb\x36\xce\xbc\x8d\x9b\x7a\x7b\x2e\xe9\xfd\x4d\x46\x87\x01\x34\x2f\x53\x70\xdf\x6c\x3e\xa8\x6c\x2d\xd6\x2a\xb5\x6a\xba\x5f\x99\x18\x5e\x8b\x83\xd6\x6e\x5e\x68\xd6\x0f\x61\x97\xb9\xb5\x62\x21\xf6\x41\x6b\x69\x4f\x0b\xdd\x5a\xee\x40\x1e\xbf\xba\xb5\x42\x79\x99\x13\x5d\x23\xa4\xb0\x86\xd7\x7a\xb6\x4e\xe4\xb2\x9e\x87\x2d\x6a\xaf\x0a\x8b\xf4\xee\xdd\xfc\x72\xae\xa3\x03\x57\x57\xf8\x97\xc4\xfa\xc0\xfe\x40\xde\x7d\x1f\xb2\xbd\x10\x27\x56\x8a\x40\x85\xed\x50\x57\x33\x24\xad\x42\x55\xb9\xaa\xc0\x16\x2f\xc6\x31\x80\x4e\x17\x29\xae\x4e\x93\xa3\xc1\xd5\x12\x4d\xf7\x60\x76\x43\xd5\x47\xe3\xac\x7a\xc9\xa0\xbb\x7c\xe4\x99\x1b\x37\x03\xaf\x3e\x13\x28\x54\x94\xa6\xe2\x20\x91\x43\x9e\xe5\x0f\xc1\x9d\x6c\x60\xf1\x4f\xb5\xc4\xe7\x05\xab\x04\x6d\xf7\x52\xbd\x40\xfa\xd2\xca\x8b\xfd\x59\x27\xe9\x7a\x1c\xf5\xf8\xf4\xaa\x19\x41\xc5\xc6\xe0\x17\xed\x87\x53\xf7\x5e\x8b\xac\x73\xbc\x52\x63\x87\x6d\x6b\x32\xa0\x9b\x0d\x6a\xc2\xba\x6a\x67\x09\x17\x2b\xae\xa6\x23\x23\xbc\xaa\xfb\x09\xac\xe0\x1d\x33\x50\x9a\x1c\xfd\xa6\xbf\xaa\xd3\x3d\x4a\x49\x04\xd4\xe0\xa2\xe4\xc9\xf4\xd6\x9e\x27\x5d\x82\x77\x1b\x85\x2b\xc5\x92\x7b\xc3\x04\xc3\x7d\x8b\x9b\x8d\x30\x1b\x6b\xf6\xc1\x39\x35\x6c\x9d\x25\x67\x37\x12\x2e\x68\x85\x7b\xac\x9a\x64\xc9\xd6\xec\xb9\x4f\xb2\xd7\x41\xc7\x94\x19\x0e\x6b\x32\x02\x0f\x90\xd9\x5a\x37\xc2\x4a\x51\xc8\xa9\x13\xae\x9e\xc9\x5d\x17\xdf\x38\x97\x03\x39\x59\x55\x7c\xf6\x5b\xac\x66\x04\x83\x44\x7f\x8f\x06\x90\x64\x34\x45\xb9\xbe\x09\xe8\x33\x33\x26\x71\x55\xf7\x73\x90\xa5\xef\x17\xdc\xb1\x18\x08\x4e\xc3\xa1\x8d\xe1\xb0\xbd\x72\xd8\x37\x4e\xf9\xd7\x22\x25\xf1\x43\x11\xc2\x5b\x3e\xc4\x01\x6a\x11\xdd\xd0\xaf\xf7\xd1\x5d\xf3\xe2\xee\x36\x27\xdc\xa1\x86\x23\xa6\xfa\x03\x0a\x8b\x2b\x8b\x8b\x98\xf2\x37\xac\x99\xc0\x8f\xdb\x2d\x95\xab\xe6\xd2\xed\x62\x05\x72\xaa\xda\x49\x61\xd6\x23\x0a\xf1\x18\x17\x77\xef\x62\x7b\x97\xb2\xd1\x61\x37\xba\xf7\xb2\xfa\xdb\x4d\x50\x82\x91\x91\xa1\xd6\xc3\x5f\xda\x4c\x02\x8e\x99\xeb\x81\x6a\xeb\x13\x0d\x09\x34\x6f\x6d\x87\xa0\x4e\xc4\x24\x1a\x62\x21\xff\x32\x48\x1b\xf6\x70\x42\xf8\xd0\x14\x94\x96\xf2\x3a\x3a\x7a\xf7\x81\x6e\x8f\x4b\xc1\xa1\xf1\x8f\x31\x23\x8b\xc5\xe3\xcb\x2d\x41\x7a\xf7\x72\xa7\xd5\x8a\x9f\x90\xd4\x6f\xb9\x04\xd1\x6c\x21\x8e\x16\x01\xfc\xca\x49\x39\x4f\xf1\x23\x0a\xc5\xb3\x2b\xd8\x4b\x1a\x43\xec\x26\x41\xd1\x30\x29\xba\xde\x1d\xa6\x69\x8c\x1b\x24\xdf\x01\x7d\xe4\x83\xd1\xfd\x24\x81\xa9\x60\x49\x21\x2a\xd1\x2d\xf5\x70\x9c\x09\xcc\xd9\x9f\x16\x25\xda\x9a\x9d\x3c\x3c\x6c\xb4\x70\xa7\x8a\xb7\xfc\xeb\x26\xc8\x7a\xb4\x22\x36\xc7\x67\x33\xf9\x1d\x83\x29\x8a\x7f\x16\xdc\xce\x07\x46\x90\x87\xc7\x9d\x03\x3d\xb5\x4d\x9c\xbb\x07\xd2\xf7\x4d\xb4\x04\xa3\x3f\xc2\x6e\xf8\x28\xba\x8b\x78\x27\x8d\xcd\x33\x5e\x1d\x0c\x46\x66\x66\xba\x80\x5f\x91\x59\x5e\x39\xb7\xc0\x18\xc5\x9c\xf1\xfd\xcc\xc6\xa5\x0a\xb9\xf2\x90\x3c\x39\x9a\x65\x48\x73\xe5\x0b\x98\x41\xec\x74\xd5\x2f\x73\x82\x41\xdb\xe0\xac\x0e\xaa\xc3\x19\xd0\x14\x0f\xf1\xf9\x05\x0d\x31\x42\x89\x6a\x4c\x3c\x65\x99\x61\x6d\x36\x48\x14\x96\x19\x45\xaa\x7a\xef\x8d\x28\x64\x36\x2b\x6e\x84\x7c\xd2\xb7\x97\x99\x2d\x2e\x0a\x18\x6d\xb0\xc9\x7c\xb3\x76\xbe\x41\xa0\xf2\xf8\x10\xa7\x38\x8d\x98\xf5\x21\x52\x49\x35\x2e\xf1\x21\xfe\x86\xfa\xb0\x95\x7f\x87\x49\x9a\xf3\xd8\xad\xd9\x45\x2d\x93\xe4\xd0\x01\x8f\xc1\xc9\x5b\x0c\x41\x97\x3a\x92\x14\xe5\xbc\x2a\xb3\x01\x21\xd5\x96\xad\x4f\x98\x7a\xbd\xae\x07\xa2\xce\xc7\x8c\x0d\xf0\x6a\xf5\x2f\x62\xa3\xaa\xef\xad\x82\x24\x5f\x66\x19\x21\x1f\x61\xa5\xa2\xa2\x96\xe7\xf4\x2d\xdc\xa3\x0c\x4b\x9b\x8c\xe0\x84\xc2\xdb\x7e\x3d\xd8\x56\xe1\xe0\x6f\x61\xa1\x3b\x86\x53\xd3\x3a\x1f\xe0\x3c\x6b\xef\xc9\xf3\x35\xf9\x8f\x76\xd0\x61\x83\x52\xb0\xa9\xf2\x6f\x62\x81\x51\xf9\xcc\xf8\x9a\xd0\x86\x50\x7c\x83\x6e\x4f\xc7\xd8\xb4\x09\x29\x86\x8d\x3c\x87\x17\x35\x5e\x26\xd9\x5e\x35\xdc\xff\xe5\x4b\xe2\x71\xca\x20\x8b\xe9\x55\xc5\xbd\x18\xb5\x75\xda\xd4\xb2\x6f\xe2\x7d\xd4\x4a\xde\x94\x52\xb0\x34\x8b\x96\xc0\xf6\x27\x09\x53\x13\x4b\x55\x64\xb9\x00\xc0\x48\xf4\xaf\x48\x58\xf7\x5f\x25\xe1\x3f\xae\x3f\x68\x38\x36\xa7\x8d\x7e\x55\x63\x77\x0a\x2b\x2a\x23\x17\xc7\x06\xc6\x7d\x71\xca\x8a\x9e\x7b\xda\xe1\x25\x8e\xf6\x75\x0e\xca\x62\x56\x9d\xec\x6f\x64\xf8\xec\x75\xe0\xcb\x5a\x62\xa1\xe6\xbb\x1f\xe9\x33\x17\xee\x4c\xa6\xf4\x9b\x49\x8b\x9a\x0a\x18\x0d\x91\x38\x29\x59\xd2\x48\x53\x33\x3e\xd7\xb4\xf3\xf9\x16\xba\x56\xec\xfc\x8d\x11\x56\x50\x3f\x65\x8f\xc8\xbb\xf2\xed\xdc\x47\xca\xcf\x3f\x36\x77\x09\xbf\xe2\x28\x7a\xf3\x80\xf6\xb7\xda\x53\xeb\x5f\x7a\x41\x6f\xe6\x24\x42\xf0\x61\x6d\x79\x61\xe5\xb1\x3e\x1d\x6d\xfa\x97\xdd\xcc\xaa\xfd\xf3\x39\xaf\x94\x3f\xbd\x04\x99\x7c\x31\x92\x5c\x37\xe1\x75\x69\xb3\x76\x2c\x26\xed\x1d\x98\xb8\xec\xc5\x02\x9e\xe9\x9b\x2f\xe0\xcd\xbd\x45\xbf\x8a\x6d\xd7\xca\x67\x1e\x06\x1f\xf7\xa7\xc7\x97\x50\x1a\xb4\x5b\xaf\xf3\xcf\x3f\x1f\xcb\xf4\xd3\x5c\x6c\x2c\x23\xf1\x55\xf7\xd9\x85\x76\x7d\x75\x3d\x2c\x32\x71\xee\xe4\x31\x54\x52\xe0\xf4\xae\xc9\xe0\xf6\x89\x27\xa7\xb7\x76\xec\xa2\xea\xce\x24\x85\xd7\x53\xaa\x78\x7b\x71\x69\x7e\xf1\xc4\x10\xa2\xcc\x4c\x21\xe5\x73\xfc\x32\xa2\x29\x43\x37\xca\x6c\x57\xfe\xed\x8f\x6f\x4a\x65\x30\x4a\x5d\x12\x5b\xbb\xec\x12\x2e\xc3\x0b\xe1\xfd\x6a\x86\x31\xed\x9f\xf2\xf7\x7f\x1d\x1d\xac\xec\x32\xfa\x9f\x49\xbc\x21\xc5\xbc\x96\x67\x03\x00\x14\xfb\x7f\xf4\x3b\x0c\x0f\x43\xa1\xff\x98\x03\x3a\xbb\x2d\x23\x45\x63\xb7\x19\x6b\x4b\x8c\x2b\xc6\xfe\x32\xd3\x7b\x18\xe2\x6e\xd8\x58\xca\xc9\xfe\xab\xb1\xa2\x7b\x4a\xe0\x76\x5c\xba\xa6\x96\x80\xb5\x37\x29\x6a\x79\xd7\x32\x5e\x6d\x4b\x97\xff\x1e\x2a\xb9\xf2\x29\xd2\xad\xf5\x0c\xef\xaf\xf7\x55\xb8\xf3\x53\x4a\xa4\x62\x1d\x3e\xf9\xf9\xbb\xbd\x52\xbc\x8d\x28\x92\x31\x34\x77\x2d\xa7\xbb\x9c\xfb\xd6\xc6\xe4\x05\xd4\x15\x7a\x52\xdd\x38\xb5\x6e\x97\xd9\x5c\xaa\x7c\x97\xe4\xbc\xb0\x63\xa6\xd6\x4a\xe3\x11\xdf\xfb\x7e\xec\xf0\xb3\x3d\x8e\xc7\x9e\x07\xa6\x9c\x6f\x39\xc3\x97\x1d\x6f\xec\xbf\x45\x6b\x29\x1d\x35\x9b\xb4\x2f\x49\x27\x2d\x8c\x0c\xf4\x19\xfe\x59\x7d\x9a\x82\x5e\x19\x01\x00\x80\xd5\xdf\xd5\x2b\x1b\xbb\x28\xf0\xbf\xf5\x7f\xaf\x6c\x05\xfe\x4f\x47\xbe\x57\xd6\x3f\x5b\x7e\x2f\x31\xc0\x3f\x58\x65\xfe\xb3\x3a\xf8\x67\x97\xdf\x2f\x8c\xce\x0f\x2e\x0d\x39\xfe\xb6\x52\xf9\x39\xc8\xf7\x58\xd0\xfd\x21\x08\x85\xe7\xdf\xd8\xc4\x9f\xc3\x7c\xdf\xf4\x1f\x6b\xb1\xe6\xfb\xdb\x30\x3b\x05\xe3\x02\xfd\xe6\x82\x0b\xe0\x02\x5a\xd8\x00\x00\xca\xff\xdb\xeb\xbf\x02\x00\x00\xff\xff\xb1\x52\x71\xd1\x1e\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3358, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb3, 0x6e, 0x65, 0xfc, 0x1f, 0xbe, 0x74, 0x5f, 0x82, 0xd6, 0x7d, 0xee, 0x19, 0x46, 0x1d, 0x33, 0xad, 0xc6, 0xcc, 0xed, 0x4c, 0x2, 0x29, 0xc7, 0x8f, 0xf4, 0x6f, 0x3d, 0x42, 0x5c, 0xf1, 0x8c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
