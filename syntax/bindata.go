// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.264kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x77\x54\x53\xf9\xba\x3d\x08\x09\x5d\x54\x8a\x0d\x10\x51\x42\x31\x10\x8a\xd2\x5b\xa4\x9a\x80\x0a\x42\x00\x05\x95\x9e\xc4\x84\x20\x55\x04\x34\x94\xd0\xa4\x58\x40\x12\x1c\x10\x91\x00\x41\xa4\x48\x51\x20\x82\x80\x05\x0d\x24\x48\x91\xa2\x10\x14\x4b\x24\x91\xc0\x60\x40\x10\xe4\xad\x99\x79\xf3\x9e\xfa\xd6\x9b\x7b\xef\xdc\x7b\xfe\x39\xeb\xf7\xc7\xd7\xf6\xda\xdf\xfe\xf6\x61\xa4\xb0\x88\x1c\x20\x06\x88\x01\x3f\x7f\x52\x00\x00\xf8\x13\x42\x82\x30\xc1\x3a\xbe\x61\x61\xbe\x98\xfe\x6e\xe7\x9e\x9e\x0b\xb0\x67\x2c\x58\x9d\xeb\x61\x04\x0b\xfa\x54\xc3\xb9\x1f\xc9\x64\x0d\x1d\x82\x6a\xf5\x3b\xf7\x88\xb8\xa4\x53\x10\xa6\x12\x27\xdd\x31\x14\x13\x1a\x4a\x02\xb1\xdc\xbc\xa4\x49\x35\xa1\x2d\x1b\xbb\x71\x37\x7b\xbc\xcf\xdb\x8d\xe2\x6c\xce\x2f\x7d\x1b\x00\x81\x6b\x5a\xa4\xc1\x0b\x88\x00\x00\xac\xad\x1d\x46\x8a\x8a\x69\xa2\x1c\x39\xae\x00\x00\x10\x00\x00\xf8\xff\x7b\x51\x03\x00\x00\x4f\x08\x88\xc4\x05\xc2\x82\x31\x11\xe8\x48\x3f\x1d\x7f\x02\x1e\xe6\x1b\x16\xa6\xed\x8b\x81\xfd\xde\x1d\x2c\x98\xa0\x83\x27\x04\xc4\xe5\x32\xc6\x6e\x1a\x4a\xa5\x0c\xf7\xba\xd7\xe2\x36\x7f\xe9\xd9\x79\x21\x6a\xb8\x7c\xb3\xae\x87\x4a\x26\x70\x48\xf1\x9a\xc4\x15\xf1\xe6\x65\xcb\x64\xe6\x4a\xc2\x5a\xad\xdf\x8d\x43\x35\x96\x5e\x9b\x86\x47\x98\xca\xf5\x13\x54\xdf\x10\x72\x96\xc7\x7a\x5b\x93\x7b\x02\xe1\x99\x88\x69\x7f\x08\x65\xb0\x5c\xf6\x35\xa7\x63\x26\x77\x60\xe4\x40\xef\x0d\x9b\x8c\x51\x67\xfd\xde\x0c\x1e\xab\x3d\xaa\x62\xb6\x7b\xbb\x58\xbe\x51\x96\x5f\x90\xdd\xaa\x99\x59\x27\x6f\x71\x80\x00\xf3\xf3\xc9\x68\xb7\x59\x4e\x59\xd8\x91\x31\x4f\x3e\xdf\x0a\x55\x4e\x9b\x1a\x2f\x89\x96\x79\x6b\x94\x37\x2e\x37\xe0\xc4\xbb\xfc\xe0\xa6\xb3\x0d\xbd\xf3\x21\xfe\xf3\xe9\x32\x1e\x84\xbc\xe2\x6d\x6b\x6c\xa9\x96\x98\xee\x2d\xae\x96\x8c\x22\xe9\xda\xd3\xb4\x8c\xee\x18\xba\xa6\x57\x57\x65\xf6\x1a\xb3\xbc\xd1\x4a\x37\x9c\x63\x07\x59\xd9\x8f\x91\xed\xa7\x73\xc7\x24\x9b\x86\xb9\x1a\x96\xba\xe6\xbd\x72\x0e\x46\xd7\xfc\x88\x18\xcf\xa9\xeb\xc9\x0e\x19\x9a\x6d\x26\x79\x8d\xba\x88\xf4\x67\x6e\x76\x97\x6e\x55\x9f\xaa\x7d\x04\xae\xfb\xa2\xbb\xe8\x20\xdb\xb2\xcf\x7d\x48\xb4\x49\x49\x59\x72\x93\x7a\xf2\x8b\x56\xa2\x59\x9c\x66\xc3\x60\xa5\xf7\xdc\x07\xc4\xbe\x0a\xa7\x53\xd8\x57\xd4\x45\x3d\x87\x12\x47\x59\xb6\x25\xd7\x5a\xed\x8a\xa8\xb4\x09\x3f\x61\xed\x41\x50\xc6\x42\x22\x46\x7e\x6b\xd3\xf9\xdd\xa2\x1d\xf6\x39\x1e\x62\x71\x88\x00\xdf\x4e\x3c\x2e\x76\x50\xde\x55\xe2\x94\x8b\x11\x1c\xc1\x78\x8f\x9a\x39\x30\x45\x5d\x0b\xb4\xaf\x9d\x4f\xb0\x66\x3f\xb7\x7c\xd0\x2a\x29\xa3\xd7\x1c\x32\xba\x37\xb6\x33\x19\x73\x4f\x48\x70\xfa\xb6\x2d\x19\xbd\x84\x26\x41\x1c\xe6\x8d\x7d\x27\x2d\x17\xf6\x5a\x99\xc1\x72\x2e\x47\x0f\xd7\xca\xa8\x77\x06\x88\xbe\xa9\x5b\x3a\x77\x02\x89\x86\x58\xfa\xd4\x9f\x78\x93\x3c\x10\x14\x77\xfb\x2e\x21\xa4\x6c\x7d\x48\xf7\xed\xe8\x35\x76\xca\xd9\x6d\x19\xca\xfb\x59\xaa\x82\x15\xa6\xb6\xf6\x14\x57\x41\x73\x27\x56\x2d\x37\x37\x4f\xe3\xd7\x4e\x94\xc4\xf4\xd1\xeb\x7b\xc4\x45\x77\xd5\x64\xd6\x66\xcf\x82\x42\x15\xec\x8b\x9c\xf1\xd3\x74\xb7\xbe\xc8\xe2\x46\x8c\xd6\x2a\x48\xa5\xf3\x17\x70\xe4\x49\x0d\xb5\x46\x97\xc8\xe3\x0d\x95\x68\xf8\xfe\xf1\x82\x9a\x2d\x03\xfa\x4a\x00\x69\x43\x19\xd4\x69\xa2\x18\xd7\xf8\x5c\xa2\x78\xa6\x0d\xd8\x4d\x2f\xff\xf4\x5c\xb0\x2d\xfd\xbe\xc3\x82\x2a\x47\x4f\x71\x7d\x08\xd7\x4d\xec\x66\x56\x8f\xdd\x80\x84\xf1\xe6\x7d\x44\x5c\x8e\xdd\xc4\x0d\x74\x03\x6b\x89\xc0\x5d\xd1\xf9\x56\x35\xd0\x33\x3e\x4f\xb8\xa7\x74\x5e\x11\x66\x11\x9e\x00\x0b\x15\xf0\x04\x56\x77\x65\x38\xbc\x32\xf6\xab\xbc\x3b\x17\x5d\xb7\xd3\xc2\x6d\x1b\x4e\x4e\xaf\xbf\x55\xf9\xaa\xf9\xeb\xd4\xe7\x13\xff\x43\xe0\xcb\x90\x27\xdd\x21\xeb\x00\x60\x02\xf4\x57\x04\x36\xfa\xc7\x04\x0e\x8f\x09\x89\xf0\x3d\x03\x0b\x8f\x08\xc0\x61\xfc\x60\x41\x38\xdf\xff\xde\xbb\x2a\xcf\xde\xf0\x12\x47\xb9\x76\xd6\x89\xb9\xb2\x14\x89\xde\x8c\xc2\xd8\xe0\x41\x37\x7c\x54\xf6\x15\xc6\x8b\xe3\x7e\xa8\xa3\x98\x3c\x2d\x91\x5b\x42\x06\x9a\x29\x6b\xf1\x5c\x81\x68\x31\x91\x7c\x9b\x9e\xa4\x4a\x3f\x77\xa2\x7d\x91\xc4\x80\xca\x4c\xa1\x57\x41\x80\x8a\x82\xc9\x06\x08\x49\xc6\xc9\x91\x82\x58\xb1\x9c\x1b\x11\x45\xd0\x44\x0d\xfa\xaa\x64\xf6\x11\xba\xeb\xef\x77\x9f\x04\xbb\xf6\x39\x9f\x35\xb6\xaf\x53\xe9\x68\x1f\xf8\xa8\x3a\xbb\xad\xcc\xdb\x3e\x55\x9d\x51\x71\xa8\xaf\xca\x53\x76\x78\x9f\x13\xdb\x3a\xa3\xf0\x0b\xe8\x18\x45\x99\x88\x7c\xba\x6b\xb9\xe9\x60\x53\x23\x51\xe3\xab\x97\xe2\x8b\xfd\xc7\xa7\xbd\x0e\x6e\x0e\xe8\xb8\xfa\x5a\xc4\xea\xa3\xfe\x4a\xd7\xb1\x95\xc7\xfc\x74\x07\x05\xde\x3b\xd8\xdc\xb2\x7e\x21\x5d\x67\x76\xb1\x53\xdc\xfc\xec\xe4\x52\x10\x5b\x9f\xbb\x5a\x01\xd5\x1a\x87\xe6\xbb\xdc\x09\x8f\x0f\x1d\xc6\x6c\x9b\x8a\x2e\xf9\xdc\x9c\xf7\x1e\x32\x2d\x8b\x81\xbd\xd9\x95\xf4\x0e\xe2\xdc\xf4\xbc\xba\xed\x94\x38\x75\xda\x41\xb7\x7e\x33\x4d\x8a\xe4\xdd\x2e\x1c\x9f\xbc\xa4\x78\xf5\xed\xa5\x0e\xc3\xf7\xad\xd7\x57\x54\xe2\xce\x98\xcf\xdd\xdb\xb0\xcc\xbc\x9e\xc1\xe6\x8a\xd9\x8d\x95\x1e\x18\xf1\x4b\xbc\x93\x2f\x99\xae\x1b\xc1\x48\x05\xed\xd1\x6f\x93\xed\x89\x9c\x2b\x78\xb2\x91\xd5\x13\xa9\xd1\x44\x4f\x0b\x17\x48\xba\x04\x5a\x7b\xfa\x5f\xb2\x7c\x9f\x64\xf9\x26\x69\x63\xf0\xa1\x98\x6f\xc5\x41\x01\xf4\x8b\x54\x16\xf6\x1d\x71\xb9\xc1\x79\xba\xbf\x40\xa8\xda\x4c\xa5\x61\xfa\x55\x3c\xe7\xd5\xe9\xc4\x89\x9b\xac\x27\xe6\x88\x2b\x99\xd2\xdb\xb8\xb9\xe0\xa2\xa5\x38\xc7\x14\xea\xc7\x41\x4d\x5a\x64\x65\x18\xa2\x72\x25\xa1\xd5\x2c\x74\xdd\x8e\xb2\x05\x7b\xf9\x49\x83\xcf\x5b\xda\x98\x4e\xaa\x3b\xaf\x48\xea\x38\x41\x8a\x8b\xdc\x98\xba\xa1\x57\x2b\xc4\x9d\xb8\x55\xb2\x17\x4d\x8f\x1e\xc4\x6c\xd5\xe2\xb7\x8c\x8f\xcf\x0a\x2e\x1d\x71\x05\x3d\x8b\x9c\x21\xd6\x05\x0e\x06\x8a\x6f\x9b\xcc\xf6\x0e\xda\xbf\x90\x0f\xbe\xfa\x08\xe1\x61\x8b\x66\x94\x40\x35\xa9\x79\x07\x49\xf2\xc2\x43\xb8\x34\x59\x72\x79\xaa\x2a\xc3\x57\x9b\x68\xb3\x05\xbf\x01\xa1\xc3\x8e\x77\xec\xa7\x83\xab\x25\xe8\xd3\x37\x6e\x06\x5e\x7b\x20\x75\x55\x5d\xb9\x2b\x0c\x76\x66\xe4\x58\x71\xa3\x5a\xb7\x90\x9a\xc2\xdb\x4a\xda\xc3\xbc\x45\x8a\xa1\x57\xa1\x69\x20\xf3\xf3\xc2\xe3\xed\x59\x07\x98\xa6\xc2\x75\xa4\x34\xea\xb4\xb4\x7a\x03\xf6\xf1\x23\xbd\x94\xad\xbf\x9c\xa9\x3a\x72\xb9\xe2\x10\xa1\xa3\xc9\x9c\x69\x3b\xac\x8f\x7c\x56\xc9\xa5\xa4\x97\x5c\x4b\x43\x47\x7b\x97\x0f\x52\xf8\xd8\x35\x5b\x70\xaa\x2a\xf3\xa6\x3f\xd4\xad\xa6\xb3\x20\x1a\x61\x9e\xae\x78\x20\xad\xbd\xaf\xf9\x99\x74\x75\xc3\xc6\x52\xf9\xa4\xfe\x08\xe9\xc8\x93\xe4\x56\x2b\xfc\xd7\x25\x17\x6c\x4e\x85\x50\x77\x41\xc8\xd7\xf3\x09\x06\x91\x47\x17\xe1\x59\x2a\x15\x5b\x6a\x5b\x5c\x8c\x70\xb1\x45\x16\xa3\xfa\xac\xc0\x9d\x74\xa1\xf6\xaf\x11\x85\x18\x34\x67\xbf\xc7\xb1\xa4\x67\xe9\x2f\xdd\x8b\x81\x9c\x2c\xaa\x84\xcb\x2a\xbf\x35\x88\xd5\xc2\x9c\xc0\x01\x68\x3a\xae\x53\xb3\xae\x09\x18\xb0\xb5\x6e\x01\x95\x0f\x0a\xd3\x95\x6b\xf3\x6e\xdb\x0f\x61\x53\xc3\x70\xd6\xbe\xc8\xad\xaa\x84\x97\x6e\xb9\xbf\x9c\x51\x24\x8d\x44\x6f\x5c\x3d\x4e\x1b\xea\xca\x67\x5a\xf8\xf5\xdf\xad\xb6\x23\xf7\x74\xb8\x85\xed\xa9\xdf\x6b\x63\x36\x04\x99\x5f\x98\x9f\xc7\x17\xbf\xe4\x4f\x07\x4e\x7d\x6b\x2b\x5d\xb4\x53\x7e\x24\x9f\xa7\x0a\x35\x4c\x8c\x70\x1a\x83\x9c\xc3\xa3\xbc\x7c\xc8\x2e\xa8\x22\xf6\xa8\x27\xd3\x47\xa0\xf3\x6a\x05\x7c\xde\xca\xca\xc2\xa0\x71\x53\x07\x3c\xc0\xd8\xce\x14\x5c\x59\x47\xb4\xa0\x30\x7c\x0c\x5d\x83\xbb\x83\x3e\xe0\x60\xf6\xbb\x9e\x06\x1b\x22\x1b\xdf\x6d\xdc\xc3\x41\x30\x92\x5f\x9c\x3d\xbb\x61\x67\xcf\xd1\x0b\xd8\xf0\x73\xf7\xf0\x63\xf3\xe4\x37\x82\xb6\x60\xd3\x9a\x4b\x1f\xb5\xc9\xcd\x2d\x3a\x65\xa8\x60\xc6\x41\xd8\x11\xfb\x00\x49\xcd\xc4\x9c\xfb\xa4\x31\x08\x99\xbb\x40\xb8\xa0\x3b\xb2\x0e\x1e\x7c\x16\xa9\xc4\x34\xbd\xcd\xb3\x89\xf5\x84\xe5\xba\xe2\xf6\x4e\x5a\xd5\x26\x4a\x71\xb0\x8a\x32\x5d\x34\xcf\x14\xbd\x78\x38\xd2\xdd\x9f\x11\x23\xd7\x9e\x9d\x34\x3a\x6a\x35\x77\x9b\x2a\x5e\xfc\xeb\x0a\xd8\x89\x5d\x12\x97\x73\x7c\x25\x69\x9c\xc5\x93\x23\x3d\xc0\x3e\x92\x50\x0b\xa2\x8f\xbe\x71\x0f\x3c\x66\x08\x77\xef\x19\x4a\xdb\xf6\xae\x0d\x8b\x9b\x42\xde\x38\xae\xee\x25\xeb\x93\xf8\x7a\x96\xd5\xbb\x1b\x8b\xce\xcc\x44\xa9\xf5\xd2\xf9\xde\x39\x65\x6a\x78\xf5\x9c\x37\xdb\x79\x0d\x9f\x4b\x54\x8b\x43\xaf\xa8\x32\x1c\x42\x5b\x4b\x1f\x23\xcd\xe3\x3e\x52\x37\x7d\x92\x0e\xfe\xa6\x96\xf5\xa4\xcb\xf5\x14\x98\x23\x46\x7b\x98\xa0\x2b\x4f\x29\x80\xc6\x9e\xeb\x14\xb0\x9c\x6c\x87\x69\x1b\x77\xb0\xd1\x50\x9f\xad\xd1\x57\x79\xad\xea\x5f\x43\xdf\x9a\xb9\xec\xe0\x92\xf3\x03\xd8\xf5\xce\x99\x2f\x97\xa2\xea\xa5\x4a\x2d\x47\x44\x14\x18\xb4\xac\xc9\x33\x1a\xd0\x78\x62\x23\xe9\x86\xce\xa8\xa3\xff\x13\x78\xaa\xfb\xeb\x32\xee\xbc\x01\x3c\x29\x7c\xe8\xe8\xf0\x87\x32\x96\x34\xaa\xaa\x45\xa9\x33\x0a\xca\xab\x0f\x52\xea\xc8\x36\xa3\x70\x5e\x2c\x9b\x82\xbb\x66\x63\x5f\x0f\x89\x1b\x0c\xce\x13\x62\xca\x6b\x16\xc1\x8a\x4f\xb3\xac\xd0\x77\x09\x4a\x31\x31\x82\x4f\x66\xf6\x5e\x31\x16\x85\x4d\x56\xbe\x94\xab\xb7\xfc\xfa\x08\xed\x1b\xb1\x5f\x22\xc2\xd7\x2c\x38\x1f\x8d\x26\x7d\xc5\x96\x26\xe8\xb3\x15\xb9\x77\xd7\x70\x11\xc3\x4a\x48\x4e\xf1\x17\xf9\xc0\x98\x5c\xde\xb9\x8a\xf0\xfa\x70\x52\xbd\x49\xdf\x93\xd7\x1f\xe1\x2d\xb1\x42\xf4\x4f\x24\x39\x6b\x41\xcb\xc1\x6b\x16\xdb\x67\x66\x88\x96\x9d\xc3\x7c\x9e\x37\x55\x74\x3e\x66\xf5\x84\x8d\xc3\xc0\xbb\x89\x98\x85\x2b\x1c\x0d\xac\x32\x9f\x71\x5e\xe8\x4f\x11\xee\x22\x16\x6a\xa9\x80\x00\xc0\x4a\xee\xaf\x44\xd8\xe4\x5f\x15\xe1\x3f\x7e\x7f\xc8\x70\x40\xb6\x1e\x52\x04\x2e\x45\xfa\xba\x24\x2f\x53\xdd\x6c\x33\xf2\x49\x9b\xf7\x49\x1b\x7f\xc7\x68\xb4\x70\x92\xec\x75\xb9\x8a\xb1\xf3\x5b\x34\xc5\xec\x92\xec\x91\xfb\x17\x17\x2f\xf1\x89\xf9\xaa\xeb\xad\xae\x55\x25\x0c\x8d\xa5\x06\x44\x6d\x88\x6a\x39\x19\x02\x26\xf0\x33\x63\x06\xc2\x1d\x8f\xa4\x6a\x94\xe8\x9a\x3b\x1a\x78\xd9\xe7\x3d\xed\xd6\x49\x4b\x49\xaf\xbb\x66\x5b\xbb\xa0\x40\x91\xde\x2d\x5c\x24\x0c\x27\xf0\xce\xd7\x46\x7c\x01\xf1\x2f\x52\xdd\xfb\x41\x83\xec\x27\x4d\x28\x30\x26\xe5\x34\xae\x6c\x7d\xbf\x02\xe9\xd3\x87\x3b\x48\xb9\xc3\xcc\xfe\xc6\x8a\x89\xad\xdf\xa2\x1d\x6b\x94\x9b\x9f\xe5\x02\x93\x0a\x73\xb3\xc9\x53\x91\x7c\x03\x8f\xa3\xca\x7a\xd9\xd7\xbb\x46\xa6\x86\xe7\x50\xa6\x3e\x92\xe5\x9f\x95\xfe\xc4\xc6\xae\x5c\x8a\xd6\x08\x00\xc0\x6e\xa1\xff\xe8\x81\x8a\x8c\xc0\xe0\xfe\x40\x06\x97\xdd\x91\x91\xac\xbb\xc1\x96\xbf\x2a\x0f\x8a\x75\xb9\xc8\xf3\x19\x85\x79\x59\x34\x14\x8a\xac\x7b\x6e\xad\xee\x95\x1c\xf8\x2d\x3e\x4d\xdf\x40\xca\xc9\xa7\x25\x46\xb0\x5e\x40\xd2\x5e\x35\x91\xac\xc1\x24\x95\xde\x47\x7b\xb6\x9f\x12\x7f\x5e\xab\x25\x9a\x9b\x5c\xa0\x14\xe7\xfa\xd6\xcf\xdf\xb3\x57\xfd\x56\x50\xfe\x0e\x0b\x3b\x8f\x62\x26\xea\xf4\x97\x0e\x9e\x38\xa0\x03\xe9\x4b\xf1\x14\x31\xb8\x55\xe4\x7c\xa1\x74\x3c\xd1\x7d\x6e\xcd\x56\xbb\x9d\x21\xa6\xb0\x75\xe2\xb5\xde\x83\x2d\x47\x8c\x1f\x06\x26\x47\xb5\x9d\x92\xc8\x3e\x67\xed\xbf\xca\x68\x2b\x64\xdb\x7e\x70\x29\x48\x6b\x99\x1b\x1b\x1a\xb0\xf8\x73\xfa\x54\x88\x69\x11\x05\x00\x80\xc5\xdf\xfd\xa5\xd0\x3a\x39\xe0\x7f\xe7\xff\xde\x7b\x4a\xfd\x1f\x44\xbe\xf7\xbe\x3f\x47\x7e\x7f\xf4\xd5\x7e\x88\xca\xfc\x67\x9d\xea\xcf\x29\xbf\xa7\xb0\xd1\x0f\x29\x9d\x85\xff\xb6\x77\xf8\xb9\xc8\xf7\x5c\x30\xf9\xa1\x48\xbf\xd8\xbf\xb1\x1b\x3f\x97\xf9\x1e\xf4\x1f\x67\x99\x11\xff\xdb\x34\x3b\x8c\x04\x81\x7f\x4b\x01\x02\x40\x40\x9b\x10\x00\xf0\x24\x7e\x7b\xfd\x57\x00\x00\x00\xff\xff\x7e\xed\x66\xac\xc0\x0c\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3264, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x51, 0xf4, 0x37, 0x65, 0x7c, 0xc6, 0x5, 0xe2, 0xc2, 0xf7, 0x8f, 0xd5, 0x8a, 0xa4, 0xbf, 0xe4, 0xe1, 0x6c, 0xb3, 0x35, 0xb1, 0x5a, 0xe2, 0x59, 0x54, 0x0, 0xaf, 0xb, 0xde, 0xd, 0xd5, 0x7e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
