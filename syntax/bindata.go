// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib-safe.arraiz (3.451kB)
// syntax/stdlib.arraiz (1.385kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibSafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x38\xd4\x6b\xdf\xff\xd9\xb7\x71\xa2\x50\x49\x1b\x59\xc3\x88\x42\x64\x5f\xca\x8c\x3d\x63\xa7\x64\xc6\x18\xd9\x9a\x19\x5b\xf6\x65\x50\x59\xcb\x36\x44\x92\xb1\x25\xe5\x58\x3a\x31\x8d\x90\x25\xc3\x8c\x30\xd9\x93\x7d\x6f\x88\x49\x64\x79\xaf\x73\xce\xdb\xf5\x56\xef\xf5\x9c\xe7\x79\xce\xf3\xdc\xff\xdc\xd7\xfd\xc7\x77\xff\x7c\x3f\xf7\xc7\x1c\xca\xc2\x2a\x00\x70\x02\x9c\xc0\xcf\x07\x04\x00\x80\xab\x8f\xb7\x1b\x0a\x29\xef\x82\x46\xbb\xa0\x7a\xda\x4d\x3a\x3b\xef\x80\x3b\xa8\xe0\x4a\x4b\x73\x08\x55\xf6\x8d\x94\x49\x0f\x94\x42\xa5\x99\xc9\xca\xf4\x98\x74\xb2\x5a\xdc\xc2\x43\xd4\xb8\xaf\xc2\x50\xf8\xf3\xa5\xd6\xdc\x90\xad\x17\x9b\xd2\x84\xf3\xa5\x5b\xaa\x56\x8b\x07\x6d\x66\xd2\x4f\x59\xcf\x1d\xcc\x2c\x9c\x82\x4b\xe8\x48\x8f\x4e\xbc\xae\xb6\xd2\x88\x47\x65\x47\x00\x00\xb0\xb7\x67\x0e\xe5\xe0\x0c\xed\xbd\x17\x67\x03\x00\x00\x16\x00\x80\x7f\x9c\x90\x38\x00\x00\x5e\x3e\x70\x3f\x4f\x04\x18\x89\xc2\xba\xfb\x5d\x93\x77\xf5\xf1\x02\xbb\xa0\xd1\x72\x2e\x28\xf0\x1f\x29\x82\x91\x3e\xf2\x5e\x3e\xf0\x90\x34\x93\xec\x47\xca\x7c\xb1\xfd\xab\xd2\xb6\x12\x3c\xeb\x97\x75\xb7\x65\xef\x3a\xe5\x89\x5c\x35\x35\xdf\xcf\xe6\x96\xc0\x2f\xcd\x65\x36\x5c\x4c\x8d\xc6\xe3\x95\xd7\x0b\x6d\x64\x17\x7a\x1f\xdb\xc0\x74\xfb\xbb\xe5\xc5\x10\x3b\x29\x94\x3b\x07\x34\x1d\xc5\x15\x67\x55\xcb\x8f\x8b\x98\x16\x6b\xc2\xed\xdd\x31\x6a\x67\xba\xc4\xb6\x9c\x14\x29\xb9\xca\xfb\xd5\x27\x52\x46\xab\x15\x9a\xdc\xc2\x77\x6b\xf4\x4c\x92\x47\xc6\xb1\x41\xd4\x08\x29\xeb\xbe\x06\xf2\xab\xb4\x9d\xb0\xad\x65\x71\x4f\x08\x63\x23\x8d\x94\xb2\x17\xd7\xac\x38\x7b\x45\x7e\x83\xdf\xae\x27\xa7\xf8\x46\x60\x0a\x51\xc7\x9f\xc5\x25\x66\x48\xae\x29\x35\x44\x2d\xee\xb4\xe1\x9b\xb3\x18\xff\xcb\xba\x5c\xe9\xd1\xcc\x04\x90\x2d\x4c\x00\x80\x39\xcf\xd5\x75\xe7\xd7\xfd\x2a\x13\x22\x81\x50\x36\x5e\x7e\x35\xd5\x7b\x8c\xa1\xe7\x4f\x5a\x3f\xc2\x71\xf5\xf8\x80\x70\xef\x8d\xc0\xee\x6a\x09\x2c\xa6\x7a\x70\x3f\x32\x61\xb6\xc6\x79\xaf\xee\x02\xe6\xd2\xf8\xa8\x55\x7f\x19\x60\x0e\xb3\xb0\xcb\xd1\xeb\x3f\xef\xf1\x86\x7f\xf0\x4a\xc5\xce\x4c\x91\xb7\x93\xc7\x7a\xe4\x32\x35\x59\xbd\x12\xde\xe4\x2f\x22\x31\x34\x0e\x45\x54\x47\xa2\x5b\x54\x04\x55\xa3\x0a\xe4\x3c\x86\xe4\xe8\x7a\xa6\x9d\x91\x8f\x46\x34\x17\xcb\xab\xbb\xe3\x40\xfb\x26\xe3\x3f\x1d\x79\x71\x68\x1b\xd7\x23\x2c\xf3\x9a\x64\xc4\x62\xaa\x99\x80\x6d\x31\x6a\x7d\x7d\x6c\xf2\xb2\x01\x4f\x15\xd4\xe9\x0c\x01\x35\x8a\x8d\xcf\xea\x09\xad\xa2\x05\xf7\x84\xcc\x87\x77\x48\xbd\x15\x81\x7f\x39\xbd\xc9\x91\xd4\x6c\x60\x7a\x92\x77\x34\x94\xbc\xc4\x45\x7c\xdd\x7e\xd2\x70\xde\x70\x3d\x33\x29\x4e\x88\x3e\x46\x4f\x15\x5a\x08\x07\xeb\x16\x62\x49\x27\x37\x5c\x04\xe1\x90\x90\xb1\xa4\x67\x3e\x81\x22\x81\x78\x31\x13\x34\x48\x03\x4c\x8d\xa5\x71\xb4\x25\xef\xb5\x91\xee\x67\xdd\xd5\xaa\x02\x7d\x5c\x1c\xc6\x94\x3c\x30\xda\xe1\x94\xbc\x3d\x1c\x54\x53\xf2\x0b\x84\x27\x20\x50\x6c\xbe\x6d\xfc\xab\xf4\xf8\x61\x4e\x31\xd3\x97\x9c\x23\x64\x95\xf9\x4d\xcd\x06\x67\x4d\xf3\x32\x76\x36\x7b\x9b\x8e\x99\x77\x36\x11\x7e\x5e\xd9\x90\x49\x9d\xa9\xf4\x33\x4f\xee\xed\x71\x75\x77\x44\xc1\x08\x4c\x0e\x33\x73\x21\x2e\xbc\x73\xb1\xf7\x77\x58\xf9\x7c\x8d\x90\x03\x46\x67\xb9\xb5\x73\x98\x17\x46\x6a\xaf\x3a\xf4\xd9\x3e\xc7\x6d\xc6\xf0\xd3\x6f\x48\x5a\x94\xd9\xdb\xb9\x82\xa6\xe2\x6b\xd1\x73\x8e\xc5\x26\x6b\x5c\x27\xde\x3a\x0c\x65\x3b\x57\xa4\x77\x27\x9f\x72\x66\xd6\x30\x89\xdb\xc3\x0e\xb3\xa6\xd5\x94\x75\x38\x0d\xea\x22\x9d\x8a\x87\xca\x34\xbc\x3f\x31\xb5\x54\x85\x53\xc2\x83\xf7\x69\xf6\x3d\xf8\xfa\x1b\x21\x98\x94\x3c\x9d\x81\x07\xbf\x3c\x24\x11\xd4\xb6\x28\xe5\x7c\x85\x14\xda\x08\x57\x59\xf3\x2e\x86\x11\x8e\xb8\x03\x9f\x0a\xa4\xbd\x5c\x2a\xcf\x96\xa1\xd5\xeb\xb5\x4c\xf7\xd8\xbe\xc1\x5a\xb2\x33\x6d\x36\x86\x19\x00\x56\xd8\xfe\x0a\xd6\x2a\xff\x1c\xd6\x98\x20\x6f\xac\x4b\x20\x18\x83\x85\x7b\xa2\xae\x81\xdd\x3c\x5d\xfe\x77\x25\xcb\x6d\xbb\x30\x05\x97\x04\x1a\xa8\x57\x56\x8b\x62\xb9\xbb\x6e\xe7\x06\x23\xfb\xac\xbc\xfc\x93\xee\x91\xdf\x39\x5f\xb3\xb6\x47\xa5\xcb\xb0\x3e\x66\x52\x92\x8e\xdd\x0b\x5d\x64\x70\xe4\x47\x64\x3d\x21\x46\x8b\x12\xc3\xae\x34\x6c\xe0\xc8\xb2\xfb\x26\xdd\x77\xd8\x80\x13\x42\xe7\xf9\x24\x70\xfb\x8c\x2f\xe1\x21\xdb\x9a\xab\x03\x1c\x90\x52\x0e\xa5\xee\xf2\x7d\xe7\x7c\xda\xab\x5e\xb6\x5f\x65\xb7\xec\x36\xb9\xa9\x6a\x58\x79\xa2\xb1\xa1\x77\x5e\x74\x45\xb8\xc8\xd1\x30\x4e\x92\x5c\x62\xd6\x5d\x6e\x7b\xa0\xff\x9c\xf1\x98\xf6\xed\xdc\x2f\x6c\x0e\xf8\x63\x11\xd0\x37\x62\x5b\xb5\xa6\xb5\x35\x11\x52\x5f\xed\x44\xde\xe9\x3a\x2f\xd8\x99\x1e\x84\x37\x66\x8c\xb3\x6a\xcd\x2b\x6e\x37\x3b\x6c\xb7\xd2\x6f\x5d\x14\x5a\x9a\x06\xaf\x6e\x29\xe6\x12\xe5\x57\x36\x9a\xb8\x2e\xdc\xfc\xb0\xe9\x36\xa6\xb8\xb8\x53\x22\x2b\x33\x2a\x9b\x69\xf1\x2b\x26\xd4\xb7\x1f\x25\x3c\x19\x50\xb0\xfe\x22\x7d\x46\x62\xe1\x00\x0a\x3c\x21\x16\x3d\x2d\x61\x52\xfb\xb6\x82\x74\x9d\x8b\xb0\x70\x51\xa1\xea\x60\x29\x08\xe7\xd8\xc0\x12\x1a\xb3\x29\x92\x31\x95\xda\xa8\x3c\x53\xff\x60\xfb\x44\x48\xe0\x85\xd5\xdf\xf8\xb6\x28\x0f\x6e\x8f\x2d\x72\x1a\x0c\x15\x1a\x0d\x5c\x8b\xfa\x35\x93\xe7\x96\x02\x96\x1c\xc7\x76\x5a\x91\x74\xa0\xd3\x6f\x35\xbb\x8d\x9f\xda\xe9\x27\x55\x4b\x8c\xc7\x30\x78\x2c\x10\xda\xb6\xae\xa9\x9a\x33\xd1\x9a\x13\xd1\xfc\x48\xb3\xa0\xdd\x7c\x37\x38\x31\x85\x40\xf5\x98\x8e\xd8\xaa\x36\x59\xe8\xc9\x66\xaa\x50\x3f\x51\xbd\x30\x12\x3a\x37\x72\x23\xea\xfd\x23\x6a\xdb\x05\xc8\xbd\x04\x5e\xe1\xc5\x34\xf6\xbc\xcd\x90\x4b\xb1\x84\xf9\x3e\xe9\x52\xbf\x32\x34\xa4\x6c\x3b\xb2\x5e\xdd\x97\xf9\x78\xd1\x67\x43\xc1\x0f\x4a\xeb\x87\x48\x14\x63\xd1\x93\xf7\x78\xe4\x8d\x25\xf2\xf3\xac\x28\x0a\xbe\x19\x25\x5c\xc6\x8b\xe5\x07\x52\xd4\xec\x4d\x51\x87\x65\xe8\x75\xa3\xa3\x2b\x8c\xd4\xcb\x96\x6c\x1d\x7e\x1f\x23\x2a\x11\x7d\x08\x2e\xe1\x0f\x49\x8e\x6e\xba\x9f\x33\xd9\x33\x5a\x20\x36\xfa\xee\xe4\x02\x59\x69\x42\xba\x29\x4e\x90\x85\xe6\x19\x7f\x20\xab\x38\x4e\x94\xec\x22\x17\xa1\x77\xc8\x8b\x0f\x22\x3f\x16\x7a\xa9\x87\xc8\x5e\xc1\x4d\x5c\x78\xf8\x08\x91\xf3\x0a\x94\x21\x79\xac\x19\x0d\x0e\x1c\x70\xc8\xaf\x11\x6f\x67\x12\x17\x9a\x2a\x2b\x7d\x9d\xbe\x81\x57\xb6\xcb\x55\x43\x50\xd6\x3f\xb7\x1e\x49\x34\xa2\xa8\xb1\x54\xe2\xe2\x09\x0b\xbc\x92\xd5\x1e\xad\x2d\x67\x62\x0f\xdf\x0f\x2c\xbf\x7c\xb7\xc4\xcc\xa7\xb1\xf6\x02\x45\xbf\x5f\x11\xda\x51\xb6\x88\xbf\x55\x90\x13\xef\x1e\xe0\x58\xdc\x87\xa7\x7b\xec\xe9\xb3\xc7\x89\x52\x1e\xb9\xca\x5a\x3d\x6d\xca\x0e\x80\x5c\xb8\x25\x62\x14\xdf\xd0\xfd\xa2\x83\xb7\xa2\x9a\xbf\x50\x30\xba\x07\xcb\xeb\x77\x35\xab\x5e\xcb\xeb\xeb\xa6\x85\x47\x72\x09\x53\x7b\xb6\xf7\xd7\xf0\x48\x25\x3f\xfb\x0d\x9d\xc4\x13\x25\x87\x9e\xd5\x59\xa8\x78\x06\xe7\x69\x0c\x2a\x52\x11\x27\x89\x4c\x0d\x5f\xb1\xb9\x28\xf7\x39\x5d\x1b\x87\xe8\x8e\x5b\xc3\xb0\x7c\x20\x39\x91\xc0\x6d\xb1\x43\xaf\x77\xa3\xd6\x51\xde\x7b\x02\xee\x44\xcf\x26\xe9\xca\x5a\xa0\x57\x5f\xbb\x8e\xad\xb8\x8f\x85\x78\xec\x59\xfa\x13\x43\x9a\x47\x1c\xda\x53\xdb\x05\x7a\x58\xd4\x67\xd8\x2a\xed\x7e\xa0\x08\x6e\x20\x80\x7f\xc7\xb9\x94\xd6\x9c\x49\xd1\xb8\xd6\xf3\xbc\xc2\x20\xab\xb3\xd1\x0a\x7d\xba\xea\xac\x9e\x3a\x4d\x62\xed\xf3\xda\x9a\x57\xfe\x30\x7d\x01\x31\xb9\x4b\x2a\xdc\x30\x38\xd6\x22\x98\x2e\x2a\xab\x1c\x85\x35\x1e\x92\x08\xf3\xb2\xb6\x73\xca\xb2\xb0\xce\x1b\x1b\xb4\xa5\x38\x31\xe4\x47\xb6\xd9\xc3\xb5\xb4\x34\x94\x6a\xf6\x37\xea\xc0\x55\x0d\xd4\xd8\xcb\x2a\x23\x34\xf0\x64\x27\x65\x4b\x64\xbb\xdb\xac\x27\xd8\x50\xec\x0d\x52\x19\x5a\x33\xcd\x7f\x7a\x0e\x42\x8e\x79\x77\xf3\x26\xdf\xc9\x4e\xfb\x3b\x1e\x98\xb0\xdf\xbc\x86\xd6\xb2\x26\x18\x24\xa4\xda\xd3\xd4\x79\xb9\xac\x17\x75\xf2\x45\xd6\x48\xb2\x29\xf8\xb2\x21\x9c\x47\x3a\x2a\xf9\x25\x6e\x48\x22\x6b\xf1\xb3\xcf\x1d\x85\x01\x66\x1d\xe4\x4d\xe8\x51\x8a\xda\x93\x25\xbd\x60\x5b\x70\x9a\xa5\xe7\xd9\x0f\x5a\xcf\xa2\x40\x73\x1e\x22\xfb\x9a\x4b\x6d\x63\xcf\x84\xea\x40\x61\xae\xe4\x20\x81\x86\xa4\xe8\xc1\x41\xad\xd5\x27\x04\xae\xfc\x4f\xdb\xec\xc6\x63\x05\x21\xc9\xce\xdb\xd1\xa3\xd4\x25\x01\xdc\x2b\x8f\x16\x6e\x71\x37\xe2\xe0\x04\x0c\xe1\xa0\xac\x03\xeb\xa4\xc5\x0b\x4f\x93\x3c\x3c\x27\xa1\x0f\x9d\x25\xed\x0e\x38\x45\x8d\xaf\x50\xbb\x4e\x79\xb8\x27\x24\x58\x8b\x77\x11\xe9\x8e\xc9\x45\xe2\x5e\x92\xc9\x13\x47\x96\xaa\xd7\x0b\x44\xf3\x7d\xef\x89\x92\x2f\xfa\xd6\x17\xb6\x42\x2f\x84\xcc\x13\xf6\x2f\xf3\x22\x77\xc5\x13\xdb\x9a\x2d\xaf\xb3\xcf\x71\x96\xbe\x8e\x54\x10\xc4\x67\xcb\x06\x87\x35\x31\xa8\xc6\xfa\xfd\xa5\xfc\xc7\xc7\xdc\x65\x9d\x0e\x07\x64\x2c\xd5\x4b\x7e\xf5\x9d\x52\xb7\x38\xbe\x98\x95\x09\x1f\xab\x32\x49\x18\xde\xf4\xaf\x02\x15\x6a\x0e\xb0\x0a\x91\x4b\x13\x3f\x04\x4a\xc9\x86\x46\xd4\xe0\x1e\xca\x0f\x5e\x72\x6d\xd3\x89\x83\x8d\x17\x2d\xae\x29\xe9\x44\x63\x68\xf6\xfd\xb3\x45\x54\x5e\xeb\xf2\xba\xa3\x4d\xfe\xb2\x4b\x55\x6e\x47\x1b\x93\xd4\xf1\x73\xef\xb6\xd4\xd8\x9b\x57\x82\xc7\x69\x5c\x4a\x7d\x6b\x3e\x41\xc5\x4f\x37\xd8\x45\xde\x24\x6a\xb9\x3f\xf7\x39\x1a\x14\xc4\x58\x56\x37\xb4\x0b\xd2\xc8\xad\xd5\x72\xc1\x67\x3c\xbe\xd6\xed\xd3\xc0\xef\xf1\x05\x8b\xd9\xd3\x98\x9b\x57\xf9\xe0\xc2\xb9\xf9\x9e\xb8\x52\x92\xf6\x7c\xcf\x13\xdb\x7f\x14\x3a\x97\xff\x45\x10\x11\x94\xb6\x14\x56\x82\xa9\xc2\xe0\xaa\xce\x77\xb7\x8d\xcf\xeb\xd4\x05\x33\x11\x97\x71\x02\xda\x8c\x3a\xd3\x1c\x8d\x23\x1f\x3f\x46\x68\x36\xf5\xd3\x97\x1c\x09\x1c\x6b\x41\x3b\x57\xf4\x2e\xf6\x4e\xbf\x0f\xfa\x7c\x6f\x4e\xca\xe3\x18\x9d\x1c\xce\xf4\x8d\x84\x9b\x23\x72\x65\x4e\xb0\x01\x80\x96\xc0\x5f\x91\xb0\xe6\xbf\x4b\xc2\x7f\x5e\x72\x18\x17\x37\xc4\x9f\x5c\x1c\x93\x62\x46\xcd\x51\x00\xb5\xd2\x43\x6e\x5f\xbc\x09\xce\xb7\x9e\xcf\x45\xd1\x2a\xea\xe9\xed\x2d\x7c\x2c\x6f\x7b\x58\xc5\x8b\xc2\xab\xbd\x1f\x84\x72\x63\x05\xec\x51\x4f\xf7\xa5\x4e\xce\x6e\xb6\xf8\x6b\xae\x3c\x52\xe1\xaf\xe4\x72\xe3\x03\x35\x3e\x48\x9c\xe1\x6c\xc2\x79\xbb\x87\x6a\xaf\x4b\x1a\xaa\xd7\x19\x26\x04\xf0\xb7\xea\xdc\x34\x14\x40\x67\x47\xc5\x9e\xf3\xcb\xf7\x8d\x0e\xec\x4b\x80\x2a\x88\x2e\xdd\xbd\xa3\x6b\x0e\x17\x20\xf1\xc4\x84\xa1\x47\xae\x0e\xb6\x31\x57\xa4\x50\x1c\xd0\x47\xa5\x6a\x32\x6f\x3c\x03\xa1\x85\x23\x11\x20\xf9\xa8\xfb\x99\x79\xcd\x7a\x2f\x0e\xcd\xeb\xd8\xe7\x9c\x15\x1a\xa4\xc5\xd0\x95\xe0\x30\x01\x2f\x93\x5c\xa6\x08\x84\xce\x6e\x97\xea\xf8\x87\xf6\x8c\x2f\x99\xcb\x0f\xd3\x64\x56\x04\xab\x36\xc8\xf0\x3c\x0c\x63\x96\x04\x04\x2c\x25\xb5\x4b\x9e\x31\xb8\x5e\x7a\xfa\x86\xea\xb6\x65\x5c\xda\x2e\x05\x59\x30\x00\xfe\xc5\x3f\xb1\xbf\xd5\xaf\xde\xf5\xc5\x84\xa5\xa3\xd9\xe7\x9a\x34\x5d\xcc\xe4\xb9\xb8\xfd\xb0\x49\xa7\xeb\x6a\x53\x18\x82\x3e\x6c\x2c\x26\x33\x92\xc6\x80\xd3\x64\xa7\xab\x30\xc9\x70\x29\xeb\xae\xe7\x3e\xbb\x74\x1c\x31\xb0\x9b\xbe\x52\xad\x13\x95\x78\xc4\x70\xb0\xa7\x2a\xc3\x0c\x52\x79\xf2\xc1\x73\x06\xf2\xfe\x1b\x52\xb8\x7e\x59\xd2\xa9\xb0\x97\x98\xb2\xf4\x92\x2f\x6a\x31\xc8\x36\xab\xfb\x49\x88\xf1\xc2\x06\xf9\x6d\xae\x6c\xe5\xdc\x67\xb3\x11\x83\xd8\x6d\xde\x6f\x63\x7b\xbe\xa1\x6b\x01\x65\x02\x00\x1e\x96\xff\xea\xdf\xe9\x87\x45\x79\xfe\x39\x2f\xcf\xa4\xc6\xdb\x31\x0a\x7c\xfa\xf4\x1d\x41\xb6\x60\x8b\x94\x25\xa7\x41\xb0\x9d\x46\x75\x2e\x2b\xf3\x5b\x6d\x49\xbb\x18\xc4\x6e\x68\xbc\xa2\x12\xc8\xd8\xa9\x2e\x88\xf1\x0b\x03\x27\xb7\x73\x9e\xe7\x29\x2a\xba\xf0\xa5\xbb\x6d\xc3\x75\xae\xb7\xcf\x64\x38\xd2\x62\xb2\x8f\x86\x58\x4e\x5d\x73\xb5\xed\x92\x7c\xec\x96\x79\x5c\xc3\xc0\x26\x9f\x62\x7d\xe3\x4b\xe3\x12\x17\x20\x2f\xd1\x1d\x6b\xcb\xaa\xf4\x38\xcf\xe4\x4e\xe1\x68\x14\x6c\x75\x4f\x5f\xae\x81\xcc\x29\x74\xf8\xfd\xf8\x99\x57\x87\x2e\xab\xbe\x46\xc4\xf8\x93\xae\x73\x27\x85\x69\xbb\xee\x90\x49\xb9\x63\xfa\xb3\x16\xd9\xf1\x75\xab\x43\xb4\x5e\x8d\x6f\xd5\xc7\x49\xa8\xe5\xe1\x01\x00\xd8\xf8\x43\x10\x33\x31\x0b\x00\xff\x57\xff\xf7\x62\x19\xf4\xff\x3a\xf2\xbd\x62\xff\xd9\xf2\x7b\x3d\x22\xfe\x83\x55\xea\xbf\x2a\xad\x7f\x76\xf9\xfd\x76\xa9\xfc\xe0\xd2\x9d\xe5\x6f\xcb\x9a\x9f\x83\x7c\x8f\x05\xcd\x1f\x82\x2c\x73\xfe\xa7\x6b\xfb\x73\xac\xef\x3b\xff\x63\x41\x85\xdc\x7f\x1b\x6b\xe6\x50\x36\xf6\xdf\x5d\xb0\x01\x6c\x40\x33\x13\x00\x14\xf0\xfc\xfe\xfa\x9f\x00\x00\x00\xff\xff\x91\xf0\x79\x2e\x7b\x0d\x00\x00")

func syntaxStdlibSafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibSafeArraiz,
		"syntax/stdlib-safe.arraiz",
	)
}

func syntaxStdlibSafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibSafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-safe.arraiz", size: 3451, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x1e, 0xb3, 0x3c, 0x1, 0xae, 0xf5, 0x22, 0xe7, 0xd5, 0xa7, 0x1f, 0x87, 0xf7, 0x6, 0xde, 0xd5, 0x33, 0x62, 0xe2, 0x3e, 0xea, 0x27, 0x6c, 0x9b, 0x59, 0x42, 0x57, 0x91, 0x6, 0xb6, 0x6e}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\xe0\x60\xe0\x60\x40\x07\x3c\x0c\x0c\x0c\xc9\xf9\x79\x69\x99\xe9\x7a\x89\x45\x45\x89\x99\x97\x4e\xf8\x9e\x39\xd3\xad\x7f\xea\xbc\xfe\xc6\xa0\x00\xaf\xf3\x3a\x27\x35\x7c\x2f\x79\x9f\x3b\x7f\xd5\x5f\x47\xeb\x92\xef\x19\x96\xc0\xce\x99\x5e\x56\x5c\x09\xa1\x99\x33\x2d\x57\x86\x71\x79\xfd\xda\xf9\x53\x73\xa9\xe5\xca\x5f\x16\x21\xaf\xc5\xc3\x9f\x4d\x55\x09\x7b\x21\x3e\x7d\xc9\x93\x14\x35\x47\x4d\xdb\x0e\xc7\x59\x0d\x0c\x0c\x0c\xff\xff\x07\x78\xb3\x73\x68\x86\x79\xbc\x08\x62\x60\x60\xc8\x67\x60\x60\xc0\xed\x16\x55\x06\x06\x86\xdc\xfc\x94\xd2\x9c\x54\xfd\xf4\xcc\x92\x8c\xd2\x24\xbd\xe4\xfc\x5c\xfd\xc4\xa2\x22\xdd\xc4\x4c\x7d\xb0\xeb\xf4\xd3\xf3\xf5\x72\xf3\x53\x6a\xa6\xf8\xce\x5a\x6c\x26\xd0\x76\xfd\xa3\x66\x84\x1a\xf7\x97\x60\xa7\x3f\x3a\x93\x62\xe7\xc9\x24\xf8\x05\x08\xb1\xa6\xf5\x08\x6a\x72\xfa\xdf\x5e\x7e\xbe\x79\xe6\x4c\xb3\x2f\x4b\xc2\x75\x5e\x5d\x5e\x1d\x1e\xea\x74\xfd\x82\x9e\x72\xea\xdf\x09\xe7\xba\x85\xed\x62\x54\x8d\x9e\x5b\xac\x91\x97\xf1\x5b\x6e\x97\x12\x95\x51\x6c\x65\x78\x56\xf9\x57\xac\xd1\xb9\xb9\x66\x42\xd6\x8f\x26\xdc\xdd\x62\x70\x28\xad\xfe\xdf\x56\x67\xdf\xfe\x3b\x0f\x4b\x2a\xcf\x37\x68\x84\x5d\xd9\x7f\xfa\xc0\x94\xbf\x75\xbf\xde\xaa\xe6\x78\x7d\xfd\x3e\x65\xdf\x84\xff\xed\x87\x8d\x9e\xc7\xeb\x7d\x17\x8c\xbc\x34\x7b\x79\x61\xc5\x84\x3d\x8e\x65\xcc\x89\x2d\xb7\x74\x0f\x4d\xac\xb1\x6a\xd7\x76\x3b\x69\x52\x5c\x16\xec\xc4\x39\xb5\x99\x69\x29\x4f\x44\xa8\x08\x43\x68\xdc\x8b\x5d\x17\x16\xec\xda\xa4\x55\xa3\x96\x6a\xe6\xf3\xf6\xc0\x93\xcb\x72\x5f\x9d\xcb\xf6\x7d\x91\x66\x4f\x90\xbf\x21\x75\xb9\xb0\xe2\xc2\x16\xb5\x92\xe2\x2d\x37\x85\xd2\x7b\x9e\x6f\x8d\xfb\xbf\xcb\xa6\xd8\xe3\xe1\xdd\x90\xeb\xab\x18\x02\x42\x03\x23\x67\x3b\x5f\xb7\xcc\x3a\x29\x78\x33\x7e\xdd\xdf\x67\xcb\xf2\x62\xb3\xbe\x34\xbe\x3d\xdf\x6f\xbd\x31\xe5\x50\x99\x8c\xda\xad\x87\xde\xa9\x5b\x1a\x8b\x8e\x9a\x8b\x5a\x34\x2d\xd2\xcd\xba\xa5\xfb\xde\xd9\xef\x4c\xe3\xe2\x3b\x76\xaf\xd7\x6c\xb9\xd0\xce\xc3\xff\xb8\xe3\x93\xf4\x4e\x89\x3f\xad\x97\xa4\xb4\x8e\xec\xf3\x64\xf6\xb3\xeb\x29\x39\xea\x79\xec\x88\xdc\xe3\x60\x57\xee\xcd\xde\xb1\x86\x4b\x33\xef\x96\x74\xcc\xb8\x54\xbb\xf9\x6a\xf5\xa5\x9a\x97\xf5\xa7\x34\x2e\xca\xa4\xfc\xd0\xfe\xc9\xde\x77\xd8\xd5\x4f\x91\xf7\x6e\xed\xe9\x37\x9c\x7b\x8e\x9c\x50\x74\x7b\xe9\xf6\x65\x7a\x5f\xbb\xd8\xfb\xfb\xef\x27\x8a\xbd\xaa\xd7\x77\x5a\x52\xb2\x4f\xf1\x7b\xa2\x68\x8a\x57\xcd\xfd\xbe\x0d\xf9\x15\x32\x15\x33\x95\x7d\x8b\x78\x6c\xf5\xcf\xb7\x5d\x65\x3f\xde\xff\xff\xf8\xbe\x39\x33\x26\xd9\x6f\xe6\x79\xf7\xfa\x76\xf1\x8a\xf9\x9e\x7f\x39\xd4\xbb\x6e\x57\x6e\x5d\xc1\xe7\xc5\x5d\x5e\xa1\xfc\xf2\xf8\xc3\xdf\x9a\x0f\x25\x39\x94\xfd\xf6\x72\xdc\x39\x6d\xfe\xf2\xa7\xdd\xfe\x38\xbb\x80\x55\x6c\xac\x51\xe1\xa7\x9e\x5d\x0b\x6f\x28\xcd\x9d\xe5\xf5\xd8\xf1\xc9\x54\xc3\xb5\x93\xff\x73\x5e\x38\xd5\x14\xba\x94\x31\xfa\xd9\x8b\x9a\x44\xde\x17\x6d\x73\xfe\xb2\x08\x14\x78\xa6\xdf\xf0\x34\xe1\x72\x98\xcd\xf4\xea\xce\xb6\x84\xe8\x2b\x11\xdb\x5b\x7f\xb6\x08\xbe\x2f\x54\x0f\x5c\x15\x15\x99\xcc\xf3\xa4\x63\x5b\xd1\x8b\x98\xe5\xbe\x9f\x39\x15\x2e\x46\xdf\x9a\x15\xb7\x6e\xea\x85\x7e\x95\x38\x26\x5b\xdf\xf6\xff\x25\xb7\x59\xa6\x6c\x5d\x75\x2a\xf6\xa6\x53\x7a\xec\xf2\x5b\xab\x6c\xf3\x3e\x31\x1e\xdd\x5c\x7f\xae\xbe\x9a\xdf\xee\xca\xfc\xdf\x3b\x96\x56\xef\xeb\x7f\x3a\x6d\xa6\xfe\x5e\x09\xb5\xca\xe3\xaf\x35\xe2\xe2\xf7\xd5\x1e\x4c\x31\xff\x9c\xb7\x3c\x74\xa9\x74\x06\xc3\xa7\x45\x9a\xb9\x89\x1b\x4d\x56\x15\x59\xef\xb6\xf7\xfb\xcf\x0a\x4b\xd6\xea\x67\xa6\x3c\x6f\x61\x62\x60\xf8\xc0\x8a\x2f\x59\x5b\x12\x4e\xd6\xc5\x95\x79\x25\x89\x15\xfa\xc5\x25\x29\x39\x99\x49\x50\x0a\x92\x1f\x53\xfa\x1c\xbb\x5a\x02\x78\x5c\xbe\xcf\x5b\x74\x60\xef\xf7\x19\x7f\x75\xd2\x85\xff\x5e\x94\x7f\x56\xae\xe4\x99\xf3\xf1\x5b\xaf\x42\xaf\xef\x7b\xae\x55\x72\x5f\xab\xfe\x84\x71\x1e\x79\xb2\x49\x2d\x6c\xfb\x72\x11\x3e\x81\x32\x2b\x83\xd9\xca\x6f\x0e\xce\x30\x9f\x1b\xe4\xc3\xbc\xe8\xc4\xa9\x0e\x15\xdd\x27\xac\xbe\x6e\xea\xf6\x13\xda\x26\x6e\xdc\x9d\xb2\x69\x9e\x76\x91\xbc\x07\xdb\x1f\x95\x49\xff\x2c\xed\x36\xac\xab\x6f\x36\x4f\xd9\xe8\xb6\xab\xe1\xdc\xef\x3b\xd7\x8e\x29\xe8\x16\x9c\x3b\x6b\xea\x90\x15\x79\x73\x7d\xda\xf4\x35\x0b\x82\x9e\x5c\x59\x54\x66\xfc\xa7\xec\xc5\x3f\x25\xef\xc9\x1b\x99\x1b\xb4\xf7\x31\xc1\xfc\x3e\x79\xee\x8a\x8d\x53\x19\x18\x18\x7e\x80\xb3\x34\x23\x93\x08\x03\xc2\xf7\xc8\xd9\x9d\x07\x23\x3c\x90\x8b\x1b\x74\x9d\xc8\x21\xaa\x8a\xa2\xab\x87\xd8\xc2\x01\xdd\x48\x64\x87\x5a\xa2\x3a\x84\x99\x82\x88\x09\xf0\x66\x65\x03\x19\xc2\xcc\xc0\xcc\xf0\x85\x81\x81\x21\x9e\x05\xc4\x03\x04\x00\x00\xff\xff\x45\x0d\x26\xd4\x69\x05\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 1385, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x5, 0xd1, 0xcc, 0xb0, 0xf4, 0x12, 0xe8, 0x16, 0xf3, 0x6a, 0x76, 0xd9, 0x24, 0x61, 0x6f, 0xc7, 0xf7, 0xc3, 0xea, 0x1c, 0x90, 0xe7, 0x2d, 0x5a, 0xd4, 0x74, 0x31, 0x35, 0xec, 0xe5, 0xc5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib-safe.arraiz":    syntaxStdlibSafeArraiz,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib-safe.arraiz":    {syntaxStdlibSafeArraiz, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
