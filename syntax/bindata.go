// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.4kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x3c\xd4\xeb\xbf\xff\x2a\x33\x76\x11\x52\x22\x22\x23\x1a\x46\xf4\xb3\x33\xf6\x34\x96\x22\x44\x96\xb2\x8c\x99\x11\x8d\xec\xb2\x0f\x63\xab\xa8\xac\xa3\x33\x25\x59\xa3\x24\xe2\x18\x93\xc9\x52\x96\xd1\x8c\xec\x94\xa5\x50\xcc\x4c\x21\x86\xec\xf7\x75\xce\xb9\xe7\xdc\xea\xbe\xee\xb9\xf7\x9e\x7b\x9f\x7f\x9e\xd7\xf3\xc7\x67\x7d\xde\x9f\xf7\xe7\x7d\xc6\x72\x37\xa7\x28\xc0\x0d\x70\x03\x3f\x1f\x7e\x00\x00\xbc\xb0\x97\x7d\x30\x28\x15\x8f\xc0\x40\x0f\x4c\x6f\x87\x75\x77\xf7\x35\x58\x17\x1d\x56\x6d\x77\x06\x41\x87\x76\x1e\xb5\xee\xb5\xa4\xd1\x07\x4e\x43\x95\x7a\xad\xbb\x39\x6d\x53\x09\x08\x1d\xde\x8b\x0e\x18\x82\x76\xb9\x23\x2f\x62\xbd\x61\x4d\xb1\x58\xbb\x7c\x5d\xcb\x9e\x29\x7e\xee\x63\xf6\x11\xc7\x59\xf1\xdc\xa2\x69\x6f\x88\x91\xa2\x7e\x8a\x51\x7e\x1c\x00\x00\x3b\x3b\x67\x2c\xb9\xb8\x15\x1d\x2d\x66\xed\x00\x00\xc0\x02\x00\xf0\x5f\xe7\x22\x0f\x00\x80\x3f\xd6\x3b\xc4\x0f\x09\x43\x61\x82\xd1\x21\x9e\x2a\x5e\x58\x7f\x98\x47\x60\xa0\xb2\x07\x06\xf6\x7b\x76\x30\x14\x56\xc5\x1f\xeb\x1d\x95\xf5\xba\xa9\x08\x22\xf4\x72\x68\xae\x34\x80\x00\x9d\x7e\x20\x04\xdf\xd7\xa9\x42\xd1\x7b\xa1\xc7\xe1\x89\x51\x1f\xf5\xe4\x65\x35\xac\xf4\x7d\x42\xe9\xaa\xd7\x2f\xda\x7c\x49\x33\x93\xb2\xd9\xd2\x06\xbd\x8b\xaa\xb7\xc9\x13\x50\x71\x1f\xca\x71\x8e\x9d\x4a\x3a\xaa\x79\xf9\xc2\xf5\x46\x57\xf0\xbd\x53\x90\x81\x19\xe3\x5f\xad\x5e\x41\xba\x9e\x2c\xdb\x5d\xe9\x93\x5b\x63\xa9\x10\x3c\x75\x36\x96\xaa\xda\x7c\x63\xa6\x1f\x11\xda\xc3\x04\x9e\x78\xd6\xaf\x87\x85\x24\x8e\xcc\xe7\x4e\xb8\xb7\x3d\x14\x8d\xa5\x2f\xf2\x8d\xc6\x76\x54\x59\x6e\x23\xdf\x41\x4c\x24\x27\xa0\x36\x5f\xe2\x37\x05\x47\xa4\xf2\x3c\x65\x47\xbc\x21\xb5\x8b\x0c\x2c\x24\xa0\x05\xff\xb4\xf1\x22\x2e\x55\x92\x93\xfb\xbe\xe1\xb5\x42\xa0\xec\xab\xf1\x20\x9e\xf3\x4d\xae\x83\x87\x3a\x4d\x5d\x33\x2c\xbd\xe7\x55\x3f\x83\x8b\xa5\x26\x98\xbc\xc7\x50\x49\x0b\x37\xd7\x09\x0f\x18\x17\x7b\xaa\xdd\x27\x99\x56\xc1\x33\xf4\xdc\x7d\x87\x44\xbe\x99\xb1\x4d\xb4\x1f\x2c\x04\x84\x1c\x6c\x31\x44\x93\x89\xfa\x61\x8f\x6b\x65\xb1\x0d\xab\x2e\xba\xab\x1b\x8e\x21\x82\x2d\xee\xd2\x07\xf7\x2a\x9c\x18\x9b\xf6\xb1\x62\x59\xde\x2f\xc2\x05\xd6\x63\x95\xd0\xc2\x69\x8f\xcb\x8e\x8f\x18\x7c\x93\x4c\xd5\x03\xc5\x40\x37\x2a\x8f\x64\x2a\x08\x34\x60\xd4\x36\x0f\xd6\x35\xbf\x15\x9e\x52\x51\x72\x92\xb8\xad\x5e\xc3\x16\x19\xef\xee\x36\x39\x72\xa9\x45\xc4\x4c\x2d\xbb\xec\x32\xe4\x55\x04\x96\x81\x4b\xbd\xa2\x8b\x46\x32\x6a\xaf\xb7\x9e\xde\xdf\x9c\x2f\xc2\x1f\x6d\xb6\xa1\x9a\x79\x70\x8d\xf5\x80\x59\x6f\x92\xa9\xd3\x23\xb1\x6b\x4d\x28\x5c\xf7\x80\xee\xca\xb4\x4e\x4d\x34\xe5\xe4\xed\xd4\x9d\xe7\xdc\x1c\x53\xec\xcb\xe8\x05\x5d\x19\x8f\xa2\xcf\x5a\xc6\x12\xe1\x01\xb5\x2a\x1c\x28\x83\xb5\xf8\x41\xd4\x45\x76\xea\xe2\xd4\x86\x05\xf5\x96\xea\xe8\xb1\x2b\x13\x31\xd1\x91\x82\x6c\xf5\x32\xe9\x0f\x29\xef\xb5\xaa\xbc\x07\x78\x30\xc5\xe3\xef\x6e\xbd\xed\x8c\x86\xcb\xeb\x81\x62\xd4\x96\x5e\xe8\x09\x6c\xde\x70\x19\xcd\x19\xa2\x72\x19\xf7\xcb\x18\x76\x21\x66\x5d\xdf\xf2\x5a\xb9\x55\x94\xdc\xfe\xc8\xf9\x95\x71\x7c\x3e\x73\x07\x23\x83\x07\x2b\x23\x40\xa4\x6e\xeb\x4b\x7c\x8f\x0c\x35\x86\x19\xa7\xf9\xc9\xce\x53\x62\x7b\x53\xcc\x01\x0b\x07\x43\x22\x53\x30\x18\x55\x54\xde\x68\x1c\xfd\x41\xb8\xee\xa6\x61\x16\x82\xfb\xbe\x51\xaa\xeb\xb2\x35\xb6\xe0\x44\xb4\x1b\x51\x7a\xa3\xc2\xa8\xad\x3e\x3c\xd1\xfd\x8b\x18\xdc\xaa\xc3\x9d\x73\x37\xad\x34\x8c\xa4\x39\xd2\xda\x7b\xde\x3e\xc2\x25\xb4\x87\x59\x27\xee\x36\x40\xbc\x13\xf5\xa4\xf0\xa5\xc1\xa7\xd8\x4d\x2e\x69\x06\xdd\xe0\xf3\x28\x7c\xa7\xfd\x6b\x0f\x74\xea\xc5\xbb\x6e\xcd\xa0\x3b\xc3\x4c\x7a\xee\x3e\xfb\xd0\x73\xf3\xc1\x76\xf6\x4f\xe3\xc1\x32\xb0\x7c\x3b\xf1\xd1\x2c\x84\xbd\xbf\xf1\x6a\xfb\x0c\xe5\x2f\x64\xe3\xee\x33\x9c\x93\x77\x01\xc0\x02\xe8\xef\x90\xad\xf9\xdf\x23\x3b\x28\xe2\x72\xb0\x47\x38\x2c\x28\xd8\xdb\x0f\xe3\x09\xf3\xf1\xf3\xf8\xf7\x81\xac\x74\x7a\x1d\x54\x68\x21\x4a\xa1\x5f\x58\x2c\x49\xe2\x7d\x9d\x46\x8c\x44\xf5\xdb\xfb\x87\xa6\x67\x52\x07\xdd\x3d\x1d\xcf\x63\xb2\x95\x38\x2b\x38\xd4\x15\x93\x76\xa2\x99\x6c\xae\x82\xb8\xbc\x47\xe4\x04\x59\x72\xcc\x05\xca\x2a\x9e\x0a\xdd\x33\x85\xde\x02\x01\x32\xfb\xb4\x85\x20\xf8\x3d\x56\x16\x04\xc4\xa6\xc1\xe2\x30\x17\xa2\x9c\x4b\xbd\xa7\x72\xcf\xbf\xb0\x1d\x35\xcf\x3b\x2e\x82\xed\x7a\xac\xaf\x6a\x99\x57\xcb\x34\x53\xfa\xe6\x64\x17\x24\x4a\x5c\xcd\x93\x15\xa8\x65\xa7\x7b\x2a\x9d\x44\x86\xfe\x65\x35\x61\x98\x46\xfc\x06\x72\x21\x1c\x8a\xb3\xec\x94\x5b\xaf\xb3\xa9\x7b\x16\x77\x74\xc3\x59\x72\xd0\xd8\x9d\xe1\x6c\x23\xee\xdd\x9c\xf3\x9e\x13\x3e\xa7\xb6\xd9\xea\xb2\xf9\x6a\x3e\xf5\xe4\x3e\xd6\x0c\x6c\x71\x5d\x8d\x48\x56\x59\x58\x6d\xe1\xd1\xbb\x3a\xb9\xe6\x33\xa1\xc6\xdc\x2a\x83\x2a\x8d\x41\x73\x6d\x9f\x06\x45\x07\x0c\x61\x24\xa6\xc2\x0a\x97\x1b\xb2\x3f\x42\x18\x22\x18\xd8\x07\xb9\x84\x19\x88\x75\xdd\x9b\xc7\x4d\x97\x78\x8a\x19\x27\x55\x6b\xc4\xcb\xf9\xf1\xae\x94\xdd\xd1\x89\x6b\x92\x39\xd3\xb7\x9a\x35\x3e\x36\xde\xdb\x94\x89\x0a\xd7\x5b\xfc\x55\x68\x9d\x76\x2f\x6d\x82\xc9\x6d\x36\x5a\x74\x6a\xd8\x13\xf7\x34\x97\x2f\x55\x35\x98\x9a\x0c\x3a\xa6\xd6\x24\xd2\x1d\xb2\x98\xdf\x2e\x4c\xef\x0e\x39\x5a\x47\x4e\x09\x62\xf3\xd9\x22\x0d\x9d\xbc\x6e\x19\x7c\x4c\x30\xf8\x90\x20\x8c\x3a\x1d\xb1\x5d\xe0\xe3\x4d\xbe\x59\x4c\xf7\x9d\x89\x5b\xaf\xb5\x66\xf4\xe6\x73\x3c\xd6\x95\xa9\x65\xbc\x8b\x9e\x7d\x77\x05\x37\xfe\x80\xde\xae\x87\xc8\xbc\x2e\x20\xc1\xcc\x02\xdf\x5d\x8b\xb2\x48\x2a\x9e\xeb\x57\x2c\x0f\x79\x18\x88\x78\xb8\x19\xdf\xa8\x1b\xb0\x4b\xba\x64\xc5\x5c\x6c\x52\x7d\x79\x7f\x13\xcd\x4a\xf6\x70\x26\x9f\x8a\x15\xa4\xe0\xae\x3d\x4d\x35\x20\xa7\x8c\xc7\x8a\x59\x29\x72\x53\xe7\xbc\x0d\xe6\x80\xd2\x3c\x69\x6c\x6c\x81\x7d\xeb\xac\x1d\xa8\x2b\xe4\x4b\x5c\x35\xb2\x1f\xc9\x23\x31\x99\xee\xea\x63\xbc\x92\x0b\xce\x79\x89\x38\x67\x8a\xa6\x16\x42\x15\x8b\xb3\x6d\xf0\x62\xbb\x07\xfc\x52\x44\xf2\x4a\x93\x65\xa9\x1e\xca\x71\x26\xfb\xfd\x85\x10\x2a\x13\xd1\x16\xbd\x64\xf0\x63\x5e\x32\xe3\xfe\x03\xe4\x9d\x17\xfc\x39\x0a\x87\x5a\x03\x61\xe1\xc3\x2e\x05\xcf\xe4\x3b\x38\xe4\xf7\x4d\x3f\x2c\x6f\xcb\x5e\x25\x68\x38\x13\x75\x90\xb4\xe5\x95\x57\x07\x6f\x9c\xa2\xe9\xec\xae\xc6\xa7\x14\x33\x04\x14\x6a\x7d\x5f\xbd\x3c\x9e\x74\xe0\x97\xf0\xca\xb3\xb7\xcb\x4e\x63\x9b\xeb\xf4\x68\xa6\x43\x6a\x96\x5d\x0f\x99\x84\xd4\xc2\x3b\x29\xe8\x30\xd7\xd2\x7e\xc2\xbc\xef\x8e\x29\x38\x59\x96\xf6\xc0\x0b\x6a\x5f\xd5\x92\x1f\x86\xd0\x4b\x95\x3c\x95\x42\xe9\x69\xe8\x12\x78\x5c\x2b\x5c\x24\x96\xd0\x1b\x2c\x10\x72\x31\xaf\x11\xee\xbf\xb1\x66\xeb\x9b\x51\xc6\xd1\x91\x7f\x79\x23\x36\x5e\x3d\xe4\xfc\xaa\xd1\x0d\x99\xb2\xfd\x4f\x48\xb6\x9a\x7e\x91\x77\xf5\x47\xd4\xe8\xc8\xc3\x64\x0e\xca\x46\x30\x11\x83\x9e\x35\x3e\xe7\x92\xd0\x95\xfa\xd6\xa1\x00\xc8\xb8\x51\xcc\x6b\xbb\x35\xdf\xe8\x43\x27\xd1\xc6\xfd\x00\x34\xd9\xaf\x45\xb1\xba\x0e\xe8\x33\x35\x24\x81\x4a\xfb\x77\x93\x0f\x3d\xc9\x7e\x64\x3e\xe0\x9b\x1c\xe8\x67\xe8\x61\x79\x40\x16\xfb\xd6\x3e\xeb\x97\x70\x49\xfc\x70\x98\xf0\x96\x7b\xf9\x40\x6b\x2e\x4d\xdf\xb3\xb7\xfe\xb1\x59\x5e\x77\xb3\x7d\xe0\xb1\x9a\x13\x26\xba\x03\x90\xa5\x95\xa5\x25\xff\x82\xb7\xf3\x0c\xe4\xd4\x76\x53\xd1\xaa\xd9\xa1\x97\x62\xd9\xb2\x50\x0d\x5c\xb0\xd5\x28\x24\xc6\xdf\xd1\xd9\x2d\xcf\xd6\xf1\xee\xc4\x88\x13\xcd\x8d\xad\xf2\x6e\x13\x1c\x0b\x87\xeb\xab\x3f\xdb\xdb\x6c\xe4\xad\x65\xa6\x03\x7e\x58\x1d\xa7\x4f\xa0\xba\x69\xd8\xa1\x3a\x7c\x3e\xf9\xc1\xcc\xe5\x3a\x51\x1a\x96\xcf\x66\x84\x8f\xcd\x22\xa8\x89\x83\x57\xaf\x0a\x1d\xee\x3e\x7f\xcd\x37\x28\xe6\x57\xff\xd1\xa5\xbc\x0f\xec\x26\x94\x4e\xd5\xad\x39\xe5\xbc\x06\x92\x4a\x89\x23\x8a\x6a\x03\x3b\x6b\xee\xcd\xa7\x88\xcb\x78\x8e\x1f\x85\xe4\x31\x57\xb0\xd7\x54\x87\x77\x19\xa1\xae\x5a\x4a\xd1\x74\x1e\xb1\x4c\x22\x9d\x60\x59\x76\x7e\x27\x26\xe1\x4f\x70\xfc\xb3\xbe\x92\x7b\x5a\xcb\x9d\x92\x8e\x47\x1b\x59\x3a\x78\x51\x23\x44\x29\xe9\x09\x23\x23\xf0\xc5\x47\xc5\x3c\x05\x5f\x37\xc1\x56\x13\x85\x51\x19\xee\x9b\x09\x63\x74\x96\x28\xfe\x85\xef\x4b\x5e\x79\x1f\xf2\xc8\x07\x07\xa4\x8b\x86\x91\x43\xf7\x40\x8a\xc4\x4c\x93\xaf\xdf\x94\xe5\x7d\x77\x05\x67\x11\x37\xdc\xfb\x05\xfa\xeb\x23\xbe\xe8\xeb\xd7\x1d\xe5\x5f\x93\xe7\x5d\x33\x4a\xe4\xfd\x15\x32\x3e\x1c\x64\xd5\x2e\x17\xca\x16\x04\x64\xca\x52\x4f\x06\x34\x16\xbd\xb2\xd4\x8b\x9a\x2b\xde\xfb\x59\x00\xb5\x2d\x7f\xa3\xbd\xd5\xee\x12\x78\x96\xbb\xbc\x2d\x5e\x55\x8c\x90\x0f\x8d\x8c\x69\x61\xd3\xad\x4c\x87\xca\x85\xa5\x27\xd0\x50\xb7\x03\x61\x39\xac\x46\x85\x8d\x80\x69\x5d\x5b\x69\x66\x5e\xae\xf7\x44\x8d\xf5\xf5\xb7\x6b\xa1\x35\xfc\x45\x06\xc3\x9c\xfb\xa8\xe5\x37\x26\xc3\x8f\x42\xa3\xe3\x9e\xe1\xef\xab\x8c\x58\x78\xb5\x1b\x25\x3b\xbc\x2f\x61\x2e\xa9\x1b\x25\x04\x0d\x9c\x1f\xfa\x54\x42\x17\x70\xac\x24\x49\xb5\x84\x42\x59\x35\x3e\x52\xcd\xe9\xba\x84\xd9\xc1\x75\x1d\x70\xeb\x42\xe4\xfb\x01\x1e\xf5\xfe\x25\x6c\x44\x69\xd5\x2a\x58\xb2\xf3\x06\x1c\x5d\x8f\x95\x8a\x88\x60\x7f\xd6\x35\x77\x8e\xd0\x27\xd6\xc1\x3d\x08\x39\x15\x9e\x3d\x58\x8a\xb0\xef\xb7\xe0\xa0\x1d\xfd\xd9\x39\xcd\x49\x0f\xee\xb5\x71\xf2\x42\x59\x56\xfd\x8e\x5f\xf0\x90\x94\xe5\x6c\xc1\x37\x31\x64\x44\x16\x2b\xa6\x2c\xa8\x26\x08\x5f\xa3\xdd\xd3\xfe\x7e\xce\x88\x14\xc9\x41\xfe\x8c\x17\x35\x64\x93\x6c\xee\xe8\x1f\xfc\xf2\x25\xce\xa0\x65\x68\x9e\xe5\x5a\xcc\xb5\x14\xb1\x75\xc1\xe4\x64\xdf\xcc\x78\xc4\x4a\xe6\xec\x51\xdf\x43\xf3\xd4\x58\x8e\x3f\x49\xb8\x35\x8e\xa8\x24\x03\x02\x00\xb8\xe8\xdf\x91\xb0\xf6\xff\x96\x84\xff\xb8\xfe\xa0\xe1\xa8\x8c\xe6\xcb\x35\xaa\x42\x89\xf3\x7a\x2f\x2d\x1a\xe2\xf6\x6a\x87\xc5\x6c\xd9\x56\x3d\x5f\xcd\xa3\xe2\x04\x9c\x42\x06\x3b\xdc\xf3\x4d\xad\x37\x58\xd9\x87\x8b\x7b\x2c\xc6\xfa\x26\x09\xd8\xb0\xe1\xc9\xe2\x1a\xe1\x6a\xc1\x3a\xf1\xe5\x66\x8a\xb3\xbf\x2c\x37\x8a\x54\xb8\xc8\xf1\xe6\x1e\x7f\x7e\xfc\xa5\xea\xbb\x72\x50\x13\x9d\x84\xa3\x6d\xf9\xb8\xa4\x1a\x87\x82\x00\x7c\xb8\x3d\xf8\xd3\x45\x33\xfe\x52\x51\x7c\x41\x87\x92\x1e\x5f\xa2\xbb\xb5\xab\xc7\x88\x0f\x58\xdc\x82\x29\x75\x85\x0f\xf1\x09\x39\x4b\xe4\xa8\x36\x57\x55\xe3\x4c\x97\x59\xe9\x25\x04\x84\xd1\x1c\x75\x6e\x0e\x6a\x0c\xc8\xd6\xa3\xbf\x0d\x1f\xd6\x35\x7f\x43\x73\x3c\x00\x68\xc9\x75\xdc\x83\x5e\xe3\xb1\x7a\xdc\x56\x3f\x6a\xa4\xe8\x30\x09\x2f\x61\x51\x8e\xeb\x61\xd8\x11\x77\xe2\x0f\xd6\x71\x4d\x3f\x20\x94\x5c\xe9\xcf\x19\x9e\x9f\x18\x30\xe8\xcc\x88\x92\x4d\x1b\xfb\x45\xd5\x35\xd2\xbf\x61\xec\x50\x17\x28\xf7\x63\x60\x20\xe5\x5e\x2f\xfa\x6c\xa4\xbf\x71\xaa\xd7\xe7\x86\x6a\xe5\xaf\x73\xc5\x6d\xd5\xa4\x34\x02\x5f\x05\xb5\xb3\xbc\xb3\xab\x74\x5a\x50\xf1\x0c\x34\xbd\x2a\x6c\xfb\xd9\x61\xd8\x97\x65\x39\xbd\x6d\x23\x9c\xf2\x6a\x42\xe5\x5c\x27\xf5\x64\xa9\xd3\x2d\xf8\x85\x07\x4a\x4f\xab\xfe\xda\x87\x21\xa1\x80\xdc\x11\x0e\x00\xf0\xdd\xf5\xff\xba\x0f\x43\x82\x31\x7e\x7f\x7c\x84\x5f\x7a\x73\x5a\xa2\xaa\x90\xe9\xfc\x96\x18\x28\xd2\xf6\x26\xcb\x6d\x04\xe6\xac\x5f\x4b\xe4\xdc\xf5\xc6\x50\xc1\x39\x11\xb9\x1d\x9d\xa2\xa6\xce\x6f\xe5\x46\x8a\x60\x0b\xb2\xf1\xca\x5b\xda\x7c\x55\x98\x84\xa2\xe7\x68\x27\xca\x25\x9e\x37\x4f\x94\xb8\xb2\x12\xf3\xa5\xa2\xec\xa6\x3d\xbd\x9c\x5e\x2b\x54\xf8\xe4\x4a\xeb\x9b\x9d\x2b\xa0\x39\x5e\xf9\xd6\xcc\xe2\x01\x54\x20\x3d\x49\x4e\x9c\xea\x15\x77\xad\xaf\x15\x8d\xe1\x1c\x16\x77\x4c\x95\x29\x54\xee\x7d\x07\xc6\xdf\x1f\x7f\xb1\xff\xac\x56\x1b\x32\x31\xb4\xe9\x12\x6f\x7a\x8c\xa1\xd7\x16\xb5\x89\x38\x61\xfa\xc9\x36\x3f\x85\xb4\x38\x3a\xd0\xa7\xff\x67\xf5\xc9\x10\x9d\xbb\x04\x00\x00\x56\x7f\xd7\xb9\x1c\xbb\x44\x81\xff\xa8\xff\x7b\x0d\xcc\xff\x9f\x3a\xf2\xbd\x06\xff\xd9\xf2\x7b\x8d\x21\xff\x83\xd5\xf5\xff\xa9\x62\xfe\xd9\xe5\xf7\x13\xa3\xf9\x83\x4b\x9f\xdd\xff\x58\xaa\xfc\x1c\xe4\x7b\x2c\x68\xff\x10\x84\xc9\xfd\x7f\x18\xc5\x9f\xc3\x7c\xdf\xf4\x1f\x6b\x09\xe5\xfd\xc7\x30\x3b\x63\x09\x02\xff\xe6\x02\x04\x80\x80\x26\x0e\x00\x08\xe6\xfb\xed\xf5\x6f\x01\x00\x00\xff\xff\x2a\x85\xf9\x15\x48\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3400, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd3, 0x8b, 0x11, 0x77, 0x7a, 0x16, 0xb4, 0xda, 0xf2, 0x3e, 0xd5, 0x20, 0x4f, 0x2b, 0x44, 0xc8, 0x12, 0x4d, 0x8, 0x83, 0xba, 0xcc, 0x58, 0x4f, 0xbf, 0x15, 0x1b, 0x13, 0x51, 0x56, 0xf, 0x50}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
