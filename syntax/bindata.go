// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.435kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x79\x3c\xd4\xeb\xbf\xff\xda\xf7\xa2\xa8\x64\x49\x1c\x63\x69\x18\x51\xf6\x7d\x8b\x19\x23\x4b\xf6\x25\x62\x0c\x1a\x91\x19\x22\x6b\x18\x4b\xd9\x3a\xd9\x46\x91\x64\x6c\x49\xc9\xd2\xc1\x34\xb2\x2f\xa3\x19\x89\xec\x49\xc4\x60\x6a\xc8\x96\x65\x72\x5f\xbf\x73\x6e\xaf\x5b\xdd\xd7\x3d\xf7\xde\x73\xef\xf3\xcf\xf3\x7a\xfe\xf8\xec\xef\xcf\xfb\x79\x5b\xc1\x58\x58\x05\x01\x4e\x80\x13\xf8\xf5\xf0\x02\x00\xe0\x15\x78\xc5\xc7\x0f\xa9\xe8\x19\x1c\xec\xe9\x37\xd8\x03\xef\xef\xbf\x05\xe9\xa3\x40\x6a\x6c\xac\xa0\x14\x70\xaf\x2c\x7c\x10\x46\xa6\x0c\x9f\x07\xcb\x0f\xc2\xfb\x59\xad\x53\x70\x50\x4d\x6e\x0f\x3b\x3f\x9c\x46\x85\x3d\x37\x74\xa7\x71\x5b\x0e\xaf\x51\xb1\xa3\x7e\x61\xf9\xa8\xc3\x7c\xf6\x6f\xf6\xd4\xa3\xb9\x25\x73\xde\x20\x03\x39\x9d\x64\x83\xfc\x58\x00\x00\xf6\xf7\xad\x60\x1c\x9c\x72\xf6\x66\x54\x1b\x00\x00\x02\x01\x00\xf8\xaf\x73\x91\x06\x00\x20\x20\xd0\x3b\x04\x85\x80\x20\xfd\x30\xbe\x21\x97\x14\xbd\x02\x03\x20\x9e\xc1\xc1\x0a\x9e\x7e\x90\x3f\xb3\x83\x20\x03\x15\x03\x02\xbd\x23\xb3\xe0\xf9\x0f\x55\xf9\x13\x47\x56\xe5\x1c\x41\x3c\xeb\xb6\x86\x7b\xe0\xdf\xdd\x0a\x45\x3d\x2c\xad\x0e\xb1\xf9\xa4\x0a\xc8\x71\x9d\x9f\x28\xa3\xc4\xe3\x70\xaa\xeb\x25\x0e\xe0\xa5\x37\x8f\x1c\xec\x0c\x47\x06\x14\xa5\x10\x8c\x4c\xf2\xad\xc3\xba\xae\xd2\xca\x0b\xea\x55\x27\x44\x2d\xcb\x74\xbd\x9d\x7d\xd1\x9a\xa7\x5f\x49\xed\xb8\x29\x93\x0b\x54\x0f\x69\x7d\xc8\x9c\xaa\x53\x6a\xf3\x89\xf9\x56\x6f\x04\xcf\x98\x9c\xc1\x84\x53\x62\x65\xed\x87\x5a\x48\x2f\xb3\x18\xd1\x3b\x9f\xa4\x51\xd0\x8d\xad\x2c\x62\xe6\x7e\x52\xbb\xf2\xc2\x45\xc5\x2d\x01\xa7\xc1\xbb\x65\x57\xc3\x32\x09\x06\xa1\x2c\x9e\x09\xe3\x0a\x6d\xb7\x23\x35\x93\x4e\x99\xf6\x9e\x41\x87\xda\x1a\x72\x65\xc7\x33\xe3\x79\x1d\xed\x04\x01\x3b\x77\x6a\xd3\x40\x51\xd3\x33\xf9\x48\x10\x42\xd5\xe2\xd3\xcb\xb9\x37\xe2\x1b\x46\xa1\xc4\x75\x11\x0e\x8f\x13\xa3\xc7\xdf\x5c\x0d\x1b\xa8\x03\x61\xd0\x75\x63\x87\x90\xa9\x0b\xf5\xee\xfb\x4d\xda\x68\xb3\x99\xa9\x0b\x23\x95\x80\x95\x9d\xb5\xd3\x5d\xa3\x11\x0d\xff\x5e\x81\xb1\x8b\xd5\x8c\xf9\xd2\x2b\x6e\xfe\xeb\x37\x3e\x51\x32\xb4\x6a\xbc\xdb\x42\x45\x41\xe3\x33\x30\x44\xdd\x8d\xe0\x4e\x35\x21\xf5\xb8\x62\x05\xff\x71\x05\xba\x91\x65\xff\x8d\x87\x93\xba\xcb\x55\x75\x03\x49\xbc\x07\x67\x93\xbf\x88\x34\x1e\xdb\xc3\x0e\x1e\x97\xef\x20\x9a\xb3\x58\xea\xa6\x62\x3a\xcd\xbb\x3a\xc4\x67\x6d\x4d\x78\x6a\x61\x6e\xa7\xf1\x7e\x53\x98\xe4\xbc\xc1\xa8\xda\xe1\x88\xc1\xc8\xc5\x98\x3e\xd9\xd7\xa2\xde\x5f\x4f\x6d\x73\xa4\xb7\x9b\x58\x9e\xe4\x9b\x8a\x22\xd1\xb8\x08\x1d\x3d\x27\x4d\x17\x4d\xd7\x73\xd3\x93\x8e\xd0\xa7\xe9\xb7\x8f\x2c\xc5\x40\x0c\x4b\x30\xc4\x93\x5b\x9e\x42\xde\xd0\xc8\xe9\xf4\xa7\x81\x61\xa2\x61\x38\x29\x78\x30\xaf\x0e\x84\x92\x38\xcc\xd1\x9d\xb1\xdf\x4d\xbc\x97\xf7\xbb\x5e\x2d\xef\xe7\xe5\x09\x74\xf9\x7d\x73\x06\xa7\xcc\xcd\x89\xf0\xfa\xf2\x03\x50\x9e\x6b\x61\x52\x8b\xdd\x33\xbb\x72\x33\xc2\x9c\x52\x96\x2f\x38\x27\x49\x6a\x8b\xdb\xba\x2d\xee\xba\x56\x95\xec\x6c\xce\x0e\x7d\xf3\x6f\x1d\x62\x43\x02\xf2\xa1\xb3\x06\x73\xd9\xa7\x1f\xdf\xd9\xe7\x1a\xe8\x8b\xb3\xc3\x33\xb9\xcc\x53\x23\x3d\xf9\xa8\x89\xf7\x18\xac\xfc\x41\xe6\xc8\x51\xf3\x33\xdc\xfa\x77\x99\x97\x26\x1b\x3c\x5c\x86\x1c\x9f\x63\xb7\x13\x04\xe8\x57\x65\xac\x2b\x9d\x9d\xbc\x78\xe7\x92\x1b\x82\xa9\xae\x65\xf0\x35\x2e\x89\xd7\x2e\xe3\xf9\xee\xd5\xd9\x03\x19\xbf\xb9\x33\xeb\xc0\x93\xf6\x31\x13\xac\x59\xf5\x95\x7d\x6e\x63\x86\x48\xb7\xb2\xf1\x4a\x9d\x2b\x5f\x98\x3a\x6b\x63\xc8\x31\x11\x07\x75\x87\xee\xef\xfe\x81\x8f\x20\x66\x7c\xcc\xc1\x41\x5e\x1c\x03\x85\x77\x2f\xcb\xba\x5f\x24\x46\xb5\x7a\xab\xad\x5d\x29\xb3\xc3\x8b\xf8\x02\x5f\x8a\xe5\x02\x3c\x6b\xce\x54\x06\x6b\x35\xeb\x59\xee\xb3\x7d\x87\xb5\x4c\x7f\xd6\x42\x02\x33\x00\xac\xb0\xfd\x1d\xac\xd5\xfe\x7b\x58\xa3\xc3\xaf\x60\x3c\xc3\x20\x68\x8c\x37\xca\xef\x12\xc4\x07\xe5\xf9\xef\xdb\x58\xe5\xf8\x0a\x5d\x6c\x26\xd8\x42\xb9\xb8\x5a\x9a\xc8\xfd\xea\x66\x41\x04\x72\xe8\x42\x40\x68\xfa\x1d\xd2\x5b\xf7\x4b\xf6\xce\x7e\xd9\xf2\xac\x8f\x98\x54\xe4\x12\xf7\xa3\x96\x37\x38\x8a\x62\xf3\x1e\x13\xe2\x25\x09\xd1\x17\x5b\xb6\xb0\x24\xf0\xc1\x59\x5f\x06\x1b\x20\x71\x44\x83\x1f\x84\x3d\x68\x61\x86\x83\xee\xe9\xae\x8e\x72\x40\x2b\x38\x54\x06\xaa\x0e\x9e\x0d\xec\xa9\x7d\xd1\xe3\xc1\x6e\x33\x00\xbf\xae\x6e\x5a\x23\xd1\xda\xf2\x66\x51\x72\xe5\x78\xa9\xab\x69\x92\x0c\xa9\xfc\xfc\x40\x95\xe3\xe1\x91\xb3\x16\xd3\xfa\x37\x0b\xbe\xb2\xb9\xe0\xc4\x63\x61\xbd\x52\x3b\x0d\x96\x0d\xf5\xb1\xb2\xbb\x4e\xa2\x6f\x0d\xdd\x97\x9c\x2c\x8f\x7a\xb7\xe6\xcc\xb0\xea\x2d\x2a\xef\xb5\xbb\xec\x75\xd1\x53\xce\x1d\xa1\x7d\x84\xac\xee\x28\x17\x10\x14\x57\xb6\xda\xb8\xb4\xaf\xbf\xdf\xf6\x99\x56\x5e\x66\x94\x83\xe5\xa7\xc0\xb9\xd6\xcf\xd0\x51\x41\x23\x7e\xc7\x67\xaf\x15\xaf\x37\x66\xcf\x83\x96\x0e\xfb\x41\x3e\x48\xc5\x7f\x04\xc1\x1b\x5e\x57\x13\x2f\x73\xe1\x97\xce\x29\xd5\x1e\xad\xe0\xc5\xba\xb6\xb0\x44\x25\x6c\x8b\xe6\xcc\xdd\x6e\x55\x9d\x6f\xbe\xbf\x27\x11\x19\xa6\xbd\xfa\x07\xff\x0e\xf9\xfe\xcd\xe9\x65\x4e\x93\xf1\x12\xf3\xd1\x4b\x71\xcf\x72\x79\x52\x94\x30\xa4\x24\xb6\x53\xca\xc4\xc3\xfd\x21\xab\xf9\xdd\x02\x94\xfe\x10\xd9\x06\x42\x32\x7a\x83\xc7\x1a\xa1\xef\xe8\x75\x5b\x77\x3e\x5e\xf7\x43\xbc\x00\xf2\x7c\xf8\xb7\x22\x1f\x6f\x42\x26\x9e\xe2\xff\x31\x76\xa7\x0e\xbe\x34\x98\xcf\x54\xad\x25\x51\xb7\x34\x19\x45\x9d\xbc\x1a\xf7\xee\x21\xa5\x5b\x1b\x7a\x27\x95\xef\xf8\x72\x16\x7b\xe1\x76\xa4\x59\x22\x7e\x71\x48\xae\x22\xa4\x32\x18\x5a\xb9\x77\xa3\x59\x2b\x88\xf9\x44\xe9\xa6\xa9\xd0\x7b\x95\xf5\x63\x44\xb2\x85\xe4\xc9\x3b\x3c\x8a\x16\xa0\xa2\xc2\x0b\x64\xa5\xa0\x9c\x72\x2e\x8b\xe5\xaa\xc3\x99\x9a\xce\x96\x7e\xc2\xf2\xf4\xa6\xa9\xa9\x95\x8d\xdb\xb6\x36\x6c\x7d\x21\x9f\x63\x6b\x10\x43\x08\xae\xe3\xef\xd3\x5d\x7d\x0c\x37\x73\xd9\x73\x3a\xa1\x0e\xc6\xbe\xa4\x62\xb0\x1c\x3e\xdb\x12\x2b\xc4\x32\x8c\x4a\x3e\x9c\x57\x96\x24\x49\xf2\x54\x88\x35\x3a\x16\xc0\x0f\x55\x9c\x8e\x32\x1b\x24\xb0\x57\x73\x13\x96\x1e\x3c\x44\xdc\x7d\xc9\x9b\x23\x23\xde\x1e\x0c\x09\x1b\x75\x29\xaa\x97\xee\x61\x92\x3e\x32\x57\x59\xd1\x91\xbd\x85\x53\x75\x2a\xd0\x44\x90\xd7\x37\xbb\x44\xd2\xcc\xc9\x9a\x2c\x35\xd8\x64\xfc\x12\x9f\x4c\x9d\x7f\x57\xe7\xe9\x44\xe1\x7b\x61\x55\xb6\xbf\x97\x9f\x0f\x6c\x6d\xd0\x26\x1b\x8f\x28\xc3\xfa\x2a\x97\x71\x29\xc5\x77\x93\x7d\xaf\xb9\x96\x0d\xe1\xe8\xfe\xfb\xc6\xec\x49\x92\xe4\x87\x5e\xe0\x0b\x4f\xda\xf2\xaf\x41\xb5\x53\x44\xcd\x93\x5b\x06\x1a\xfb\xf8\xaa\xeb\x04\x4a\x84\xe2\x07\x31\x7c\x21\x1e\x79\xcd\x7a\x01\xbb\xdb\xd6\xfe\x19\xe5\x4c\x3d\xf9\x57\x76\x63\x6e\xa8\x84\x38\x6f\x19\xa4\x49\x94\x1f\x7b\xda\x64\xad\x86\x8a\x28\xd4\x19\x53\xa6\x20\x4e\x12\x98\x5a\x76\x31\x05\x7e\xbe\x54\x43\x07\x97\xf8\xbe\x94\x09\xbb\x22\x20\x23\x0d\xcf\x6d\xcd\xa0\x37\xfb\x50\x9a\xc8\xef\x50\x80\x2f\x01\xd5\x26\x57\xd3\x00\xbc\x31\xd6\x6f\x62\x2b\x1b\x62\x21\x88\x3f\xcd\x7e\x6c\x3a\xec\x9f\x14\x8c\xd2\xf7\x84\x09\x4b\x06\x4e\x5c\xc8\xba\x17\x26\x8a\x1d\xbd\x26\xc0\x70\xaf\x18\x6e\xcf\x25\xeb\x5c\x1a\x7c\x5e\x6d\x92\xd7\xdf\x7a\x21\xf8\x54\xed\x19\x23\xad\x61\xd0\xda\xe6\xda\x5a\x40\xd1\x04\x7d\x09\x31\xfb\x8d\x58\xb2\x65\x22\xde\x29\x94\x2d\x09\x56\x8d\xc3\x58\x8c\x83\xa2\x03\xec\x9d\xdc\xf2\xac\xed\x0b\xa7\xc7\x1c\xc9\x6e\x1b\x8a\x93\x7b\xec\x31\x7a\x7a\x3a\x2a\xf5\x87\x5a\x0d\xbc\xd5\x4d\x34\xd9\x2b\x6b\x62\x75\x70\x24\x37\x55\x1b\x64\x8f\xcf\x02\x0a\x62\x2a\xd5\x8b\x54\x85\xd5\x7f\x14\x38\x45\x85\x92\x12\xde\x5e\xbf\xce\x7f\xb2\xdf\xf9\x96\x3f\x3a\xfa\x8f\x80\xf1\xb5\xbc\x0f\x1b\x44\xa4\xe6\x93\xdb\x8b\x0a\x79\x8d\x4d\x8a\xa5\xf6\x48\x92\x25\xc4\xd6\xd4\x9b\x47\x2e\x2e\xe3\x05\x76\x1c\x94\xb7\xbc\x19\x78\x4b\x69\x94\xd9\x00\x79\x1d\x26\x46\xd6\x7c\x4c\x33\x8a\x70\x84\x64\xd9\xa0\xce\xbc\xd7\x7b\x1a\xc7\x4b\xf5\x17\x3d\xd8\x5e\xe1\x98\x78\x3a\xca\x00\x66\xe7\x45\x0a\x17\x6c\x49\x8f\x1f\x1b\xd3\x5b\x7d\x8c\xe7\x2a\xfa\xb2\xc7\x6e\x31\x5d\x1c\x99\xe1\xbe\x17\x3f\x45\xa1\x09\x62\x5f\xfa\x77\x72\x4b\xfb\x10\xc6\x3e\xd8\x21\x5c\x54\x0d\xec\xfa\x87\x93\x8f\x7f\x24\xfa\xa3\x66\x61\x0f\xdc\x65\x9c\x0e\xbb\xc5\xcd\xac\x50\x5e\xfd\xe6\xef\x9b\x9a\x6a\x2f\xfd\x8a\x40\x77\xcd\x28\x95\x0e\x90\xc9\xf8\x20\x42\xab\x5b\x2f\x96\x2c\x0a\xba\x23\x49\x3a\x17\xd4\x5c\xd2\x05\xd3\x8e\x5c\xc4\x1f\xfa\xc4\x87\xfc\x26\x9d\xd6\xdd\x6e\x73\x99\x9d\xca\x59\xd1\x71\x43\x49\x08\x97\x0f\x8e\x88\x6e\xdb\xa0\x58\x18\x8f\x54\x08\x9c\x98\xf6\x05\xbb\x09\x5f\xcb\xa1\x35\xcb\xec\x06\xcd\x69\x59\x9f\x58\xce\xcb\xf5\x9e\xae\x85\xa7\x4e\x6c\x87\xd6\xf2\x96\xe8\x8e\xb2\x1e\x21\x55\xa4\xbd\x0f\x93\x05\x47\xc5\xd6\x63\x1f\x28\x8e\x99\x79\x75\x1b\x24\xd9\xcd\x94\x2e\xaf\xa9\x18\xc4\xa3\x87\x9d\x47\x16\x4a\x29\x7c\xf6\x55\x4d\x62\x6d\xa1\x60\x5a\xad\x8f\x58\x6b\xba\x16\x8e\xfa\x76\x47\x93\xbd\x7d\x25\x62\x66\x98\x4b\x65\x68\x2d\x30\xbc\xec\xc9\x16\xbb\x68\x6f\x9a\x9e\xef\xf3\x40\xb1\xf0\xf0\x8d\x4f\x5a\xa6\x4e\xe1\x3a\x05\x0d\x7a\x9e\xb8\x9c\x47\x97\x06\x02\x5b\x04\xfc\xbf\x62\xd0\xfb\x3a\xd4\x45\xb5\xf7\x9e\x9c\xdb\xef\x08\x2b\xe5\x59\xcf\xf7\x51\x98\x11\x31\x18\xb5\xe8\xab\x10\x22\x3c\x8b\x16\x5d\x8e\xae\x45\x63\x6b\x35\x06\xba\x67\x16\x0d\x9a\x22\x98\x08\x9f\xb0\x82\xfa\x1b\x4d\x96\x77\x75\x44\x3e\x7f\x8e\xd5\x6d\x1b\xa1\xd3\x5c\xf1\x1c\x6b\xe1\x8c\x8b\x46\xe7\xde\x7c\x7c\x17\xbe\x79\x87\x2a\xeb\x2f\x4e\x27\xc5\x30\x7d\x27\xe1\xf6\xd8\x02\x79\x09\x36\x00\xd0\x13\xfc\x3b\x12\xd6\xf8\xdf\x92\xf0\x5f\xd7\x5f\x34\x9c\x90\x49\x21\xdf\x55\xe2\xef\xa0\x6b\x77\x9a\x4d\xb3\x65\xf5\x34\xda\x9e\x5d\xaa\xdf\x12\x6f\x04\x87\x31\x3d\x4a\x4f\xa3\x49\xc7\x0c\xd5\x51\xdc\x85\x6d\x98\x53\x86\x28\x1c\x75\xb4\x7e\x4a\xf3\xec\xc1\x3d\x2a\xdc\x18\x15\x27\xcc\x6a\xb4\x82\x7c\xa8\x11\x17\xf4\x40\xc4\xf9\x04\x3f\x23\xe5\x75\x7a\xb5\xc0\xac\x5b\xc2\xd5\xcc\x42\x01\xec\xbd\xd2\x22\x4f\xb8\x98\xec\xa4\x84\xf8\xd9\xd9\x43\xa9\x9c\xcd\x73\xc5\xfc\x82\xc2\x58\x3a\xf3\x83\xfb\xa2\x6a\x8e\x9b\x35\xb1\xa7\x4a\xd6\x72\x5c\x39\xa0\xb3\x08\x51\x70\xfc\x3d\x53\x0f\xe1\xf8\x5b\x12\x0b\xf8\x85\x15\x2b\x45\xd3\xeb\x99\x6f\x41\x8f\x4d\x42\xeb\x67\x76\x0f\x38\x09\x99\xb8\xd8\x22\x01\x0f\xa7\xcc\x18\x15\x4b\x75\xf5\x67\xd2\xdf\xec\x22\x64\xf1\xdc\x91\x9d\x34\x86\x32\x6e\xc1\x99\xd1\x08\x79\x29\xd6\x2c\xf5\xc5\xdc\xa2\xac\x7e\x28\x5b\x5d\x34\xba\xc2\x48\x3e\x66\x41\xc5\x9a\x76\x94\xa3\xb9\xeb\xf2\x6c\xd3\x54\x8d\xeb\xd5\x45\xd7\xf3\x9b\xf5\xd9\xe9\xf3\x5d\x97\x0f\x48\x57\x76\x35\xbf\xc5\xf4\x2c\x58\xa6\x54\x12\xb9\x20\x3c\x8f\x96\x7b\x2b\x9d\xfa\x90\x0b\xe2\xbd\x56\x55\x89\x81\xf4\xbd\x69\xbe\xf0\xd5\xa2\xe9\x19\x39\x83\xb8\x34\x11\xd3\xb1\xc1\xda\x9c\xf3\xd0\x9a\x93\xf7\x63\x96\xbb\xd5\xef\x44\xc5\x24\x0f\x89\x99\xef\x69\xa2\x97\xb2\xcb\xbf\x6a\x26\x2c\x74\x0c\xdd\xd3\x85\xbd\x2f\x69\x61\xff\xc6\x0a\x37\x97\xa1\x21\x5a\x25\x77\x45\xbe\x0f\xcc\x96\xf5\xc1\x24\x94\x09\x00\x78\x59\xfe\x5f\x7f\xcd\x10\x8c\x1f\xea\xaf\x71\xa1\xd2\x5b\x6f\x26\x28\xf1\x1b\xd3\x19\x42\x6c\x11\xd6\x99\x34\xb7\x31\x88\x93\x4e\x5d\x01\x2b\xf3\x6b\x7d\x19\xa7\x04\xc4\xb7\xa8\x64\x65\x15\x5e\x0b\xb7\xa6\xf0\x8d\x03\x1b\x58\x05\x86\x06\xcf\x13\xbf\xf8\x92\x17\xbe\x8e\x2d\x97\xb9\x5e\x3f\x95\xe7\xc8\x4a\xc8\x17\x8b\xb4\x99\xbb\xe4\xe5\xf8\x4a\xe6\x91\x4f\xee\x09\x1d\x13\x87\x22\xb2\xfd\xd5\xaf\xad\x34\x2e\x40\x11\x34\x90\xe8\xc8\xaa\xf2\xa8\x10\x7e\xab\x64\x2a\xce\x6e\x75\xdf\x58\xa1\x85\xc4\x79\x44\xf8\xdd\xcc\xe9\x97\xc7\x6c\xd5\x3b\x10\x09\xa1\xc4\xcb\xdc\xe9\xd1\xfa\x5e\x0c\x12\xb1\x60\xda\x78\xc1\x3a\x3f\xb9\x69\x75\x7c\xf8\x8d\xce\xf7\xea\x93\x40\x9a\x85\x38\x00\x00\xb6\xfe\x94\xc2\x4c\xcc\x82\xc0\x7f\xd4\xff\xa3\x4c\xe6\xfd\x4f\x1d\xf9\x51\xa6\xff\x6a\xf9\xa3\x12\x91\xfe\xc9\x2a\xf5\x7f\x2a\xaa\x7f\x75\xf9\xe3\x5e\xa9\xfd\x9c\x08\xcb\x3f\x16\x34\xbf\x06\xf9\x11\x0b\x1a\x3f\x05\xa1\x72\xfe\x1f\x16\xf6\xd7\x30\x3f\x36\xfd\xe7\x5a\x70\xdc\xff\x18\x66\x56\x30\x36\xf6\x7f\xb9\x60\x03\xd8\x00\x22\x13\x00\xe4\xf2\xfc\xeb\xf5\x6f\x01\x00\x00\xff\xff\x71\x80\xf3\x79\x6b\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3435, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x30, 0x2c, 0x20, 0x5c, 0x85, 0xfa, 0xb6, 0xfd, 0xc6, 0x8, 0xf3, 0x0, 0xba, 0x88, 0xe4, 0x43, 0xd0, 0x16, 0xe3, 0x20, 0x4a, 0xdb, 0xdb, 0xae, 0x80, 0x9b, 0xac, 0x7e, 0xd9, 0x19, 0x4a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
