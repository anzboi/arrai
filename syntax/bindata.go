// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (1.348kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\xe0\x60\xe0\x60\x40\x07\x3c\x0c\x0c\x0c\xc9\xf9\x79\x69\x99\xe9\x7a\x89\x45\x45\x89\x99\x97\x4e\xf8\x9e\x39\xd3\xad\x7f\xea\xbc\xfe\xc6\xa0\x00\xaf\xf3\x3a\x27\x35\x7c\x2f\x79\x9f\x3b\x7f\xd5\x5f\x47\xeb\x92\xef\x19\x96\xc0\xce\x99\x5e\x56\x5c\x09\xa1\x99\x33\x2d\x57\x86\x71\x79\xfd\xda\xf9\x53\x73\xa9\xe5\xca\x5f\x16\x21\xaf\xc5\xc3\x9f\x4d\x55\x09\x7b\x21\x3e\x7d\xc9\x93\x14\x35\x47\x4d\xdb\x0e\xc7\x59\x0d\x0c\x0c\x0c\xff\xff\x07\x78\xb3\x73\x68\x86\x79\xbc\x08\x62\x60\x60\xc8\x67\x60\x60\xc0\xed\x16\x55\x06\x06\x86\xdc\xfc\x94\xd2\x9c\x54\xfd\xf4\xcc\x92\x8c\xd2\x24\xbd\xe4\xfc\x5c\xfd\xc4\xa2\x22\xdd\xc4\x4c\x7d\xb0\xeb\xf4\xd3\xf3\xf5\x72\xf3\x53\x5a\xa6\x9c\xae\xda\x62\xc6\xd3\x76\x7d\xee\xea\x84\x9b\x7a\x1f\x66\x1e\xd6\xb9\x15\x3b\x3f\xee\x40\x3d\xeb\x21\x8e\x82\xb6\x8d\x2b\x0d\x26\x1b\x84\xdf\x6f\x5f\xe8\x7b\x6c\xc9\xc9\xfd\x9f\x9c\xe6\xc7\xd5\x4e\x4b\x89\x77\xde\xdd\x33\xe3\xab\x1e\x9f\xf7\xe1\x9c\x1d\x45\x0a\xa7\x0e\xe6\xb2\xef\xb8\xbc\x92\x7f\x66\x4a\xd0\x7c\xbf\x96\xcb\x1c\x66\x81\xe7\x82\xd5\x4d\xdb\xf9\x34\x53\xcc\x4f\x9a\x68\x6f\xba\xff\xdf\x23\xe0\xdf\x3c\xf3\x07\xfa\xf2\x52\x47\xcf\xb4\xfd\xaa\x2e\x6c\xb9\xb9\x7e\x79\xfc\xbc\x23\xbb\x44\xea\x7f\xfd\x60\x7e\x1b\x2f\x32\x4d\xf3\x7f\x61\xa4\xbb\x42\x5f\xbe\x98\x7b\xb9\x7b\x5d\xf0\x4d\x5f\xc3\xb3\x2e\x93\x58\x94\x6f\x59\xb4\x68\x9f\x99\x53\xb0\xe8\x8d\xda\x8c\x04\xa5\x70\x27\xce\x85\xa1\x8a\x3d\x81\xab\x4e\xf5\xae\xe9\x0d\x59\xa4\xad\x9d\x6c\x7c\xce\xf8\x79\xb4\x7b\x46\x72\xd7\xaf\xf3\x6f\x4a\x5e\x96\xf7\x05\xad\x4c\xc8\xf7\x71\x7f\xd8\x57\x17\x7c\xe2\xd1\x8b\xb4\x70\x1e\x03\xfe\xe8\x3f\xdd\x1f\x5c\x14\xdb\xf8\x97\x6f\x12\x73\xd3\x0c\x9c\xb9\x4a\xa3\xe8\x6a\x29\xef\xb6\x1b\x0a\x62\xff\x67\xff\xbe\xf5\x23\xcf\x3b\xf4\x6b\x63\x6e\xfb\xef\xae\x23\x9c\x0b\x65\xe7\x1e\x67\x89\xe7\xd2\xdd\xaa\x65\xfe\x67\x67\x10\xaf\xd6\xe5\x59\x52\x93\xbf\xd8\x3d\xf1\x10\xc9\x78\xf6\x7b\xe3\x59\x2f\xa3\xca\x0b\x13\xa4\xdd\x1f\xac\xbf\x71\xe6\x60\x9c\x41\x9e\xd2\xe1\x4b\x6a\x96\x1f\xcc\x7a\x2a\x58\xcf\x3f\xf7\x10\x7b\xd6\x3e\x55\xf9\x15\x97\xe1\xaf\xb5\x2b\x66\x2b\x1e\x2b\x2d\xd7\x0e\xbe\x54\xf2\xf2\xfe\x59\x8e\x32\x3b\x81\x17\xac\x6f\x65\xdd\xca\x1f\xda\xb9\x5c\x5f\xbb\x5b\x4d\xf5\x8c\x44\xbb\x74\x80\xfc\x36\xaf\x96\x89\xd7\xee\x7a\xdf\xda\x79\xf3\xa2\xd1\xd9\x17\x3f\x25\xaa\xa2\xe4\xcc\xf5\xfb\x27\xf9\x77\xcf\x6b\x53\x4e\xdc\xc2\xfc\xf1\xc2\x9e\x3d\xb9\xaa\x26\xc2\xf1\xeb\x6e\xee\xb6\x78\xb4\x47\xfa\xfe\xab\xa5\xd3\xa3\x57\x34\x4b\x17\x59\xef\xaa\xbf\x1e\x67\xcb\xd3\x2a\x58\x73\x9e\xe9\xeb\x9f\xde\xe8\xa8\xe5\xcf\x75\x83\x9c\xae\x78\x69\x68\x6a\x07\x3e\x69\x5d\x2b\x72\x65\xab\x5d\xb8\x10\x9f\xdb\x3c\xc9\x3a\xe9\x87\xc2\x0f\x74\x7a\x6c\x66\xdf\xba\x52\xb9\x72\xc1\x6b\x87\xec\xcb\x21\xbf\xa4\x1d\x1a\x54\xf9\x5e\x1d\x08\xf0\xca\x5a\xfc\x6a\x4f\x46\xe8\xc5\xa6\x96\x5d\xa6\xf7\x0d\x9f\x95\xda\x31\x70\x29\xfa\x44\xce\xd8\xe3\x78\x33\x6b\xb1\xa8\xc3\x5d\x59\xc6\x85\xf2\x13\x6d\x0b\xab\xbe\xb4\xa7\x6f\xbd\xef\xce\xb1\xb8\xf7\x8c\xeb\x65\x2e\x0b\x71\xd3\x86\x9c\xfa\xae\x45\x27\xed\x96\xed\xd1\x7f\xbb\xfc\xc7\x62\xbf\xcd\x25\xfd\xef\x73\xea\x1f\x25\xee\xfa\x72\xa6\x72\xdf\xa1\xd2\x94\xf3\xf2\xa1\x52\x17\x6e\xfa\xd6\xef\xd0\x4e\x55\x5c\x6a\x16\xf4\xbc\x23\xe3\xe0\x15\xd9\xb0\xd0\x99\x3b\x7e\xbf\xfd\xe2\x0f\x4f\xb1\xdb\x99\xb3\xbf\xc5\x33\x31\x30\xcc\x67\xc5\x97\x62\x2d\x09\xa7\xd8\xe2\xca\xbc\x92\xc4\x0a\xfd\xe2\x92\x94\x9c\xcc\x24\x28\x05\xc9\x6a\x29\x7d\x8e\x5d\x2d\x01\x3c\x2e\xdf\xe7\x2d\x3a\xb0\xf7\xfb\x8c\xbf\x3a\xe9\xc2\x7f\x2f\xca\x3f\x2b\x57\xf2\xcc\xf9\xf8\xad\x57\xa1\xd7\xf7\x3d\xd7\x2a\xb9\xaf\x55\x7f\xc2\x38\x8f\x3c\xd9\xa4\x16\xb6\x7d\xb9\x08\x9f\x40\x99\x95\xc1\x6c\xe5\x37\x07\x67\x98\xcf\x0d\xf2\x61\x5e\x74\xe2\x54\x87\x8a\xee\x13\x56\x5f\x37\x75\xfb\x09\x6d\x13\x37\xee\x4e\xd9\x34\x4f\xbb\x48\xde\x83\xed\x8f\xca\xa4\x7f\x96\x76\x1b\xd6\xd5\x37\x9b\xa7\x6c\x74\xdb\xd5\x70\xee\xf7\x9d\x6b\xc7\x14\x74\x0b\xce\x9d\x35\x75\xc8\x8a\xbc\xb9\x3e\x6d\xfa\x9a\x05\x41\x4f\xae\x2c\x2a\x33\xfe\x53\xf6\xe2\x9f\x92\xf7\xe4\x8d\xcc\x0d\xda\xfb\x98\x60\x7e\x9f\x3c\x77\xc5\xc6\xa9\x0c\x0c\x0c\x3f\xc0\xb9\x95\x91\x49\x84\x01\xe1\x7b\xe4\x9c\xcc\x83\x11\x1e\xc8\x25\x09\xba\x4e\xe4\x10\x55\x45\xd1\xd5\x43\x6c\xbe\x47\x37\x12\xd9\xa1\x96\x28\x46\xda\x31\x53\x10\x31\x01\xde\xac\x6c\x20\x43\x98\x19\x98\x19\xbe\x30\x30\x30\x58\xb1\x80\x78\x80\x00\x00\x00\xff\xff\x82\x02\x0e\x09\x44\x05\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 1348, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6b, 0xf3, 0x94, 0x1, 0x22, 0x24, 0xe, 0x8c, 0x71, 0x7b, 0x7e, 0xdc, 0xbc, 0x51, 0x9b, 0x38, 0xa1, 0x25, 0xb4, 0x9b, 0x4c, 0xf8, 0x9, 0x58, 0xcc, 0xbd, 0x96, 0xc7, 0x34, 0x95, 0xd4, 0x9b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
