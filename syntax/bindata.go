// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.37kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x79\x3c\x94\x7b\xdf\xc7\x2f\xfb\x5e\x84\x48\x84\x91\xb5\x61\x44\x29\x3b\x25\xc9\x52\x91\x99\xec\x65\x99\x31\x33\xcd\x34\xc2\x24\x59\x92\x31\x96\x84\x9c\x6c\x23\x34\x61\x30\x25\x4b\x96\x8e\x31\x99\x2c\x65\x19\x66\xac\x21\x89\x56\x6b\x96\x90\x9d\xe7\x75\xce\x79\xce\xf3\x54\xcf\xeb\x39\xf7\x7d\x9f\xfb\xbe\xfe\xb9\x5e\xd7\x1f\xbf\xef\x76\x7d\xbe\x9f\xdf\xfb\xac\x0d\x17\xb7\x04\xc0\x0f\xf0\x03\x3f\x3f\xc2\x00\x00\x78\xe3\x2e\x23\x50\xbe\x5a\x9e\xfe\xfe\x9e\xa8\xee\x16\xbb\xf6\xf6\x78\x48\x1b\x1b\x52\xee\x70\xd6\x9a\x0d\x6e\x55\xb3\xeb\xb6\x61\xb1\xfb\xce\x80\x35\xba\xed\xda\xb9\xed\xe3\x48\xd6\x06\x82\x17\xa1\x28\x92\x3e\x15\x26\x68\xbd\x56\xb3\xaa\x4e\xd1\xa7\xae\x1d\x75\x9c\x92\x3a\xff\x39\x75\x3f\x6c\x5c\x2a\x3d\xff\xa3\x8f\x8a\xb9\xba\x71\xac\x79\x66\x04\x00\x00\xdb\xdb\x67\x6d\xf8\xf8\xd5\x61\x56\xe3\x0e\x00\x00\xe0\x00\x00\xf8\xff\x6b\x51\x06\x00\x00\x8b\xf3\xc1\x63\xe0\x10\x5f\x54\x20\x12\xef\xa5\xe5\x8d\xc3\x42\x3c\xfd\xfd\x35\x3d\x51\x90\xdf\xab\x83\xf8\xe2\xb4\xb0\x38\x9f\xd0\x14\x66\x66\x85\x9e\x70\x74\x7f\x07\xb4\x0c\x23\xb5\xd2\xae\x18\x7f\xb5\xbf\x50\x6a\xee\xc2\x4d\x6d\xce\x8d\x98\x01\xc7\x0c\xdb\x96\xbe\x65\xc5\x4a\xdd\x83\x3d\xa4\x54\xa9\xb5\xc5\xc9\x8a\xfd\xeb\x32\xaf\xe1\x4d\xc5\x41\x57\x9c\x64\x10\x8d\xa9\x5c\xf6\x3b\x2e\x1b\x3e\xcf\x3e\x1d\xd6\xb2\xff\xee\x5a\x20\x28\xcb\xb2\x2c\xce\x3f\xc7\x80\xaa\x1f\x68\xa5\x58\x7b\xaa\xc0\x39\x79\x73\xeb\x64\xe4\xd7\x24\x3a\xc7\x8d\xd5\x4e\x35\x84\x5e\xef\x48\xbc\x52\x7b\xb8\xf1\xe6\x57\xd0\x2b\xca\x4a\x4f\xb3\x3c\x72\x3b\xb7\xcc\x76\x35\x89\x69\xc0\x79\x85\xee\x2a\x3b\xcc\xb5\x6a\x07\x3f\xf2\xe2\x90\xf8\xa9\x5d\xb7\x91\x1f\x44\x4b\xb4\x03\x1a\xe2\x9e\xdc\xbb\x18\x19\xe7\x26\xa0\x1c\x05\x23\x6a\x5b\x52\x35\x8e\x3c\xd1\x73\x88\x2b\x29\xbe\xdd\x71\x94\x9d\x85\x93\x7b\x90\xa0\x3e\x69\x5a\xd1\x43\x19\xd1\xb7\xa6\x44\x3e\x3b\x28\x47\xe4\x5b\xb3\x53\x8c\xcf\xbb\xe7\x7e\xf0\xb9\x11\x66\x1e\xd2\x20\x4e\x94\x36\xc9\x6a\x73\x91\xa6\x58\xc0\x1f\xe6\xb6\x40\xfb\x0f\x0f\x78\x11\x9c\x36\x70\x33\xae\x1f\x6a\x35\xa1\xf1\x5c\x43\x3b\x92\x24\xe3\xc4\x8f\x19\x1a\x24\x09\xd4\x49\xb8\xa0\xa1\x97\x57\x02\x28\x32\x8e\x05\x87\x0f\xab\x4c\x84\xb5\x24\xab\x75\xb6\x2f\x7b\xdf\x4b\xf5\xf9\x4a\x56\x3c\x92\xf8\x7c\xa4\x8c\x44\x78\x76\xf1\x8d\x45\x34\xc5\xce\x7f\x14\x2b\x3d\x2f\x98\xc3\x4e\x06\xb7\x9f\x39\xf0\xcb\x84\x05\x9e\x28\xbd\x09\xeb\xed\x10\xfd\x40\xab\x4d\x55\x47\xd1\x16\x67\x11\xdc\x86\xf2\xed\x9d\x67\x2a\x77\x4a\x0f\x13\xd7\x45\xdd\x9f\xce\x64\xa6\x68\x7b\xcb\x5e\x36\x0b\x1b\xd0\x10\xb3\x74\x09\x82\xa0\xc6\x10\x27\x99\x87\xf2\xc6\xbc\xc7\x51\xc1\x6f\xe9\x46\xd6\x26\x9a\xd7\x65\x12\xa3\xba\x76\x34\x1d\x5f\x58\xd8\xca\xda\x21\x7e\xa1\x64\xb0\xf6\xe8\x7b\xfa\xde\x91\x49\x4a\xba\x6b\x11\x61\xaf\xbf\x21\xed\x46\xbf\x87\xb1\x08\x51\x2c\x94\xcd\xb9\xb4\xc1\xd2\x7c\xdc\x33\xb5\x5b\x5d\x11\xad\x9c\x92\x92\xaa\xf6\xb5\x01\x26\x38\xe9\x72\xff\x80\x00\x9f\x52\xa9\x30\x23\x61\x8e\xc7\x6f\xb7\x65\x8e\x1d\x76\x92\xee\xd8\x89\x27\x57\xa1\x34\x36\x45\x14\x9e\xef\xe2\xc3\x5f\x54\x53\xae\xb2\xc7\x7b\x54\x3e\x44\x9a\x1f\x1b\xce\x9c\x95\x5e\x30\x90\x07\x88\xa2\x05\x60\xdb\xb7\x64\x4c\x55\x97\x20\x79\xa6\x8e\xc3\x82\xde\xfc\x6c\x62\x28\x91\xd8\x99\xd4\xe2\xc1\x6d\xbc\xd6\x48\x18\xc2\x69\x44\x75\x59\x7e\xce\x45\xf1\x64\xc5\xcb\x98\x55\x37\x83\xee\x9f\x3d\x34\x38\xb6\xb1\x9c\x3e\xaf\xbe\x55\xdc\x03\x1e\x5e\xc8\x1b\x92\xbf\x91\xa1\x65\x1c\x90\x53\xea\x27\x37\x38\x25\x95\xc6\x1b\x78\xb5\x47\x7e\xc6\xda\xd9\x8a\x9a\xd0\xab\x0f\x72\xd1\xc6\xc7\x40\xa1\x2a\x33\xe1\x86\x9b\xe2\x7f\x6a\x97\xf1\x48\xff\x0c\x8a\x13\x00\x6a\x78\xfe\x4a\xbb\x47\xfe\xb1\x76\x03\x82\x2f\x07\x7a\x5e\x83\x04\x04\xfa\x60\x50\x5e\x10\x04\xc6\xf3\xbf\x57\xae\xd8\xa9\x23\x20\xd7\x4a\x82\xc1\xbe\x30\x5f\x10\x2d\xd8\x71\x2b\x3b\xc4\xb7\xd7\x11\x7b\x35\xf1\x2e\xf3\x95\x87\x17\xcc\x05\x95\xaa\xc1\xfd\x88\x43\x57\x3d\x7a\x3b\x6c\x6a\x89\x8f\x1c\x91\xf1\x98\x4e\x00\xd1\xc3\x2f\x30\x96\x89\x4c\xf0\xce\x0f\xc8\x4d\x1e\x40\x61\xb7\xbe\xa8\x0a\x71\xa7\xad\x15\xc9\x7a\xc3\x64\x7e\x80\xcf\x9a\xca\xa7\xdb\x59\xbc\xf3\x30\xae\xa5\xe2\x59\xcb\x45\x5e\x87\x4e\xbb\xeb\x47\x2d\xcb\x15\xea\x19\x3d\x13\xa0\x39\x99\x02\x37\xcb\x18\x55\x66\xd1\x99\xce\x62\x27\xf1\xfe\xc3\xb6\x23\x66\xb7\xb2\x57\x78\x5c\x49\xfb\x22\x6c\x5a\x95\xd6\xaa\x4f\x57\x57\x45\xa8\xad\x3b\xcb\xbe\x3a\xe6\x31\xe9\x7c\x5a\xca\xa7\x3e\xed\x1d\xb7\xe9\x84\xce\x46\xa3\xeb\xc6\xcb\xd9\xb8\x93\xbb\xa7\x3f\x41\xe6\xd7\x74\xb2\xe9\x5a\x73\xcb\x0d\x02\x46\xd7\x47\x57\x11\x23\x3a\x53\x9b\x45\x60\x8d\x61\x70\xba\xfd\x93\x80\x30\xbf\x7e\x94\xcc\x87\xa0\xdc\xc5\x9a\xd4\xcf\x2a\x93\xe2\x28\xc8\x7b\x25\xc2\x27\x15\xbb\xea\xae\x92\xba\x4b\x02\x94\xc9\x93\xda\x15\x52\x54\x61\xa2\x1b\x83\x2b\x2c\x6a\x55\x36\xed\x63\x72\xbd\xde\xe7\xda\xfb\x1b\x0a\xa1\xd7\x8c\xe6\x7f\x15\x5d\x63\xdd\xbf\x35\x32\xc5\x7f\xe2\x75\xfe\xa9\x01\xaf\xc8\x27\xe9\x42\x71\xda\x81\xcc\x18\x9e\x03\x3a\x75\xe2\xed\xf8\xf9\xcc\x66\x31\x76\x3b\x5e\xad\x9a\x1e\x1b\xb0\x24\x64\x0f\x37\x73\xf2\x4e\x36\xf9\x4c\x30\x79\x4f\x10\xf3\x3d\x13\xbc\x45\x46\xf8\xd0\xef\x50\xd8\xe8\x4f\x11\x6b\x95\x76\x93\xdd\x99\x1c\x25\x86\x0a\x95\x93\x6f\xc2\xc6\xdf\x5c\x89\x7c\x9b\xc7\x6e\x36\xb2\xbe\x7b\x5b\x44\x66\x2a\x85\x37\x67\x35\xd4\x2a\x9a\x32\xd1\xab\x4e\xc5\x3f\xf4\xb7\x7e\xb8\x71\xb3\xd6\xd0\x8f\x53\xbe\xe0\x9b\xa5\xe4\xa8\xee\xa2\x74\x1d\xcb\x16\xa4\x78\x57\x48\xcb\x56\x85\x9c\xe3\xc8\xd2\xf6\x4b\x2b\x12\xb0\x9d\x2a\x16\xbf\x63\xe0\x72\x1a\xb5\x47\x63\x96\x36\x3c\x3c\xb7\x94\x7c\xce\x81\xa7\x0d\x3f\x13\x51\x0e\xef\x85\x0b\xc8\x8c\x26\xba\x21\x8e\x7d\x4b\xe7\x4d\x7b\x61\x7d\xde\x02\xc9\xcc\x05\xab\x53\x52\x4f\x13\x25\xb9\xfa\x30\xb1\xe2\x19\x85\x31\x20\xa6\xa7\x66\xc4\x71\x69\xac\xa8\xb5\xd6\x48\x98\x55\x37\x9d\xb7\x44\x90\x3e\xf9\x20\x0f\x7e\xef\xb9\x70\x9a\xea\xbe\x46\x7f\xc8\xb5\x01\x57\x72\x95\x72\x0b\x87\xf2\xee\x8f\x0f\xa9\x4d\xa9\xcb\x24\x3d\xe7\x6c\x03\x38\x6b\xf1\xdb\xcb\xbd\x09\xa7\x58\x06\x5c\xe5\xc4\x58\xca\xa4\x88\x6a\x25\xfa\xe5\x8b\x83\xd1\x7b\xb2\xae\x15\x9f\xfb\xa5\xe8\x0c\xae\xbe\xda\x88\x65\xd1\xaf\x63\xd3\xf6\x70\x8a\x14\x97\x7b\x2f\x16\x19\xe4\x56\xd8\x4b\x9a\x45\x6f\x5b\xf0\xc6\x80\x58\x79\xde\x60\xc7\xd2\x86\xcc\x20\x6b\xa3\x38\xd9\x53\xb1\x8c\xce\x9a\x36\x91\x92\x4a\xb1\x7c\x49\x42\x77\xa0\x08\xfe\x62\x46\xad\x29\x76\x7d\xd5\x1e\x9d\x54\xc4\xd1\x92\x79\x79\xfd\xc6\x4d\x5d\xbc\xcb\xb2\x79\x82\x42\x91\x74\x19\xcd\xfe\x08\x26\x24\xc7\x78\x50\x87\x0d\x57\xa4\x73\x30\xd6\x03\xb3\x51\xc8\xf1\x63\xe7\x5d\x09\x6d\x71\x43\x50\x32\x90\x94\x40\x11\xb4\xdf\x9c\xad\x45\xb0\x69\xac\xb7\x18\x00\x49\xc7\x34\xa8\x97\x57\x03\x3d\x16\x66\x34\x9e\xc2\x5e\x2e\xfa\xbe\xb2\xd4\xc7\x96\x7d\xe8\x18\x7f\x8c\x99\xa7\xcd\x1e\x10\x6e\xc8\x31\x25\xeb\x9a\x2c\x71\x20\x48\x6c\xd3\x83\xda\xd7\x98\xce\x32\xf6\xea\x7e\x5a\x72\x22\xa3\xbd\xde\xd1\xff\x40\xc5\xa1\xe3\x86\x7d\x2a\x0b\xdf\x16\x16\xb0\xe4\xa1\xd9\x49\xf8\x87\xad\xba\xfc\xe5\x13\xfb\x5e\x48\xa6\x82\xc0\x7a\x91\x81\xb6\xaf\x55\xc2\xb1\x30\x67\xf7\x0c\x7b\x58\xce\xc8\xa0\x13\xcb\x7d\x49\xeb\xcd\x06\xef\x0d\x53\x53\x63\xdd\xaa\x5d\xf5\xe6\x3e\x47\x4f\x18\xf0\x3e\x2c\x8f\x30\x26\x31\xdd\xf5\x1c\x7c\x5b\x10\x63\x18\x88\xa5\x52\xab\xaf\x9e\x4d\xd5\x27\xb1\x03\xe3\xd6\xcc\xa8\x57\xd7\xaf\x8b\x2a\xb6\xbb\xc4\xa3\x03\xc2\x7f\xc5\xbe\x5e\xc8\x78\xbf\x54\xe7\x6b\x50\x9a\x3c\xa1\x99\x51\x43\xd3\x2a\x80\xf9\x32\x4f\x43\xce\x59\xfa\x08\xa9\x47\x26\x3d\x23\xbe\x56\xc9\x98\xfa\x86\x8b\xd7\x1e\xe0\x34\xf7\xbd\x6e\x23\xc7\x32\x78\x3c\x7d\x3c\xc4\x09\x92\xe2\x80\x39\x34\x6a\x5a\x16\x29\x3c\x8e\x96\xdd\xd9\x48\x75\x8a\x3e\x18\x66\x6e\x03\xf5\x66\x06\x4b\x30\x12\x09\x83\x83\xa6\xf3\x8f\x29\x02\xe4\xaf\x1b\xbc\xb6\x23\xb9\xa1\x49\x1e\x1b\x84\x61\xf6\xb4\x04\xf1\x39\xfa\x85\xa0\x32\x82\x3e\xf8\x1e\x0a\x77\xd5\x33\x87\xb6\xf7\xc5\xca\x7c\xaa\x43\x63\x3e\xd8\x3c\xf0\x50\x75\x16\x77\x8f\x7c\x37\xc7\xee\xd8\x8f\x46\xde\xbe\x0d\x53\xee\xa0\xcf\xba\x25\x15\x28\x63\x55\x93\xde\xef\x9d\xae\x5c\xcc\x05\x91\xfd\xee\x82\x98\x27\xfd\x6a\xf3\x5f\xda\x18\x85\x4e\x50\x76\x7d\x11\xf1\xdd\x52\x4e\x68\x6e\x74\xb8\xc4\x3b\xce\x4f\x6d\xba\xa9\x2d\x49\xca\x04\x87\x84\x37\x2c\xb1\x6d\x2d\xfa\xa9\x62\xf2\x23\x48\xb0\xfb\x9e\xa0\xb4\xe9\x5a\xd5\x75\xbf\x8f\x86\xf6\xf2\x53\x19\xe9\x3e\x23\x15\x76\xb7\x87\x56\xaf\x56\x08\xe7\x9b\x0c\x70\xef\x66\x52\x13\x46\xaf\xa9\x81\xc3\x22\xaa\x88\x0f\xb4\x06\xad\xbc\x9b\xcd\x63\xa0\xef\x0a\xa6\x16\x74\xcd\x09\x01\x7d\x2e\xfd\x63\x05\x6c\x11\x58\x31\x4d\xae\xe1\x2a\x78\xba\x02\x21\x57\x9f\x68\x48\x1a\x7f\xb5\x66\xc0\xdb\x38\x17\xf2\xae\x4f\x40\xb7\x77\x01\x17\x5c\x58\xba\xcc\x2b\xdb\x9a\x60\x8a\x7c\x8a\x93\x0b\x0e\x5e\xfa\x62\x68\xe9\x1c\x6c\x9c\x5d\x6d\xea\x49\x4a\x7b\xe4\xd5\x89\x63\x88\xa1\x57\x02\x03\xb6\x8d\xc7\x27\x8e\x8c\x7a\xf2\xaf\xbe\xa5\xcf\x15\xa5\x3c\xdd\xc6\x04\xf6\xcb\xd9\x8c\x93\x57\x24\xe1\xc1\x29\xd3\xe1\x45\x01\x15\x01\xc4\x0a\xfd\xce\xe6\x77\x13\xe6\xb4\x10\x0e\xfa\x17\xa2\x84\xd9\x12\xed\xf4\x3d\xe3\xbd\x33\x33\x11\x26\x0d\xfd\xb3\xd3\x6e\x14\xbe\x85\xe0\xcd\x0b\xc7\x4f\xf6\x7c\x7a\x1b\xfc\xed\xee\xb8\x1a\x7a\xdf\x2c\xf3\x06\xc7\x9f\x26\xdc\x18\x91\xad\xa1\xc0\x03\x00\xa6\x12\x7f\x65\xc2\xfa\xff\xaa\x09\xff\xf1\xfa\xc3\x86\x43\x93\xea\x2f\x57\x68\x8b\x46\xcd\x1a\xbd\xb0\xaa\x89\xd8\xa5\x1f\x14\xbe\x69\x5f\xfa\x6c\x39\x83\x19\x29\xe2\x84\x7f\xd5\xe2\x91\x69\x61\xb7\x3e\x9d\xaa\x48\xe9\xb4\x1a\xee\x19\x25\xe1\x82\x06\x46\x29\x15\x62\xe5\x3b\xaa\xa5\x16\xeb\x19\xce\x58\x10\xbf\x2f\x2d\x77\x9e\xa3\xeb\xbe\x70\xe6\xcd\x4b\xe5\x39\x4a\xe0\xe3\x06\x04\xb5\xa6\xcc\xc8\xe8\x0a\x28\xd9\x8f\x78\xcd\x91\x77\xec\xe2\x09\xe1\x42\x09\x22\xb9\x45\xc3\x48\x28\xca\xc3\xce\xcd\x73\x10\xc1\x2b\x65\x35\x25\x77\x45\xc8\x7a\x0c\x3e\x9e\xcd\x51\x6e\xa9\xad\xc3\x9d\xa8\xf0\xad\x9b\xe4\x17\xc4\x82\x19\xdc\x79\xa5\xd7\x07\x7a\x8a\x5c\x19\x50\x34\xb4\xec\x62\xc1\xf6\x00\x47\x95\x5a\xee\x83\xe3\x05\x6c\x4b\x9a\x9e\xbe\x36\x57\x87\x8e\x9a\x16\x4c\x33\x0e\x1a\xa1\x96\x82\xef\xdd\xdc\x5b\xcd\xf7\x31\x8f\x54\x70\xa5\x37\x6d\x60\x76\xa4\xcf\xa4\x35\x29\x14\x74\x6b\x38\x4b\xdb\x2d\x04\x5b\x33\xbc\xaf\x8d\x27\xfd\xb3\xbf\x3f\xe3\x7e\x37\xf2\x5c\x08\xf6\x58\x9c\xf7\x97\x9a\x72\xcd\xaf\x13\x94\xa6\x72\xda\x2d\x92\xd0\x23\x66\x2b\xb5\xb5\xad\xf0\xe3\x0e\xf5\xb3\xe0\xc4\xd2\xa0\xad\x2a\x45\xc8\xcc\xa2\x92\xd1\x96\x79\xa4\xe6\x32\xa1\x78\xa2\x95\x79\xb2\xd0\x29\xd9\xf4\x42\x9e\xc6\x93\xd2\xff\x61\x39\xfc\x55\x40\x69\x3f\x07\x00\xa0\x39\xff\xa3\xf7\x21\x3e\x10\x85\xf9\xe3\x47\x60\x12\xeb\x6f\x45\x69\x8b\x5a\xcc\x6e\x4a\xf2\x84\xd8\xdf\x99\x76\x1f\x84\x38\x1b\x57\x66\x73\x73\x76\x99\xa9\x3a\x47\xc1\xb7\xc2\x62\x75\x74\x85\x6d\xdd\x69\xc1\x4b\x3b\x96\x88\x9a\x9b\xfa\x42\xa5\x28\x42\xfe\x33\xa4\x13\xe3\x92\x40\x57\x99\x06\x5f\x4a\x54\xa6\x5c\xa8\xc3\x47\x2f\x6f\xa7\x0e\xd5\x47\x88\x74\x79\xe3\x13\xe7\xc9\x2c\xd8\x95\x95\xfa\x69\x01\x40\x4b\xa5\x33\xda\x89\x5b\xf7\x51\x8e\x5d\x7c\xfe\x70\x24\x74\x7e\xdb\x42\x93\xc1\xe4\xdf\xbd\xe7\xed\xbb\x83\xcf\xa5\xcf\x1d\x6d\x82\x47\x5d\xad\xbb\x24\x98\x18\x6e\xe6\xbd\xc9\xac\xcb\x1e\xb1\x18\xb3\xcf\x8c\xa5\xcd\xbf\xee\xeb\x31\xfe\xb3\xfb\x18\x15\x83\x1c\x12\x00\x00\xcb\xbf\x93\x2c\x07\xa7\x04\xf0\xbf\xfd\x7f\x4f\xb9\xc2\xff\x67\x22\xdf\x53\xf6\xcf\x27\xbf\x67\x0c\xe5\x1f\x4e\xdd\xfe\x67\x99\xf8\xe7\x90\xdf\x6f\xcc\x91\x1f\x42\x5a\x71\xfd\x6d\x54\xf9\x39\xc9\xf7\x5a\xd0\xff\x21\x49\x07\xff\xbf\xb1\x8a\x3f\xa7\xf9\x7e\xe8\x3f\xf6\xe2\x24\xf8\xb7\x65\x76\xd6\x86\x87\xf7\xb7\x10\x3c\x00\x0f\x50\xc7\x01\x00\x30\xa1\xdf\xbe\xfe\x2b\x00\x00\xff\xff\xb2\x21\x5c\xb0\x2a\x0d\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3370, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9f, 0x2f, 0xc6, 0x2, 0x47, 0x55, 0x82, 0x17, 0x25, 0xb1, 0xde, 0x53, 0x41, 0xd5, 0x8e, 0x9d, 0x7f, 0xba, 0x81, 0xd2, 0x91, 0x3b, 0x5e, 0xd0, 0xc8, 0x7, 0xaf, 0x27, 0x49, 0x77, 0x7a, 0x7f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
