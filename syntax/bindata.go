// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib-safe.arraiz (3.585kB)
// syntax/stdlib-unsafe.arraiz (1.409kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibSafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x67\x58\x53\x79\x9f\xbd\x74\x02\x19\x44\x29\x2a\x2a\x8a\xb4\xd0\x12\x0b\x48\x20\xa2\x80\x88\x43\x93\x22\x20\x45\x4a\x4c\x02\x84\x10\x90\x04\x41\x50\x20\x48\x18\x40\xaa\xd2\x42\x0b\xa8\xa0\x14\xa5\x48\x28\x82\x8a\x41\x8c\x48\x8b\x10\x51\x60\xc0\x0c\xbd\xf7\x6a\x40\xb2\xcf\xce\xec\xec\xaa\xfb\xec\xbb\xbb\xef\xee\xfd\x72\x3f\xfd\xfa\x39\xcf\x39\x7f\x2b\x33\x3e\x7e\x49\x40\x18\x10\x06\x7e\xfe\xc0\x00\x00\xa0\xfc\x7c\x3d\xb0\x9e\x50\x24\x81\x80\xc4\x76\xb7\x58\xb4\xb7\xc7\xc1\x5a\x99\xb0\x4a\x1b\x2b\x53\xa6\xfa\x7b\x88\x45\xb7\x59\x27\xb3\xc7\x52\x5d\xb5\xdb\xa2\x9d\xdf\x3a\x36\xd3\x54\x57\xc4\xdd\x0e\x9b\xa9\x53\x6c\x2f\x62\xca\x79\xfe\x55\xa5\x50\xa7\x98\x03\xb7\x9d\xd9\x7b\x79\x3c\x4d\xc1\x7e\x72\x6f\x46\xc1\x28\x5a\xc9\x40\x65\x70\xb8\x99\x66\xab\x17\x83\xcd\x22\x01\x00\xc0\xe5\x5a\x99\x09\x09\x87\xb2\x52\xa2\x2f\x03\x00\x10\x00\x00\xc0\x7f\xdd\x90\x22\x00\x00\x78\x3f\xf4\x75\x1f\x0c\xcc\x13\x1b\xe0\x75\xfd\x2a\x14\xe5\x87\x87\x21\x09\x04\x0d\x24\x16\xf6\x67\x8b\x30\x4f\x3f\x28\xde\x0f\x7d\x2b\xd5\xac\x7e\x44\x49\xdc\xf8\xdd\x92\xaa\xa6\xb9\xe0\xb0\x35\x49\x36\x12\x9d\x0e\x13\x9d\x94\x3a\x62\x7b\x0f\xdb\x66\xa8\x92\xbc\xd5\x5f\xca\x54\x2e\x6d\x28\xef\x9a\x1b\xd8\x1d\xc9\xd1\x39\x78\xe7\x9d\xd6\xea\x0c\xf9\xed\x24\x2b\x78\x8e\x22\x7a\xd9\x37\xd6\x74\xa6\x96\xce\x61\x61\xc1\x51\x68\x9b\xdc\x8b\xe4\x36\xb4\x4b\x7a\x7c\xdb\x11\xa9\x5a\x3e\x1b\x88\xef\x3d\x15\x8f\x3b\x67\xb9\xad\x56\x2b\x0f\x67\x67\x6f\x05\x33\x01\xd6\x81\x69\x76\x8f\x84\x74\x63\x5e\xd8\x4d\x50\xa9\xe9\xb6\xde\x63\xd8\xe4\xce\xfd\x0a\xe8\x58\x46\x5b\xe8\xb3\xe6\xa5\x8e\xa1\xd1\xc3\x2d\x7e\x56\x03\x24\x15\xa5\x67\x26\x81\x86\x19\x9d\x43\xde\xf2\xca\x57\x8a\xea\x40\x4a\x14\x88\x01\x49\x5c\x24\xfe\x83\x4c\x3e\xb4\xda\x87\xc6\x7f\xdc\xb6\x3a\x50\x60\x22\x2a\xef\xa6\xe5\xa4\x4d\x22\x47\xae\xe1\x0a\x23\x97\x2f\x59\x68\x9d\x01\x96\x94\x85\xfb\x81\xfa\x64\xf1\xeb\xcd\x7d\x8c\x15\x7b\xbf\x30\x17\x57\x48\xc1\xa2\xaf\xea\x81\xfb\x3c\x46\x4f\x71\x28\xd3\x7d\xbf\x89\xdd\x9c\x15\xef\x80\x4d\x84\xcd\x8c\x23\xb3\x4b\x56\x23\xe6\x3a\x93\x10\x7b\x94\x69\xdf\x46\x3d\xdb\x17\xd3\xac\x6c\x0c\xaa\x87\x7e\x97\xd1\xe5\x1f\x9c\x11\xac\x9a\x42\x41\xee\x42\xac\x46\xb7\x2a\x72\xd3\xd0\xcb\xc9\x72\x67\x2d\xd2\xc3\xdf\x40\x05\x83\xe8\xb4\x28\xcd\xb6\xec\xd1\xb9\xd9\x26\xf2\x65\xc4\x0a\xa5\xa5\x6f\xd3\xf6\xae\x39\xa6\xb8\xd4\x02\xfb\x45\x7a\xad\xeb\x51\x00\x1b\x8f\xb9\xe8\x04\x1d\xb1\xdc\x4f\xef\x8f\x04\x87\x9e\xdf\xa8\x48\x69\x5c\xd4\x51\x38\x3b\xb0\x61\x7e\x31\x5f\xcb\x58\xe4\xf8\xb2\xef\xb3\xf9\x13\xc9\x0b\x73\xdf\xb6\xf4\xee\x99\x6f\x2f\x9c\x8f\xa1\x74\x6a\x9b\xa1\x7a\xf9\x41\x12\x83\x1b\x1a\xa3\xbf\x24\x51\x3f\x29\x0e\xb7\x3f\x3e\xd6\xcd\xf1\x71\x20\x5e\xdb\xde\x3c\xb3\x4c\x38\x6a\x3e\x6f\x7e\x3a\xc0\x8d\x4d\x8d\xe6\x64\x7e\x4c\xba\xd6\x54\xb7\x70\xf9\x19\x27\x9f\xd6\xed\xee\xd7\x32\x38\xda\xb8\xb0\x87\x1a\x71\xac\x2f\x18\x1d\x61\xbc\xc3\x38\x34\x98\xf1\xb9\x4d\xc8\x50\xf3\x88\x7e\xab\x13\xa5\xbb\x4e\xc6\x87\x55\x54\x93\xbe\x7e\x64\xb9\x95\x52\x9b\xc2\x05\x25\x37\x91\x76\xa7\xf1\x5e\x4a\xab\x21\xf6\x43\x92\x35\x02\xc7\x25\xf4\x2b\x70\xba\xe7\x94\xba\x44\x80\x62\x4d\xcd\xc2\x29\xfa\xaa\x7d\xff\xa3\xcf\xd3\x12\xc6\x2f\xde\x99\x3f\xb0\x31\x14\xe6\x33\x4d\xbd\xea\x25\x24\x9a\x76\x28\x8b\xb3\xd9\xeb\xc6\x03\x62\x77\x7f\x59\xf5\x2e\x25\xfb\x1b\xae\xef\xd9\xe7\x7f\xe6\x05\x0b\x7f\xf7\xa9\x23\x23\xa6\x7e\xb6\x44\x56\x90\xf5\xcb\x83\xf2\xad\x91\xa3\x87\xad\x68\x75\x13\x5f\x17\xb8\xf4\x68\x0e\x31\xd7\xf7\x10\x95\x8b\xaa\xf6\x4c\x6f\x6b\xd9\x6e\x5f\x58\xd7\xad\xfc\x9c\x07\x83\x15\x0d\x3f\xfa\x32\x57\x50\x84\x11\xd5\xd0\x2f\xfe\xbd\xd5\x0b\xa5\xa6\x38\x0d\xad\xda\x1a\x59\x75\xfb\x77\x64\x9f\x6f\xba\xe3\x1a\xcd\x0b\x00\x8b\x02\xff\x08\xd9\xda\xff\x3d\xb2\x89\xc1\xbe\x01\xc8\x1b\x30\x62\x00\xda\x07\x7b\x15\xe6\xe1\x83\xfc\x37\x56\x3e\x71\x30\x4b\xca\x6e\x91\x68\x9c\xb8\xf4\xd1\x2d\x52\x70\xf3\x40\xca\x4d\x66\x7f\x3c\xad\xef\x60\x4a\x9b\x37\x0c\x55\x8e\xcd\xae\x49\x20\xd3\xbd\x5f\x9b\x18\x6d\xce\x97\x4e\x0b\xed\x62\x91\x2e\x64\xe9\xf6\x9e\x2e\x29\x2d\x99\x59\x2a\xf5\x3e\x15\xbc\x5b\x71\x69\x47\x02\xd0\x6f\x12\xb9\x26\xec\x29\x2b\xce\x08\x66\x2c\x71\x8d\x25\x76\xdd\x62\x07\x21\x05\xee\xad\x15\x0e\x25\x78\x85\x79\xe8\x3c\x21\x9d\xe4\x26\xbb\x94\xf9\x37\xe5\x2c\xb2\xc7\x4e\x08\x0f\xa6\x17\xff\xb1\x34\x16\xe7\x91\xaa\xb6\xfd\x62\x00\x51\xf3\x94\x42\x25\x55\x49\x6c\x81\x2e\x50\x5d\x48\x84\x8b\x28\xee\xbb\x33\x7a\xa7\x78\x87\xb7\x9d\x83\xfb\x4e\x86\x95\x7b\x56\x81\x73\x48\x3e\x0f\x04\x76\x38\xd9\x93\x5c\xdf\xc5\x03\xdc\xbd\x65\x12\xc9\xb5\x8d\xbd\xeb\xf8\xe7\xbd\x82\x37\x0e\x3b\xdc\x9f\x71\xf3\xf2\x87\x07\xb5\x73\xae\x4b\x49\xdb\x05\xba\x2e\xc2\xf5\xfa\x64\x7b\xb7\xd4\xcd\x16\xcf\x4a\x71\x66\x9d\x08\x88\xe1\xbd\x53\xed\xf7\xd4\x22\x3a\xe4\xcc\x92\x96\x8a\x83\x4b\x40\x85\xad\x97\x2b\xba\xf7\xee\x4f\xda\xc7\xe6\xf2\x72\xa5\x3e\xe1\x7a\xe1\xe5\xfc\x89\x20\xbd\xd0\x87\x7b\xc7\xe9\x33\x09\x4a\x8a\x29\x96\x3b\x92\xdb\xf3\xfa\x90\x6e\x39\xb3\x87\x62\x12\xb6\xc6\x50\x85\xe8\x3f\x6a\x4e\x0b\xff\x9a\xc9\x92\x90\xaf\x49\xf8\xac\x19\x8b\x2d\x2b\x93\x0f\x2c\xc0\xd8\xc4\x20\xe2\x55\x79\xa2\x69\xd2\xef\x31\xb2\x2d\x8a\xb2\x10\xff\x90\xb4\x99\x04\x6f\x63\x06\xc2\x91\xf0\xd4\x56\xac\xc8\xb2\x5f\x01\x5a\xbd\xdf\xfd\x77\x79\xc3\x19\x3a\x2b\x83\x2e\xa1\xa6\x09\xfd\x16\xa6\x31\xac\xde\xf1\xbe\xa8\xd2\xbe\xb0\xa9\xca\x35\xe9\xfd\x07\xda\x15\xa7\xb4\x72\x6d\x3b\xe7\x34\xd8\x3a\x1f\x93\xe9\x1e\x25\xab\xbe\x16\xa9\xdb\x1c\x54\x87\xda\x64\x9b\x2a\xee\x39\xd1\xe7\xfe\xe6\x2a\xcf\xb0\x05\x3e\x41\xe8\x62\x4a\xf9\x41\x96\x23\x2e\xea\xe2\x88\x46\x69\x37\xb8\x1a\x81\xdf\xf8\x10\xaa\xf4\x4c\xd5\x8d\x1f\x93\x85\x50\x40\x4b\xec\x72\x6c\x3a\x75\xed\x72\x2b\x91\xd1\x51\x18\x81\xa9\x4c\x91\xda\x3d\xf5\xac\x48\x95\xbd\x81\xcb\x14\x41\xf0\xf2\xfa\x1c\x54\xb3\xf5\x83\x61\x5c\x5f\x53\x79\xa2\x20\x67\xdc\x21\x2a\xdc\x31\x83\x2c\x29\x8b\x3f\xa6\x3f\x3c\x75\x13\x74\x4a\x54\x79\xe2\x4e\x7c\x08\xf2\xe9\x8c\x37\x66\xf0\xe2\xd5\x0d\xc4\x8a\x2a\x8e\x04\xe1\x15\xe7\x07\x92\x68\x26\x33\xa9\x2a\x2c\x16\x6e\x55\x5b\x26\x65\x3d\x99\xde\x15\x15\x53\x38\x9d\xa8\x4c\x03\x46\x96\xb3\x5e\x8b\xf8\x6a\xde\x55\x99\x8a\x71\xd3\x3e\x72\x21\x6b\xd4\xc7\x2b\x53\x09\xd9\x13\xe0\xf1\x60\xf2\x93\x3c\x01\x51\x63\xf7\xbe\xbd\x76\x6c\xc7\x41\x2c\xe3\x84\xca\x30\xae\x89\xdf\x1e\xd9\xe1\x2c\x55\x66\x94\xa8\xd9\x84\x18\xb8\x82\x8f\x96\x38\x76\x9b\x26\x6f\xa5\xf2\x51\x5c\x94\xf1\xbc\x03\x8b\x1b\xbf\x50\x2c\x68\xbd\xd6\xf6\x98\x5e\xa5\x0c\x67\x69\x9a\x52\xa6\x77\x4b\x5c\x63\xdf\x26\xc0\x5e\xbd\x8a\x67\x3b\x50\xb4\x72\x4e\xed\x2b\x8e\xa8\x4b\xaa\x91\xcd\xc1\xee\x9c\xcf\x08\xa3\x9b\x9d\x1a\x86\x3f\x56\xf6\xd8\x7c\xa1\x66\xac\xf0\x26\xe6\x60\xec\xd0\xb9\x90\xf2\x9c\x5c\x13\x61\xfd\x14\xfd\x49\xad\x04\x7e\xff\x90\x87\x26\x07\xe5\x68\xf7\x27\xbc\x2f\x11\x28\x57\x3f\x96\x62\xaa\xf2\x10\x74\xeb\x96\x6d\xa1\xbb\x72\x78\xa2\xe3\xe9\xcf\xd5\xb9\x85\xe0\x67\xf2\x0e\x69\xf1\x37\x59\x0d\x38\x97\x49\xde\xb7\x6f\x90\x29\x54\xf3\xa3\x9d\x65\xf1\xd2\xea\x21\xa7\x93\xea\x83\xe2\xd6\x46\xb0\x85\x5a\xd5\xa0\xc2\xbc\x78\xa1\xd6\xe0\xe8\xc6\x4a\x19\x64\xa1\xf9\xf1\x45\x78\x89\xf7\x01\x61\xc3\x19\x29\xd2\xf5\x75\x85\xfd\xf3\xa7\x54\x2a\xee\x23\x44\xc6\xae\xb3\x99\xe7\xea\xfc\x3c\x9e\x32\xf3\xd4\xb8\x44\xc7\x66\x93\x39\xa2\x74\x9a\xd0\x38\xd8\x1c\xf1\xc8\x15\xe5\x6a\xc7\xce\xbc\xd4\x53\xa6\xbd\xaf\x97\xe3\xeb\xbf\x50\xb3\xc5\x1f\x1e\xce\x5d\xce\x8d\x89\x15\x87\xaa\xbf\x53\xd2\x3d\x66\x15\x70\xde\xc7\x24\x35\x6f\x39\xb3\x4e\x3e\x5b\xf6\x64\x7c\x65\x56\x04\x56\xcb\x21\x4e\xee\x73\xd7\x6d\x25\x5d\xc1\x80\x47\x2b\xa2\x71\xee\x3d\x99\xac\xdf\xd7\x46\x5c\xf8\x38\x3a\x72\x2f\x1f\xcb\x24\xdd\x9b\x12\x34\x72\xe9\x88\x7b\x9e\x9d\xdd\xd0\x37\x94\x2f\xa2\x7d\xa4\x33\x5e\x2b\xa1\xa7\x3e\xd6\x14\x7e\x89\x77\x49\x49\xfc\x52\x79\x59\xec\x78\x5a\x58\xbe\xee\x98\x51\x90\x4c\x78\x64\xda\xc7\xe9\x0b\x5a\x36\x37\xdd\x86\x52\x6f\xb1\x5e\xe0\xda\xf7\x77\x8a\x9d\xa8\x7a\x75\x34\xbe\x64\x76\x0f\x8a\x79\xe3\x8b\x70\xfa\xd2\x68\xf0\x39\x96\x80\xb7\xa4\xe6\xc5\x9a\x15\x47\x14\x65\xc5\xf9\xc9\x94\x1c\x65\xb1\xd5\x7c\x94\x4a\x32\xb6\x86\x4a\x47\x18\xd5\x1d\x8d\x1c\x6e\x27\xc9\x8a\x8d\x15\x9a\xf3\x87\xdc\xc9\xe4\x5d\x06\x27\xa6\x32\xfb\x37\xe4\xa1\x9d\x93\xd4\x70\xb2\xa6\x8e\x64\xfa\x78\x7d\xbd\x5b\xc8\x25\x33\xf4\xcb\xea\x4a\x16\xa5\xa7\x38\x91\xf4\x02\xef\x6f\x18\x2e\x81\xab\xb9\xea\x23\x99\xf1\x9b\xce\x22\xf5\x9a\xa9\xcb\x13\x4c\x77\x80\xb8\xf5\x55\x64\xb6\x89\x4d\xce\x57\x87\x22\xac\x53\x66\x6f\xb4\x17\x71\xe5\xf1\xae\x60\x5f\x39\x7c\x88\x0e\x65\x97\x2b\x3b\x37\x91\x62\xe4\xe1\x01\x97\xb3\x38\xf4\xe4\x31\xcb\x24\x85\x96\xc2\x78\xcf\x17\xe8\x7d\x2f\x71\x6f\x6c\x9b\xa3\x6b\xbb\xc2\xbc\x5e\x75\x43\xf3\xdb\x8d\x06\xc9\x07\x83\x58\x66\x10\xf6\xcb\xe1\x2c\xdd\x68\xd1\x29\xb9\xcc\xaf\xd6\x0c\xc2\x71\xcf\x9c\xa9\x5f\x98\xfb\xa7\x85\xdd\x9d\x2d\x74\xdb\x93\x3a\xb3\x94\x3c\x3c\x2c\x38\xf2\x42\xc1\xb5\x13\x42\xae\x79\x33\x16\x1b\x05\x67\x27\x21\x87\x83\x56\xe6\x90\xfb\x7f\x7d\x54\x71\xfc\x49\x81\xb3\xf6\xed\x95\xb2\x0f\xab\x62\x9f\x2e\x82\x15\xdd\x9b\x4f\x04\x4a\x16\x38\x9f\x1f\x40\x2f\x85\xa1\x3f\xe4\x97\x3b\x4d\x73\x7a\x57\x83\x5f\xdf\x19\x14\x97\xd3\xcc\x41\x3e\xb4\xe6\x3b\x52\x73\x90\xff\x82\x6d\x63\xae\xe8\x9b\x4d\xa1\x98\xf7\x54\xc4\xa7\x55\xd9\xaf\x37\x3e\x9a\x7b\xc1\xb7\x69\x5b\x06\x0d\x7a\x2f\xef\xd6\x3e\x7d\xbc\xab\xca\x6e\x4e\xa6\x9f\xa2\x83\x8c\x4d\x55\xbb\xe5\x5e\xe3\x06\xb2\xbb\xb5\xe7\x6b\x78\xd2\xbc\xad\xe6\xaf\x5d\xbb\x15\x95\x1f\xbd\xd8\x21\x9f\x3a\xa8\xae\x35\x24\xd8\xc7\x84\xc3\x86\x57\x57\xed\x9e\x38\xaf\x49\x95\x7d\x22\x11\xb7\x7b\x43\x3c\xe1\x71\xf4\xa4\x93\x23\xe0\x8f\x06\xcd\x7e\xbb\xc8\x8b\xdb\xe0\x9d\x52\x38\x72\xcd\xb6\xbe\xc2\x55\xfb\x70\xb5\x60\xd6\xbc\xf2\xf6\x97\xa7\xf2\x2f\x21\xc1\x03\x96\x5c\x81\xbf\x75\x40\x35\xb4\x6d\xe3\xa1\x00\x00\x14\x49\xff\x23\x1d\x38\xf3\xbf\xd5\x81\xbf\x7e\x1a\x44\xa4\x07\xe6\x2f\x39\x20\x27\x5b\x32\xb3\x8f\x81\x19\x0b\xb7\xee\x5c\x08\x81\xe5\xdb\x4f\xe5\x62\x7b\xca\x1a\x16\x5a\xde\x8a\xf3\x75\x75\xf3\x2b\x3e\x0a\xa7\xf9\xe6\x85\x8a\x04\x48\x3a\x61\xcb\x77\xdd\x1d\x99\xf8\xfa\x36\xf0\xcc\xe2\x43\xed\xdd\x95\x20\x0f\x71\x30\x3d\x2f\x61\x5c\xb8\x29\xca\xd7\x2b\x54\x7f\x55\xd9\x18\x51\x6f\x1c\x1f\xb4\x9b\x61\x10\x62\x2c\x49\xc8\xba\xfd\x9b\xd6\xf5\xfc\x6b\x91\x37\x3e\xc6\x9b\x1d\x3b\x3a\x7b\x2f\xce\xd0\x0a\x2d\xf9\x4a\x94\x1c\x46\x18\x70\xef\x7b\xc7\x5b\x96\xdc\xe9\x4c\x38\x04\xa9\xce\xf0\xaf\x00\x13\x64\x22\x30\x60\xe8\xed\x9c\x0c\xea\x9b\x73\xcf\xf7\x4d\x19\x38\x65\x6b\x4a\xf7\xf5\x90\x17\x4e\xa2\xed\x24\xf1\x16\xb9\x3c\x24\x8c\xc1\x4e\x07\x7c\xe8\x8f\x96\xf4\xcd\x8c\xb9\xfb\xa9\xaa\x8b\x52\x55\x1b\x6d\x68\x2a\x71\x6d\xe2\x15\x10\x34\x9b\xd8\xa2\x7c\xfc\x3c\xae\x58\xcd\x1f\xbe\x6d\x13\x9d\xba\xd3\xe9\xf9\xa0\x17\x26\x16\x98\xf0\x99\x71\xbd\x01\xf5\x7c\xd8\xe6\x8a\xe5\x7a\x75\xaa\x21\x71\x44\x2b\x7a\x8f\xdd\x88\x0b\x4e\x77\x94\x58\x68\x64\xc7\x26\x67\x44\xf4\xac\xa1\x7b\xd4\xc7\xaa\x88\x49\x68\x88\x7d\x47\xad\xdf\xce\x42\xd4\x8b\x1b\x1f\x16\x16\x69\x06\xb7\x13\x0e\x18\xf7\x75\x57\xa5\x5b\x9a\x56\xca\xe5\xd5\xae\x79\xe6\xbc\x7f\x15\x6e\x54\x92\xa8\x10\xf6\x92\x58\x92\x56\xb4\xa9\x4b\xf6\x7c\x67\x9b\x93\x88\x19\x2a\x68\x84\x6e\x83\xb2\x4e\xe5\x56\x4c\x90\xfa\x02\xb6\x7f\xf9\xfb\x6c\xb5\x1b\x86\xd6\x66\x3c\x00\x20\xca\xf7\xff\x2a\xdf\xd7\x03\xb0\x3e\x7f\xdd\xcb\x27\x91\x7e\x87\x7c\x4c\xdc\x68\xe1\x9b\x94\xc0\x4d\xeb\xe4\x59\x97\x3e\x98\xa3\x1e\x2d\x97\x9f\xb7\x4b\x5f\xd9\x91\x8c\xd9\x09\x8d\x39\x71\x12\x6c\xee\x52\x1f\xbc\x26\xb6\x16\xa5\xf1\x4d\x47\xb4\x1c\x1b\x59\xf0\xd2\xcb\xa1\x11\x07\xea\xaa\x50\x15\x4a\x25\x67\x1d\xba\x65\x33\x7a\x15\xe5\xd0\xa1\x5c\xea\x91\x71\x58\xef\xfc\xe5\xfc\x4e\x7b\xff\x4d\xfa\x2c\x08\x80\x2a\x7d\xf8\xcd\x81\xff\x64\x29\xd5\x22\xae\x60\xf0\xb6\xdd\x12\xd7\x48\xa3\xb1\x4d\x58\x7a\xff\x97\xa1\xe3\xaf\xf7\x5d\x82\x37\x63\xc8\x81\xaf\x70\x22\x89\x61\xfa\xa8\x6f\x6d\xaf\x72\xd9\x46\x13\xd6\x59\x31\xf5\x4b\xfd\x3d\x2c\xbd\xbf\xa7\x8f\x56\xd2\xa5\x66\x02\x00\xb0\xf1\xa7\x2d\xe7\xe1\x95\x04\xfe\x63\xfe\xef\x2d\x3b\xf8\x3f\x6d\xe4\xfb\x77\xc3\xcf\x91\xdf\x5b\x22\xc5\x1f\xa2\xee\xfe\x4f\x0d\xfe\xcf\x29\xbf\x67\x97\xf6\x0f\x29\x71\x7c\xff\xb4\xb3\xfa\xb9\xc8\xf7\x58\x38\xf3\x43\x11\x22\xe8\xff\x4a\xdb\x9f\x6b\x7d\xbf\xf9\x1f\x07\x52\x15\xfd\xa7\xb1\x66\x65\x26\x20\xf8\xaf\x29\x04\x00\x01\xe0\x0d\x0f\x00\x40\xfe\xbc\xdb\xbf\x04\x00\x00\xff\xff\xbb\xeb\x35\xe2\x01\x0e\x00\x00")

func syntaxStdlibSafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibSafeArraiz,
		"syntax/stdlib-safe.arraiz",
	)
}

func syntaxStdlibSafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibSafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-safe.arraiz", size: 3585, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x64, 0x4e, 0xdc, 0x22, 0x90, 0xac, 0x12, 0x17, 0x45, 0xda, 0x23, 0xe2, 0xda, 0xcc, 0xd1, 0x47, 0xd1, 0x89, 0xc7, 0x95, 0x4d, 0xe8, 0xff, 0x38, 0xd1, 0xc8, 0xa2, 0x2c, 0x49, 0x2c, 0xc2, 0xc5}}
	return a, nil
}

var _syntaxStdlibUnsafeArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\xf0\x66\x66\x11\x61\xe0\x60\xe0\x60\x40\x07\x3c\x0c\x0c\x0c\xc9\xf9\x79\x69\x99\xe9\x7a\x89\x45\x45\x89\x99\x97\x4e\xf8\x9e\x39\xd3\xad\x7f\xea\xbc\xfe\xc6\xa0\x00\xaf\xf3\x3a\x27\x35\x7c\x2f\x79\x9f\x3b\x7f\xd5\x5f\x47\xeb\x92\xef\x19\x96\xc0\xce\x99\x5e\x56\x5c\x09\xa1\x99\x33\x2d\x57\x86\x71\x79\xfd\xda\xf9\x53\x73\xa9\xe5\xca\x5f\x16\x21\xaf\xc5\xc3\x9f\x4d\x55\x09\x7b\x21\x3e\x7d\xc9\x93\x14\x35\x47\xcd\xbb\x97\xf6\x3c\x3a\xb2\x25\xc4\xb6\xa3\x72\x56\x03\x03\x03\xc3\xff\xff\x01\xde\xec\x1c\xfa\x49\xa6\xa6\x91\x0c\x0c\x0c\x65\x0c\x0c\x0c\xb8\x9d\xa4\xca\xc0\xc0\x90\x9b\x9f\x52\x9a\x93\xaa\x9f\x9e\x59\x92\x51\x9a\xa4\x97\x9c\x9f\xab\x9f\x58\x54\xa4\x9b\x98\xa9\x0f\x76\xa4\x7e\x7a\xbe\x5e\x6e\x7e\x4a\xcd\x14\xef\x5d\x8f\xd5\x04\xdc\x8e\x7f\xd4\x32\xf1\x61\x7b\x14\xd8\x20\xd7\x9c\x32\x4d\x9f\xfb\x85\xa8\x42\xc8\xa4\xcc\xd3\x4e\x9a\x13\x7e\xdf\x5a\x7d\x5e\x7d\xf5\xee\xf5\x17\xdf\xde\x11\x6c\xfe\x65\x29\xd3\x75\xdc\xf4\xcb\xeb\x96\xa3\x2f\x2e\x57\xbe\x9d\xc1\x1d\x9e\xd7\xe9\xf5\x7a\xfb\xc1\x5f\x97\x33\x79\x5a\x53\x82\xe6\xfa\xb5\x9c\x4e\x89\x9d\xd6\x73\x5a\x41\x74\x3b\x73\x90\x46\xde\x24\xcd\xb4\x2e\xfb\xff\xa7\x02\x3e\x2f\x7e\xf3\xa6\xa6\xf2\x3c\xc3\x65\xe9\x57\xf7\xaf\x0a\x8b\xed\x9f\x5f\x57\xcd\xb9\xda\xeb\x8f\xed\x72\xfd\x17\xff\x16\x6e\xd0\x7b\x3a\xfd\x74\xed\xa6\x23\x1f\xcf\x3e\x7c\x22\x7f\x22\x3f\xe0\x4e\x83\xa6\xda\x26\xcf\x32\xa7\xe9\xe7\x1e\x66\x29\xab\xc7\xac\xd8\xc1\xa9\x36\x43\xc3\xb1\x41\x80\xab\xe7\x82\xd4\x02\xbd\xad\x39\x5b\x58\x0c\x43\xb6\x96\xb1\x3e\x6f\x9d\x5f\xed\xff\x22\xa8\xef\x97\xe2\xee\x98\x63\x73\x99\x27\xb0\x7f\x3b\xc6\x23\x22\x67\x91\xcf\x79\x53\x2e\xf7\xdb\x91\x9b\xc7\x3e\x87\xe5\xd7\xc5\xc6\x69\x2c\xf9\x90\xa7\x25\xbd\x90\xd1\x65\x6d\x76\xb2\x97\x44\x1b\x5f\xf5\x1b\x81\xb3\xfa\xcf\xeb\x5e\x3f\x4b\x9c\xbd\xea\x4b\xe3\xdb\x73\xfd\xd6\x42\xea\x5b\xfe\x3e\x49\x3f\xf3\x61\x6a\x40\x90\xe3\xd6\x87\xb7\xa5\xac\x58\xee\xbe\x66\xdb\xfc\x32\x59\x63\xa2\x46\xc0\x93\xdf\x1b\xe6\x4e\x4d\xf9\x34\x41\xd1\xde\x77\x5a\xfd\x61\x3d\xb6\xf2\x83\x5b\x5a\x4d\x4e\xcf\x7e\xf2\xf6\xcd\xa1\x96\x70\xeb\xcf\x33\x4e\xdc\xfc\x11\x32\xd1\x27\x75\xe5\x6a\xdf\xcc\x7b\x62\x5f\x2f\x2e\x2b\xb9\x9f\x9b\xea\x17\xa5\xf7\xd8\x5f\xf2\xe0\xad\x66\x9e\x5a\xd7\xef\x1b\x26\xef\xff\x60\xa9\x62\x7f\xe7\xbb\x8f\xdf\x02\x53\x37\x2e\xc3\x4f\x79\x9b\xde\x19\x4d\x78\xff\xf6\xef\x6f\xdb\x49\x3e\x7f\xde\xbb\x76\xcc\x38\x67\xee\x9d\x7c\x83\x85\x53\xf8\xee\x77\xdd\x27\xbc\xfd\xf3\xae\xa9\x3e\x3a\xb3\xdc\xe0\xd2\xaf\x9c\x88\xe2\x82\x3f\x3f\xec\x3e\x15\x29\xf9\xbc\xf3\xb1\x29\x89\xbf\x3f\xaf\xfd\xd7\xcc\x2b\xfd\x05\x87\x76\xbc\x0f\xdf\xf4\x6b\xc1\x96\x4b\x09\xf9\x27\xee\x3e\xd9\xff\x5e\x68\x5e\xa3\xc1\xcd\xca\x94\x46\xb7\x7f\xc7\x64\xef\x4e\xbf\x7e\x9a\xdd\xc9\x44\xc1\xe1\x54\xd4\x8c\x4b\x3b\xa4\x72\x2e\xaf\xd8\x36\xed\x9b\xc2\xa7\x53\x33\xb6\x4f\xfe\xcf\x39\xe1\x50\x83\xe0\x54\xa6\xe0\xa9\xdb\x8a\x6f\x69\x4c\xd0\x2d\x7b\x26\xec\xb0\x21\xdb\xca\x59\xed\x22\x17\xc3\x4a\x13\x93\xa5\x2f\x0f\x7e\x09\xbb\xb5\xec\xfa\x2b\x61\xb7\x3d\xc7\x7d\x16\x05\x39\x71\x30\x7b\x4d\x49\xca\x60\xe7\x9e\x2a\x3b\xeb\xd7\x8f\x1b\xf1\x8c\x9c\xf7\x2f\xdd\xfb\x92\xb5\xba\xa5\xd0\xe9\x9b\x90\x44\xa1\xdd\x9e\xcb\xb9\x13\xd7\x46\x1e\xeb\xd8\xf5\x66\x95\x1c\xdb\x65\xde\x45\xeb\x7f\x3f\x56\x92\x0f\xd8\xb2\xe3\xf9\xcf\xf7\xff\x0f\xb6\xff\x2a\x9e\x9b\x27\x3b\xef\x7f\xf2\xd6\xf4\x69\xa7\x4f\xfc\x39\xf3\xfe\x9b\xd5\xc6\xeb\xf3\xf5\xf5\x57\x3c\x5a\x76\xef\xed\x92\x15\xa9\xdc\xba\x0e\x2b\x6f\x9f\xca\x48\xd6\x56\x7d\xa5\xb7\xf9\xf7\xe3\x2f\xf1\xf0\x94\xed\x7a\xa8\x2b\xae\x9d\x89\x81\xe1\x03\x2b\xbe\x94\xed\x40\x38\x65\x17\x57\xe6\x95\x24\x56\xe8\x17\x97\xa4\xe4\x64\x26\x41\x29\xdd\xd2\xbc\xe2\xc4\xb4\x54\x48\x06\x4d\xe9\x73\xec\x6a\x09\xe0\x71\xf9\x3e\x6f\xd1\x81\xbd\xdf\x67\xfc\xd5\x49\x17\xfe\x7b\x51\xfe\x59\xb9\x92\x67\xce\xc7\x6f\xbd\x0a\xbd\xbe\xef\xb9\x56\xc9\x7d\xad\xfa\x13\xc6\x79\xe4\xc9\x26\xb5\xb0\xed\xcb\x45\xf8\x04\xca\xac\x0c\x66\x2b\xbf\x39\x38\xc3\x7c\x6e\x90\x0f\xf3\xa2\x13\xa7\x3a\x54\x74\x9f\xb0\xfa\xba\xa9\xdb\x4f\x68\x9b\xb8\x71\x77\xca\xa6\x79\xda\x45\xf2\x1e\x6c\x7f\x54\x26\xfd\xb3\xb4\xdb\xb0\xae\xbe\xd9\x3c\x65\xa3\xdb\xae\x86\x73\xbf\xef\x5c\x3b\xa6\xa0\x5b\x70\xee\xac\xa9\x43\x56\xe4\xcd\xf5\x69\xd3\xd7\x2c\x08\x7a\x72\x65\x51\x99\xf1\x9f\xb2\x17\xff\x94\xbc\x27\x6f\x64\x6e\xd0\xde\xc7\x04\x0b\x82\xc9\x73\x57\x6c\x9c\xca\xc0\xc0\xf0\x03\x9c\xb9\x19\x99\x44\x18\x10\x81\x80\x9c\xf1\x79\x30\x82\x05\xb9\xfc\x41\xd7\x89\x1c\xb0\xaa\x28\xba\x26\x13\x5b\x4c\xa0\x1b\x89\xec\x50\x07\x14\x23\x73\x99\x29\x8f\x9f\x00\x6f\x56\x36\x90\x59\xcc\x0c\xcc\x0c\xbf\x19\x18\x18\x0a\x58\x40\x3c\x40\x00\x00\x00\xff\xff\x80\x12\x2f\x6d\x81\x05\x00\x00")

func syntaxStdlibUnsafeArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibUnsafeArraiz,
		"syntax/stdlib-unsafe.arraiz",
	)
}

func syntaxStdlibUnsafeArraiz() (*asset, error) {
	bytes, err := syntaxStdlibUnsafeArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib-unsafe.arraiz", size: 1409, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xf7, 0x1b, 0xa9, 0x91, 0x16, 0x3b, 0x12, 0xc4, 0x67, 0xad, 0xc4, 0x43, 0x55, 0x4b, 0x25, 0xb6, 0xd6, 0x99, 0xf1, 0x3, 0xb9, 0xa8, 0x53, 0x7, 0xcc, 0x16, 0x5b, 0x7b, 0x37, 0xd2, 0xad}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib-safe.arraiz":    syntaxStdlibSafeArraiz,
	"syntax/stdlib-unsafe.arraiz":  syntaxStdlibUnsafeArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib-safe.arraiz":    {syntaxStdlibSafeArraiz, map[string]*bintree{}},
		"stdlib-unsafe.arraiz":  {syntaxStdlibUnsafeArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
