// Code generated by go-bindata. DO NOT EDIT.
// sources:
// syntax/implicit_import.arrai (921B)
// syntax/stdlib.arraiz (3.248kB)

package syntax

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _syntaxImplicit_importArrai = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x41\x8f\xdb\x2e\x10\xc5\xef\xfe\x14\x23\x65\xb5\x06\xc9\x7f\x7c\x27\xca\xfe\x73\xaa\xd4\x7b\x8f\x2b\xed\x52\x33\x5e\x53\x61\x70\x81\xa4\xb1\x5c\x7f\xf7\x6a\x70\x62\xd7\xad\xea\x93\x19\x7e\x0f\xde\x3c\xe0\x00\x5f\x3a\x13\x21\x36\xc1\x0c\x09\x3a\xe5\xb4\xc5\x08\xa9\x43\xe8\xd5\x30\x18\xf7\x01\xbe\x05\x8d\x8d\xd7\x18\x22\x18\x07\xa6\x1f\xac\x69\x4c\xa2\x1f\x1f\x52\x04\x8d\x03\x3a\x9d\x49\x57\x1c\xb2\x14\x6f\x09\x5d\x34\xde\x91\x98\x0a\x0b\x8b\x1a\x5a\x63\x51\x14\xc5\x61\x5b\xb2\x57\x43\xcc\x65\x68\x7d\xe8\x55\x8a\x90\x7c\xd6\xc4\xa4\x9c\x56\x41\x6f\xe8\x25\xa2\xa6\xd9\xa5\x90\x45\xd9\x52\xea\x54\xba\xab\x45\x61\x31\x6d\x8a\x13\x4c\x05\x00\x40\xd9\xc4\x6b\x29\xa1\xae\xd1\x35\x9e\xbc\x8a\x26\x5e\xc5\x82\x55\x0b\xf1\x2d\x7a\xb7\x47\xa8\xb2\x67\x6e\x36\xde\xf6\x0c\x55\xf6\xcc\xa8\x7a\x5b\x4a\x60\x77\x0f\x3b\x9a\xe6\x1e\x34\x28\x6b\x54\x94\x30\x95\x63\x6f\xcb\x99\x57\xc5\x7c\xa4\x60\x1a\xef\xae\x48\xb9\xe2\x15\xc3\x98\x3a\x0a\x36\x79\x50\xa0\x4d\x93\x8c\x77\x2a\x8c\x30\xad\x01\xcb\x47\xaf\x9f\xdc\xfc\x67\xeb\x2c\x1b\x5a\x0b\xad\xb1\x09\x03\x88\xf3\x55\xd9\x0b\xde\x83\xa1\x8f\xc9\x3b\x53\x81\xcc\xa6\xb8\x84\x89\x49\x71\xae\x60\x61\xd7\x4d\xf8\x0c\x3f\x81\x65\x06\x4e\x2f\xc0\xce\x52\xfc\xcd\xf0\x6a\x5d\xf9\x4d\xc2\x24\xe6\x65\x3c\x17\x1c\xfe\x7b\x81\xba\x0e\x68\xc5\xc5\x19\xef\x98\xe0\xc7\xa2\x78\xdd\x2e\xcb\xeb\xd7\x31\x61\x86\xa9\x93\xad\x7e\xa2\x50\x34\x4c\x75\x1d\xf1\xbb\xe8\x54\x7c\x1b\x02\xb6\xe6\xc6\x4a\x51\x56\x1b\xc7\x29\x6b\x22\x52\x30\xfd\x3f\x90\x8a\x3c\xad\xc3\xf9\xb8\x8b\x88\x6d\xdc\xff\x8c\xbc\x70\xc9\xd6\x5e\xea\xda\xfa\x0f\x31\x04\xe3\x12\x7b\x7a\x5f\x5f\x41\xd6\xd2\x19\xb5\xca\x58\xba\xe0\x3e\xfc\xe6\xfc\x69\x3b\xa9\x59\xc0\xe7\xfc\x0a\x08\xfe\x61\x52\x07\xb4\x43\x7c\x6c\xfe\xce\xe1\xf9\x19\xd6\x00\x78\xf1\x2b\x00\x00\xff\xff\x39\x95\x6f\x16\x99\x03\x00\x00")

func syntaxImplicit_importArraiBytes() ([]byte, error) {
	return bindataRead(
		_syntaxImplicit_importArrai,
		"syntax/implicit_import.arrai",
	)
}

func syntaxImplicit_importArrai() (*asset, error) {
	bytes, err := syntaxImplicit_importArraiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/implicit_import.arrai", size: 921, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x61, 0xe5, 0x91, 0x8e, 0xa9, 0x63, 0x16, 0x96, 0x63, 0xc7, 0xb9, 0x92, 0x57, 0x54, 0xf6, 0x8, 0xc, 0xca, 0xf0, 0xea, 0x12, 0x5a, 0xfa, 0x4a, 0xb8, 0xfc, 0xa8, 0x37, 0x95, 0x6f, 0x1f}}
	return a, nil
}

var _syntaxStdlibArraiz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x77\x54\x53\x79\x1a\x7d\x08\x09\x5d\x64\x28\x36\x9a\x20\xd5\x40\xd0\x28\x48\x13\x50\x9a\x09\xa0\xa1\x17\x41\x90\x10\x12\x4c\x0c\x52\x04\x44\x8a\x40\x00\x95\x22\x43\x0d\x18\x44\xa4\x05\x51\x41\x10\x35\x44\x10\x62\x01\x02\x09\x43\x91\xa2\x52\x55\x5a\x30\x30\xf4\xbe\x67\x66\xd6\xb3\xea\x9e\x9d\xdd\x9d\xdd\xf7\xcf\x3b\xbf\x3f\xbe\x76\xcf\xfd\xee\x77\x4f\x23\xb8\x79\xc4\x01\x3e\x80\x0f\xf8\xf1\x13\x02\x00\xc0\x8b\x70\x01\x8d\xf5\xd1\xf0\xf4\xf7\xf7\xc4\x76\x34\x59\xb5\xb6\xde\x80\xb6\xb0\xa0\x95\x36\xa7\xe1\x2c\x48\xb3\x8a\x55\x07\x82\xc9\xea\x3e\x05\x51\xeb\xb0\x6a\xe5\x41\x5e\x23\xc1\x75\x05\x3c\xec\xb1\x24\x1d\x8a\x83\x00\x7c\xf5\xd9\x8a\x6a\x91\x0e\x65\xf5\xa8\xdd\xd4\x4e\xc7\xcf\x19\xfb\x1d\xc6\x77\x66\x15\x7e\x44\x29\x19\xab\x1a\x24\x18\xe7\x44\x01\x00\xb0\xb5\x75\x1a\xc1\xcb\xa7\xea\x60\x31\x6e\x03\x00\x00\x01\x00\x80\x7f\xdd\x8b\x22\x00\x00\x78\x02\x2a\x08\xe7\x0d\xf5\xc1\x06\x62\x82\xce\x69\x78\x11\xf0\x50\x4f\x7f\x7f\x75\x4f\x2c\xf4\xf7\xee\xa0\x3e\x04\x0d\x3c\x01\x15\x9b\xce\xb8\x5c\xad\x25\x14\xd7\x43\xbe\xe7\xd1\xa7\x31\x43\xa2\x43\xfa\xdd\x6e\xbb\xbf\x88\x04\x35\xf2\xf9\xc5\x55\x52\x34\xd3\x34\x1d\x07\xe3\xef\x58\xbd\x2e\x6c\xae\xff\xf5\xf8\x6d\xf7\xf0\x4c\xd4\xd9\x13\xb5\x89\xd9\x0b\x1a\xdb\x11\x74\xdc\x53\x7f\xb9\x96\x06\x3c\xef\xd3\x4e\x8a\x08\x09\x65\x73\xdb\x3a\xb6\x93\x4f\x0b\xc9\xb4\x55\x3e\x12\xbf\x5d\x15\xa5\xdd\x7c\xf8\xc0\xa3\xc1\x2d\x8b\xd3\x9b\x79\xda\x43\x50\xd9\x3d\xaf\x5a\xe3\x56\xc3\x2e\xc6\xf6\x3d\x2c\x39\x9b\xf7\x92\x2a\x1e\xb9\xba\xcc\x3d\x7d\x56\x3c\x53\x75\xeb\xa2\xb3\xb9\x5c\x32\x41\xd2\x3c\xd8\x3c\xc2\xb6\xcf\xea\x60\x9b\xc9\xcf\x3c\x0a\xfd\x47\x63\x0f\xb4\xde\xf2\x2b\x60\x2b\x65\x7b\xc8\x3b\x1e\xe7\xbf\x63\xbf\x2f\x11\x59\xd6\x92\x54\x9e\x64\x57\x70\xe0\x80\x17\x8c\x09\x1b\x73\x35\xc7\x78\x5d\x5f\x65\xb1\x03\x27\x82\x93\x6d\x28\x1e\x04\x4b\xf3\xe1\xe4\x08\xdb\xa6\x91\x71\xb4\xa3\x90\xa6\x88\xeb\xfa\x8d\x19\x93\x7d\x71\x22\x25\x8f\x24\xcd\x54\x91\xa4\x32\x15\xff\xee\x20\xe1\x9a\x5e\x39\xc9\xad\xdc\xb5\xfe\xe5\x0b\x88\xee\x91\x17\x35\xf4\x70\xd3\x91\xd8\xf6\x64\xa6\x57\x34\x94\x98\xe9\x92\xb1\x77\xf3\x0c\x05\x9c\x81\xb5\x4a\x3a\x79\x59\xd6\x7f\xbf\xc0\xe1\xb9\x8d\x5e\xb4\x22\x49\x1f\xd3\x94\xa4\x30\xe3\x88\xfb\xec\x01\xdd\xa5\x9d\xea\x89\x4d\x93\x0a\xd9\x6b\x46\x8b\x1e\x0b\xd8\x2f\x38\x47\x6f\x11\x0d\x22\xee\xda\x70\xe8\x6a\xdb\x31\x4a\xad\xcd\x50\xc5\x52\xe7\x39\x68\x1e\x3d\x59\xbe\xf9\xe8\xc5\xed\x77\x6b\xfd\x64\x0b\xa6\xde\xba\xa5\xfd\x84\x4e\xa4\x0b\x97\x8a\xb8\x2a\x36\x5a\x4c\x7d\x51\x9c\x7e\xcf\xc6\x90\xd0\xf3\x57\x84\x0c\xd4\x53\x72\xb3\xcc\x9b\x4b\x4c\x4f\xd1\x53\x35\xfb\xaf\x86\x60\xdc\x07\x64\x3a\x3d\x47\x18\x47\xc2\x76\x9a\xdf\x0a\x1e\x75\x7d\x3e\xef\x2f\x18\xe4\x77\xe2\x82\xf9\x12\xa7\xff\x5e\xfc\x1d\xcd\x68\x8e\x73\x7e\x5e\xfd\x45\xc4\xd4\x3c\xcd\x14\x9e\xe0\xc2\xaf\xe8\xad\x78\x9d\x56\x91\x11\x4d\x7d\x3b\x06\x6f\x6c\x68\x82\xd1\x09\x0a\x57\xb6\xdd\x22\xa6\xfa\xd8\xe6\xea\x42\x25\x02\xa5\x31\xf8\x1c\x78\x24\x37\x5f\xc5\x4b\x63\xe9\x5d\xf0\x93\x78\x3b\xf2\xce\xfb\x6a\x2e\x37\x4f\x3f\xf9\xac\xf7\x9a\xc6\xe4\x35\xda\x17\xab\x2a\x98\xa6\xad\xe2\x8a\xaf\xde\x56\x5a\xab\x20\x37\xaf\xf0\x48\xd9\x3a\x65\x73\xa6\x7c\x71\x8d\xcf\xb3\x3a\xf5\x19\xc6\x85\x6b\xac\x00\x7c\x73\xfa\x14\xf2\x70\xdf\x9b\xf4\xa5\xa2\x0d\xf1\xc8\x2e\x6c\xe6\x97\x59\xf2\xf4\x29\x7d\xcb\xac\x3c\x1d\x96\xe3\xd3\x64\xf6\xca\x5d\x38\xb7\x6e\xed\x84\x48\x70\x11\xa4\xb0\xcb\x6c\x52\x4a\x54\x3d\x9b\x4a\x2f\x53\x13\x0b\xae\x27\x6f\xf2\x7f\x25\x2c\x6e\x49\x1b\xec\xbe\x0d\x00\x6e\x83\xfe\x8c\xb0\xda\xff\x9e\xb0\x01\xa1\x17\x02\x3d\x43\xa0\x01\x81\x28\x1c\xf6\x1c\x14\x8d\xf3\xfc\xfb\x9e\x95\x3b\xb5\x05\x14\x58\x88\xd7\xb3\xce\xce\x16\xc7\x09\xb4\x5d\x27\x87\xf9\x74\xd9\xe1\x2f\x25\xa7\x31\xde\xba\x9f\x73\x70\xc1\x66\xa8\xf1\xdc\xe3\x82\xa9\xc6\x6d\x85\x4f\x2d\xf0\xe6\x47\x65\xdf\xa7\xc5\xc8\xd3\x22\xce\xd6\x2f\x11\x19\x10\x91\x51\xcc\x06\x08\x90\x93\xd4\xd9\xa1\x44\x14\xb1\xb4\x20\xc1\xd7\x8f\xcd\xf6\xf2\xc2\x29\xbc\xb0\xf6\x72\x91\x23\x84\xa6\xaa\xe7\x4d\x1e\x60\x9b\x76\xab\xcb\x47\xcd\x2a\xe5\x1a\xea\x3b\x27\xe4\x67\xf6\x14\x9f\x31\x8b\x57\x66\x94\x9e\x6a\x2f\x77\x12\xeb\x39\x62\x39\x68\x74\x9d\xbc\x0c\x72\x25\xc9\x44\x21\x9a\x15\x56\x6b\xac\x6b\x1e\x47\xa9\xac\x39\x4b\xbd\x3d\xee\x3e\xe9\x6c\xbd\x13\xd5\x90\x39\xcc\x63\x38\x71\x68\x9d\xee\xba\xfe\x9a\x73\xcd\x5c\x92\xfd\x09\x3a\xbb\x7a\x88\x4c\xd3\x98\x59\x6a\xe4\xd7\xbf\x3c\xb4\x82\x1e\x3c\x34\xb5\x51\x0a\x51\xfb\x00\xc9\x42\x3e\x0a\x08\xf7\xeb\xc1\xee\x19\x0d\x2e\x98\x7f\x96\xf1\x59\x69\x52\x0c\x0b\x1d\x51\x88\xf9\xa4\x64\x55\xf3\xcb\x83\xba\xf3\xfc\x45\x93\xe6\x9a\x55\x3b\x29\x42\xc4\x33\xf5\xdc\xe1\xb1\x2b\x52\x99\x1f\x53\x1b\xb4\x3e\xd7\xde\x5e\x97\xbb\x12\xa2\x3f\xfb\x74\xc7\x2a\xf3\xf6\xf5\xc1\x29\x3e\xd3\xfe\xc2\x93\xbd\xe7\xa2\x1f\x65\x09\x5e\xd3\x0c\x64\xc4\x83\x0e\x1c\xaa\x13\x6b\x0d\x9a\xcd\x79\x23\xca\x6a\x0d\x52\xa9\xa1\x25\x04\x2c\x08\x22\xbd\x8d\x9c\xbc\x52\x8f\x7d\x8e\x39\x36\x12\x23\xea\x73\x2a\x74\x33\x1f\x8d\xa2\xdd\x2c\x62\xf9\x7e\x8a\x5a\xad\xb6\x9a\xec\xc8\xe1\x7a\xa0\x27\x57\x3d\xf9\x3e\x7c\xfc\xfd\xc5\xe8\x81\xbb\xac\x37\xfa\xf0\xb4\x44\xe1\x3d\x53\xe9\xe0\xbc\x95\x2b\x16\x71\x45\x13\x5d\xaa\x94\xa0\x32\x7f\x78\xd9\xfa\xd5\x5a\x3d\xbf\x6d\xb2\xc5\x8b\x66\x12\x43\xb0\xf9\x5d\x75\x4c\x4b\xf9\x7d\x69\x82\x1a\x96\x4a\xf9\x79\x76\x4c\x4d\xbf\xcc\x52\x7e\xcb\xa9\x72\xb1\x9b\xba\x2e\xd6\xd8\xdd\x6a\x1c\xea\x87\x0f\x33\x0b\xa9\xb6\x36\xa0\x96\xa0\x2f\x51\x95\xde\x5d\xde\xfc\x7b\x86\x92\xcf\xa0\x8f\x2f\x66\x81\x33\x5f\xc1\x1d\x4d\x30\x8c\x02\x88\x6a\x51\x86\x35\x51\x82\xbb\x1b\x97\x20\x96\x5d\x12\x2f\xcf\xf0\x54\x8f\x3a\xb1\x0b\xbf\x03\xae\x31\x18\x6e\xd1\x41\x03\x3f\x10\xa0\x4d\xde\xb9\xeb\x9d\xfb\x42\x28\x53\x59\x86\xee\x0f\x0d\xe9\x75\xcd\x7f\xac\xd8\xc4\xa5\x28\xf9\xb1\x8c\xf2\x32\x63\x89\xa4\xe5\x4c\xd6\xf5\x66\xce\x2f\xbe\xde\x9b\x74\x92\xa9\xcb\x5d\x49\x4c\x28\x9a\x14\x56\xae\xf6\x7d\xfd\xea\x60\xdc\xee\x5b\x21\xe5\xb6\x3f\x97\x9e\x22\x34\xd4\xe8\x33\x4d\x7a\x0e\x21\x5a\xca\xa6\x48\xd7\x0a\x72\x13\x30\xc1\x67\x4a\xba\x48\x1c\xdf\x2d\x13\x70\xbc\x3c\xf3\xae\x17\xc4\xee\x61\x63\x4e\x30\x5c\xff\x9a\xd4\xc9\x84\xfa\xf6\x67\x2d\xc2\x0f\xaa\x45\x0b\x25\x62\x3a\x02\x85\x83\x3c\xb2\x6b\x0d\xf1\x6b\x2b\x48\xdf\x94\x52\xae\xa6\x9c\x0b\x6b\x91\x57\x61\x41\x2e\x4b\xc6\x49\x72\xa5\xbb\x2a\xa8\x48\x6d\x5c\x58\x9e\x41\xdf\x21\x96\xf7\x3e\x1a\x57\xfd\x5a\x20\x19\x8b\x19\x3f\xee\xe8\x1a\xd3\x72\xed\x9d\x7d\x3e\x90\x92\x54\x24\x80\xdc\xe0\xd4\xa2\x59\x54\xe6\x00\x0e\xc0\xd0\x70\x8d\xaa\x95\x35\x40\xa7\x89\x11\x15\x54\xd2\xc5\x4d\x93\xa9\xc8\xb8\x6f\xd6\xed\x1b\xef\x8f\x33\xf2\x44\xec\x96\x27\xbc\xb3\x4b\xbf\x15\x22\x45\xec\x0d\x16\xdd\x70\xa7\x74\xd3\xb3\x98\x06\xe7\x3a\x9e\x3c\x30\xcd\x6e\x6d\xb0\xf3\x3f\x50\x75\xf8\x84\x5e\xb7\xd2\xdc\xe2\xdc\x1c\x3e\xff\x1d\x67\xd2\x7b\x74\xb3\xae\x70\xc9\x54\xe6\x95\x44\x86\x3c\x44\x2b\x3a\xd0\xb2\x5f\x29\x02\xef\xe0\xec\x96\x8d\x74\xc8\x1b\xec\x73\x62\xba\x2d\x68\xbc\x5f\x07\x47\x1a\x1a\x1a\xc0\x1e\xff\xd4\x60\x8c\x3a\x6a\xaa\x0b\x2e\xab\x8c\x32\x20\x31\xdc\xb4\x6c\x7c\x9a\xd0\x63\x38\xa8\x99\x42\xb3\x8f\x16\xe2\xf1\x27\xd1\x03\xe3\x70\x46\xec\xdb\xcb\x97\x77\xec\x6b\x75\xb9\xe1\x1b\x10\xf1\x14\xdf\x3f\x97\x3d\xb2\x50\xe7\xa3\xfb\x30\x75\x42\x3d\xfb\x19\x55\xa3\xd8\xc1\x87\x61\x0d\xb5\x35\x43\x09\xaa\x46\xa7\x3c\x27\xf6\x2b\x65\x4f\x2d\x12\x6e\x68\xf6\x6e\x33\xf6\xb9\x8c\x90\x66\xea\xde\x67\x9f\x08\x73\x82\xa6\xdb\xe0\x0e\x0f\x19\x56\x44\x0b\x8d\xfb\x4a\x89\xd0\x29\x4e\x71\x07\xc3\x8d\x11\xf6\x5e\x8c\x50\xf1\xfa\xe4\x98\xbe\x3e\xc3\xd9\xfb\x45\xfc\xf9\xbf\xae\x83\x2d\x07\x0b\xae\xa4\xb8\xaf\xc7\x7c\x60\xb1\xc5\x89\x2f\x7c\x5f\x09\x28\xa2\x69\x7d\x23\xf6\xde\xae\x5a\xc6\xf6\xad\xdd\x09\x7b\x3e\xd5\xf9\xe2\x46\x11\x77\xdc\x95\x9d\xc5\xdc\xa2\x87\x67\x58\x6d\xfb\x7d\x31\x89\x89\x0e\x8a\x6d\x34\xce\x99\x94\x62\x45\xbc\x72\xca\xc8\x5e\x76\xf5\x7c\x81\x7c\xbe\x5f\x9a\x3c\xc3\xdc\xaf\xb6\xf0\x35\x42\xff\xca\x44\xd1\x4f\xd3\xc2\x3e\x9b\x8a\x49\x6f\xe8\x36\xe7\xc1\xe3\x7c\x94\x97\x57\x35\x25\x48\x39\x90\xb0\x88\xc6\x05\x96\xa5\x49\x0f\x45\x54\x76\x10\x03\x71\xdb\x1d\x9c\xc9\xae\x55\x5e\xf3\xfb\xa8\x87\x94\x9d\xca\xce\x42\x0d\x56\x59\x25\xbe\x5b\xb9\x54\x25\x54\x78\xac\x97\x47\x92\x41\x49\x1a\x0a\x51\x81\x84\x47\x3d\x26\xde\xd1\xe8\xb3\xf0\x7a\x63\x1c\x6f\x3f\x5c\x3c\x35\x07\x33\x8e\x09\xe8\x76\xe9\x19\x2b\x66\x09\x3b\x94\x53\xa5\x1b\x2f\x41\xd8\x55\x68\xe9\x86\x64\x3d\xd2\xf8\xdb\x55\x5d\x30\x7d\x26\x6c\xb8\x9b\x1f\xd6\x35\x47\x08\x2d\x79\xb8\x04\x96\x6a\x4e\x32\xc4\x3c\x21\x48\x87\x86\x2e\x4c\xeb\x99\x39\x87\x1a\x90\x6b\x0c\x3d\x49\x99\xf7\xce\xb5\x13\xea\x45\x7d\x97\x03\x03\xb6\x0c\xc6\x27\xb4\x87\x3c\xf9\x56\x06\x68\x33\xa5\xe9\x4f\xb6\x70\x81\x3d\xd2\x88\xf1\xfc\x65\x09\xef\xd0\x74\x76\x44\x69\x40\x55\x00\xb1\x4a\xa7\xfd\xcd\xf0\x84\x31\x35\x8c\x8b\x36\x4d\x14\x37\x5a\xa0\x5a\xe7\x1a\xec\xfd\xf2\x25\xea\x58\x63\x0f\x87\x7d\xa6\x88\x77\x2e\x74\xe3\xec\x09\xf3\xce\x4f\x03\xa1\x8b\x69\xe3\x2a\xbe\x32\x1c\x46\x24\xd7\x57\x11\xa6\x47\x91\xd5\xe4\x40\x00\x60\x28\xfe\x67\x22\xac\xf3\xdf\x8a\xf0\x1f\xbf\x3f\x64\x18\x95\x7c\x10\xc1\x63\x2c\x44\x5c\x5b\x91\x10\x79\xf0\xec\x44\xef\xb4\x3a\x7b\x5a\x1d\xff\x48\xbb\x8f\x3c\x94\xed\xfc\x73\x39\x63\xdf\x66\x30\x49\x2f\x55\xcc\xf6\xf9\xcd\xa5\x54\x4e\x54\x96\xfc\x76\xc3\xdc\xf2\xab\xdd\xfd\xf1\xa8\x4b\x3b\x2e\x51\x3d\x2e\x80\x09\x9c\xc4\xd0\xce\x00\x0b\xdb\x78\x95\x02\x4d\x7d\x0b\x98\xb3\x59\x46\x73\x93\x46\x42\xdc\xb5\xca\x5c\x93\x8a\x45\x49\x92\xf0\x7e\xee\x3c\x6e\x63\x02\x3b\xb2\x22\x70\x19\xc4\xb9\x59\x64\xdf\x01\xea\x1a\x7c\x53\xe3\x00\xc6\xc6\x5d\xc4\x15\x6f\xef\x90\x24\x4e\x8f\x3d\x42\x88\x9f\x66\x76\x3c\x2e\x1d\xd8\xbd\x19\x6c\xf1\x50\xe6\x59\x4b\x3a\x30\x24\x39\x3b\x13\x3b\x1a\xc4\x81\x39\xba\xc8\x1c\x4c\xbe\x4d\xef\x1d\xed\x99\x75\xd0\x75\x13\x2c\x99\x97\xfe\x8a\x8d\x69\x89\x10\xe5\x31\x00\x00\xfb\xb9\xfe\xaf\x07\x2a\x28\x10\x8b\xfb\x03\x19\x5c\x72\xc3\xf5\x58\xcd\x1d\x26\x9c\x0d\x09\x50\x18\xf2\x26\xdb\xad\x0f\xea\x6c\x50\x4d\xe6\xd9\xf6\x8b\x91\xb2\x73\xac\xf7\x66\x78\xc2\x21\x98\x90\xa5\x1b\x35\x74\x61\xfb\x02\x51\x7d\x43\x47\xf0\x21\x36\xa6\xf0\x39\xc6\xa9\xfe\x3c\xff\x2f\x15\x6a\xbc\xe9\xb1\x39\xd2\x57\x6c\x3e\x9e\xf3\x72\x6a\x53\xbe\x87\xce\x92\x35\x30\x75\xcc\x67\x3a\x5c\x5c\x6e\x60\xf3\x03\x1a\x4a\xed\x71\x4e\x3c\xb0\x7b\x79\x56\x37\x0a\x3f\x44\xdb\xcf\x6e\x99\xa8\xd7\x33\xf8\x24\x77\x0f\x0c\x1f\x7c\xb1\xcb\xf6\xe8\x4b\xef\xd8\x4b\x75\xe7\x05\x92\x23\x8c\xbc\x36\x18\x75\xe4\x41\x93\x31\x64\x4e\x02\x75\xb6\xbf\xbb\xd3\xe0\xeb\xf4\xf1\x4a\xba\x79\x24\x00\x00\x96\x7e\xf7\x93\x5c\xdb\xc4\x81\x7f\xcc\xff\xad\xd7\x14\xfa\x27\x44\xbe\xf5\xba\x3f\x46\x7e\x7b\xf4\x15\xbf\x8b\x4a\xfc\x4f\x9d\xe9\x8f\x29\xbf\xa5\xb0\xf6\x77\x29\x0d\xb8\xff\xb2\x77\xf8\xb1\xc8\xb7\x5c\xd0\xf9\xae\x48\x23\xdf\xff\xb0\x1b\x3f\x96\xf9\x16\xf4\xef\x67\x19\xe0\xff\xcb\x34\x3b\x8d\x00\x81\x7f\x4b\x01\x02\x40\x40\x1d\x17\x00\xbc\x17\xf8\xed\xf5\xb7\x00\x00\x00\xff\xff\x98\x1b\xa9\x55\xb0\x0c\x00\x00")

func syntaxStdlibArraizBytes() ([]byte, error) {
	return bindataRead(
		_syntaxStdlibArraiz,
		"syntax/stdlib.arraiz",
	)
}

func syntaxStdlibArraiz() (*asset, error) {
	bytes, err := syntaxStdlibArraizBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "syntax/stdlib.arraiz", size: 3248, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x7e, 0x4e, 0x36, 0xa, 0xe7, 0x7b, 0x38, 0x66, 0x69, 0xea, 0xc8, 0xa9, 0x2d, 0x31, 0x88, 0x8c, 0x6b, 0x5c, 0x43, 0x65, 0x4e, 0xf4, 0x22, 0x65, 0xed, 0x89, 0xe6, 0xda, 0xb2, 0xef, 0xcb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"syntax/implicit_import.arrai": syntaxImplicit_importArrai,
	"syntax/stdlib.arraiz":         syntaxStdlibArraiz,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"syntax": {nil, map[string]*bintree{
		"implicit_import.arrai": {syntaxImplicit_importArrai, map[string]*bintree{}},
		"stdlib.arraiz":         {syntaxStdlibArraiz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
